[{"path":[]},{"path":"https://docs.ropensci.org/vcr/CONTRIBUTING.html","id":"bugs","dir":"","previous_headings":"","what":"Bugs?","title":"CONTRIBUTING","text":"Submit issue Issues page","code":""},{"path":"https://docs.ropensci.org/vcr/CONTRIBUTING.html","id":"code-contributions","dir":"","previous_headings":"","what":"Code contributions","title":"CONTRIBUTING","text":"Fork repo Github account Clone version account machine account, e.g., git clone https://github.com/<yourgithubusername>/vcr.git Make sure track progress upstream (.e., version vcr ropensci/vcr) git remote add upstream https://github.com/ropensci/vcr.git. making changes make sure pull changes upstream either git fetch upstream merge later git pull upstream fetch merge one step Make changes (bonus points making changes new feature branch) Please write test(s) changes affect code just docs Push account Submit pull request home base ropensci/vcr","code":""},{"path":[]},{"path":"https://docs.ropensci.org/vcr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Scott Chamberlain Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://docs.ropensci.org/vcr/articles/cassette-manual-editing.html","id":"why-edit-cassettes","dir":"Articles","previous_headings":"","what":"Why edit cassettes?","title":"Why and how to edit your vcr cassettes?","text":"design vcr good recording HTTP interactions actually took place. Now sometimes testing/demo-ing package want use fake HTTP interactions. instance: happens web API returns 503 code? informative error? happens returns 503 200 code? retry work? API returns much data even simple queries want make cassettes smaller? cases, can edit cassettes long aware risks!","code":""},{"path":"https://docs.ropensci.org/vcr/articles/cassette-manual-editing.html","id":"risks-related-to-cassette-editing","dir":"Articles","previous_headings":"","what":"Risks related to cassette editing","title":"Why and how to edit your vcr cassettes?","text":"use vcr cassette replace 200 code 503 code, vcr turned , test fail API probably return error. Use vcr::skip_if_vcr_off(). edit cassettes hand can’t re-record easily, ’d need re-record re-apply edits. Therefore ’ll need develop good workflow.","code":""},{"path":"https://docs.ropensci.org/vcr/articles/cassette-manual-editing.html","id":"example-1-test-using-an-edited-cassette-with-a-503","dir":"Articles","previous_headings":"","what":"Example 1: test using an edited cassette with a 503","title":"Why and how to edit your vcr cassettes?","text":"First, write test e.g. run tests first time. fail created cassette tests/fixtures/api-error.yml looks something like can edit (new status code) run test , pass! Note use vcr::skip_if_vcr_off(): vcr turned , real API request probably request won’t get 503 status code.","code":"vcr::use_cassette(\"api-error\", {   test_that(\"Errors are handled well\", {     vcr::skip_if_vcr_off()     expect_error(call_my_api()), \"error message\")   }) }) http_interactions: - request:     method: get     uri: https://eu.httpbin.org/get     body:       encoding: ''       string: ''     headers:       User-Agent: libcurl/7.54.0 r-curl/3.2 crul/0.5.2   response:     status:       status_code: '200'       message: OK       explanation: Request fulfilled, document follows     headers:       status: HTTP/1.1 200 OK       connection: keep-alive     body:       encoding: UTF-8       string: \"{\\n  \\\"args\\\": {}, \\n  \\\"headers\\\": {\\n    \\\"Accept\\\": \\\"application/json,         text/xml, application/xml, */*\\\", \\n    \\\"Accept-Encoding\\\": \\\"gzip, deflate\\\",         \\n    \\\"Connection\\\": \\\"close\\\", \\n    \\\"Host\\\": \\\"httpbin.org\\\", \\n    \\\"User-Agent\\\":         \\\"libcurl/7.54.0 r-curl/3.2 crul/0.5.2\\\"\\n  }, \\n  \\\"origin\\\": \\\"111.222.333.444\\\",         \\n  \\\"url\\\": \\\"https://eu.httpbin.org/get\\\"\\n}\\n\"   recorded_at: 2018-04-03 22:55:02 GMT   recorded_with: vcr/0.1.0, webmockr/0.2.4, crul/0.5.2 http_interactions: - request:     method: get     uri: https://eu.httpbin.org/get     body:       encoding: ''       string: ''     headers:       User-Agent: libcurl/7.54.0 r-curl/3.2 crul/0.5.2   response:     status:       status_code: '503'"},{"path":"https://docs.ropensci.org/vcr/articles/cassette-manual-editing.html","id":"the-same-thing-with-webmockr","dir":"Articles","previous_headings":"Example 1: test using an edited cassette with a 503","what":"The same thing with webmockr","title":"Why and how to edit your vcr cassettes?","text":"advantage approach involving editing cassettes learn one thing, vcr. Now, using webmockr directly tests, can also test behavior package case errors. assume api_url() returns URL call_my_api() calls. big pro approach works even vcr turned . con ’s quite different vcr syntax.","code":"test_that(\"Errors are handled well\", {   webmockr::enable()   stub <- webmockr::stub_request(\"get\", api_url())   webmockr::to_return(stub, status = 503)   expect_error(call_my_api()), \"error message\")   webmockr::disable()  })"},{"path":"https://docs.ropensci.org/vcr/articles/cassette-manual-editing.html","id":"example-2-test-using-an-edited-cassette-with-a-503-then-a-200","dir":"Articles","previous_headings":"","what":"Example 2: test using an edited cassette with a 503 then a 200","title":"Why and how to edit your vcr cassettes?","text":"assume package contains sort retry. First, write test e.g. run tests first time. fail created cassette tests/fixtures/api-error.yml looks something like can duplicate HTTP interaction, make first one return 503 status code. vcr first use first interaction, second one, making request. run test , pass! Note use vcr::skip_if_vcr_off(): vcr turned , real API request probably request won’t get 503 status code.","code":"vcr::use_cassette(\"api-error\", {   test_that(\"Errors are handled well\", {     vcr::skip_if_vcr_off()     expect_message(thing <- call_my_api()), \"retry message\")     expect_s4_class(thing, \"data.frame\")   }) }) http_interactions: - request:     method: get     uri: https://eu.httpbin.org/get     body:       encoding: ''       string: ''     headers:       User-Agent: libcurl/7.54.0 r-curl/3.2 crul/0.5.2   response:     status:       status_code: '200'       message: OK       explanation: Request fulfilled, document follows     headers:       status: HTTP/1.1 200 OK       connection: keep-alive     body:       encoding: UTF-8       string: \"{\\n  \\\"args\\\": {}, \\n  \\\"headers\\\": {\\n    \\\"Accept\\\": \\\"application/json,         text/xml, application/xml, */*\\\", \\n    \\\"Accept-Encoding\\\": \\\"gzip, deflate\\\",         \\n    \\\"Connection\\\": \\\"close\\\", \\n    \\\"Host\\\": \\\"httpbin.org\\\", \\n    \\\"User-Agent\\\":         \\\"libcurl/7.54.0 r-curl/3.2 crul/0.5.2\\\"\\n  }, \\n  \\\"origin\\\": \\\"111.222.333.444\\\",         \\n  \\\"url\\\": \\\"https://eu.httpbin.org/get\\\"\\n}\\n\"   recorded_at: 2018-04-03 22:55:02 GMT   recorded_with: vcr/0.1.0, webmockr/0.2.4, crul/0.5.2 http_interactions: - request:     method: get     uri: https://eu.httpbin.org/get     body:       encoding: ''       string: ''     headers:       User-Agent: libcurl/7.54.0 r-curl/3.2 crul/0.5.2   response:     status:       status_code: '503' - request:     method: get     uri: https://eu.httpbin.org/get     body:       encoding: ''       string: ''     headers:       User-Agent: libcurl/7.54.0 r-curl/3.2 crul/0.5.2   response:     status:       status_code: '200'       message: OK       explanation: Request fulfilled, document follows     headers:       status: HTTP/1.1 200 OK       connection: keep-alive     body:       encoding: UTF-8       string: \"{\\n  \\\"args\\\": {}, \\n  \\\"headers\\\": {\\n    \\\"Accept\\\": \\\"application/json,         text/xml, application/xml, */*\\\", \\n    \\\"Accept-Encoding\\\": \\\"gzip, deflate\\\",         \\n    \\\"Connection\\\": \\\"close\\\", \\n    \\\"Host\\\": \\\"httpbin.org\\\", \\n    \\\"User-Agent\\\":         \\\"libcurl/7.54.0 r-curl/3.2 crul/0.5.2\\\"\\n  }, \\n  \\\"origin\\\": \\\"111.222.333.444\\\",         \\n  \\\"url\\\": \\\"https://eu.httpbin.org/get\\\"\\n}\\n\"   recorded_at: 2018-04-03 22:55:02 GMT   recorded_with: vcr/0.1.0, webmockr/0.2.4, crul/0.5.2"},{"path":"https://docs.ropensci.org/vcr/articles/cassette-manual-editing.html","id":"the-same-thing-with-webmockr-1","dir":"Articles","previous_headings":"Example 2: test using an edited cassette with a 503 then a 200","what":"The same thing with webmockr","title":"Why and how to edit your vcr cassettes?","text":"advantage approach involving editing cassettes learn one thing, vcr. Now, using webmockr directly tests, can also test behavior package case errors. assume api_url() returns URL call_my_api() calls. pro approach elegance stubbing, two different responses. webmockr function like to_return() even argument times indicating number times given response returned. con top different vcr, case also needed good response end (one 200 code, actual body), writing mock much cumbersome just recording vcr cassette.","code":"test_that(\"Errors are handled well\", {   webmockr::enable()   stub <- webmockr::stub_request(\"get\", api_url())   stub %>%   to_return(status = 503)  %>%   to_return(status = 200, body = \"{\\n  \\\"args\\\": {}, \\n  \\\"headers\\\": {\\n    \\\"Accept\\\": \\\"application/json,         text/xml, application/xml, */*\\\", \\n    \\\"Accept-Encoding\\\": \\\"gzip, deflate\\\",         \\n    \\\"Connection\\\": \\\"close\\\", \\n    \\\"Host\\\": \\\"httpbin.org\\\", \\n    \\\"User-Agent\\\":         \\\"libcurl/7.54.0 r-curl/3.2 crul/0.5.2\\\"\\n  }, \\n  \\\"origin\\\": \\\"111.222.333.444\\\",         \\n  \\\"url\\\": \\\"https://eu.httpbin.org/get\\\"\\n}\\n\", headers = list(b = 6))   expect_message(thing <- call_my_api()), \"retry message\")     expect_s4_class(thing, \"data.frame\")   webmockr::disable()  })"},{"path":"https://docs.ropensci.org/vcr/articles/cassette-manual-editing.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Why and how to edit your vcr cassettes?","text":"vignette saw edit vcr cassettes. also presented approaches use webmockr instead vcr mocking API responses. mentioned editing cassettes hand also write script using yaml jsonlite package edit YAML/JSON cassettes programmatically.","code":""},{"path":"https://docs.ropensci.org/vcr/articles/configuration.html","id":"vcr-configuration","dir":"Articles","previous_headings":"","what":"vcr configuration","title":"Configure vcr","text":"vcr configuration can also get default configuration variables via vcr_config_defaults() defaults set load vcr - can override described .","code":"library(\"vcr\") library(\"vcr\") vcr_config_defaults() #> $warn_on_empty_cassette #> [1] TRUE #>  #> $quiet #> [1] TRUE #>  #> $verbose_errors #> [1] FALSE #>  #> $write_disk_path #> NULL #>  #> $filter_query_parameters #> NULL #>  #> $filter_response_headers #> NULL #>  #> $filter_request_headers #> NULL #>  #> $filter_sensitive_data_regex #> NULL #>  #> $filter_sensitive_data #> NULL #>  #> $log_opts #> $log_opts$file #> [1] \"vcr.log\" #>  #> $log_opts$log_prefix #> [1] \"Cassette\" #>  #> $log_opts$date #> [1] TRUE #>  #>  #> $log #> [1] FALSE #>  #> $linked_context #> NULL #>  #> $cassettes #> list() #>  #> $allow_http_connections_when_no_cassette #> [1] FALSE #>  #> $clean_outdated_http_interactions #> [1] FALSE #>  #> $re_record_interval #> NULL #>  #> $turned_off #> [1] FALSE #>  #> $preserve_exact_body_bytes #> [1] FALSE #>  #> $uri_parser #> [1] \"crul::url_parse\" #>  #> $ignore_request #> NULL #>  #> $ignore_localhost #> [1] FALSE #>  #> $ignore_hosts #> NULL #>  #> $persist_with #> [1] \"FileSystem\" #>  #> $json_pretty #> [1] FALSE #>  #> $serialize_with #> [1] \"yaml\" #>  #> $allow_unused_http_interactions #> [1] TRUE #>  #> $match_requests_on #> [1] \"method\" \"uri\"    #>  #> $record #> [1] \"once\" #>  #> $dir #> [1] \".\""},{"path":"https://docs.ropensci.org/vcr/articles/configuration.html","id":"set-configuration-variables","dir":"Articles","previous_headings":"vcr configuration","what":"Set configuration variables","title":"Configure vcr","text":"Use vcr_configure() set configuration variables. example, set single variable: many :","code":"vcr_configure(   dir = \"foobar/vcr_cassettes\" ) #> <vcr configuration> #>   Cassette Dir: foobar/vcr_cassettes #>   Record: once #>   Serialize with: yaml #>   URI Parser: crul::url_parse #>   Match Requests on: method, uri #>   Preserve Bytes?: FALSE #>   Logging?: FALSE #>   ignored hosts:  #>   ignore localhost?: FALSE #>   Write disk path: vcr_configure(   dir = \"foobar/vcr_cassettes\",   record = \"all\" ) #> <vcr configuration> #>   Cassette Dir: foobar/vcr_cassettes #>   Record: all #>   Serialize with: yaml #>   URI Parser: crul::url_parse #>   Match Requests on: method, uri #>   Preserve Bytes?: FALSE #>   Logging?: FALSE #>   ignored hosts:  #>   ignore localhost?: FALSE #>   Write disk path:"},{"path":"https://docs.ropensci.org/vcr/articles/configuration.html","id":"re-set-to-defaults","dir":"Articles","previous_headings":"vcr configuration","what":"Re-set to defaults","title":"Configure vcr","text":"","code":"vcr_configure_reset()"},{"path":[]},{"path":"https://docs.ropensci.org/vcr/articles/configuration.html","id":"dir","dir":"Articles","previous_headings":"vcr configuration > Details on some of the config options","what":"dir","title":"Configure vcr","text":"Directory cassettes stored","code":"vcr_configure(dir = \"new/path\") #> <vcr configuration> #>   Cassette Dir: new/path #>   Record: once #>   Serialize with: yaml #>   URI Parser: crul::url_parse #>   Match Requests on: method, uri #>   Preserve Bytes?: FALSE #>   Logging?: FALSE #>   ignored hosts:  #>   ignore localhost?: FALSE #>   Write disk path:"},{"path":"https://docs.ropensci.org/vcr/articles/configuration.html","id":"record","dir":"Articles","previous_headings":"vcr configuration > Details on some of the config options","what":"record","title":"Configure vcr","text":"record mode One : ‘’, ‘none’, ‘new_episodes’, ‘’. See ?recording info options","code":"vcr_configure(record = \"new_episodes\") #> <vcr configuration> #>   Cassette Dir: new/path #>   Record: new_episodes #>   Serialize with: yaml #>   URI Parser: crul::url_parse #>   Match Requests on: method, uri #>   Preserve Bytes?: FALSE #>   Logging?: FALSE #>   ignored hosts:  #>   ignore localhost?: FALSE #>   Write disk path:"},{"path":"https://docs.ropensci.org/vcr/articles/configuration.html","id":"match_requests_on","dir":"Articles","previous_headings":"vcr configuration > Details on some of the config options","what":"match_requests_on","title":"Configure vcr","text":"Customize vcr matches requests","code":"vcr_configure(match_requests_on = c('query', 'headers')) #> <vcr configuration> #>   Cassette Dir: new/path #>   Record: new_episodes #>   Serialize with: yaml #>   URI Parser: crul::url_parse #>   Match Requests on: query, headers #>   Preserve Bytes?: FALSE #>   Logging?: FALSE #>   ignored hosts:  #>   ignore localhost?: FALSE #>   Write disk path:"},{"path":"https://docs.ropensci.org/vcr/articles/configuration.html","id":"allow_unused_http_interactions","dir":"Articles","previous_headings":"vcr configuration > Details on some of the config options","what":"allow_unused_http_interactions","title":"Configure vcr","text":"Allow HTTP connections cassette Default TRUE, thus error http interactions unused. can set FALSE case vcr errors cassette ejected http interactions used.","code":"vcr_configure(allow_unused_http_interactions = FALSE) #> <vcr configuration> #>   Cassette Dir: new/path #>   Record: new_episodes #>   Serialize with: yaml #>   URI Parser: crul::url_parse #>   Match Requests on: query, headers #>   Preserve Bytes?: FALSE #>   Logging?: FALSE #>   ignored hosts:  #>   ignore localhost?: FALSE #>   Write disk path:"},{"path":"https://docs.ropensci.org/vcr/articles/configuration.html","id":"serialize_with","dir":"Articles","previous_headings":"vcr configuration > Details on some of the config options","what":"serialize_with","title":"Configure vcr","text":"serializer use: “yaml” “json”. Note can multiple cassettes name long use different serializers; want one cassette given cassette name, make sure switch serializers, clean files longer need.","code":"vcr_configure(serialize_with = \"yaml\") #> <vcr configuration> #>   Cassette Dir: new/path #>   Record: new_episodes #>   Serialize with: yaml #>   URI Parser: crul::url_parse #>   Match Requests on: query, headers #>   Preserve Bytes?: FALSE #>   Logging?: FALSE #>   ignored hosts:  #>   ignore localhost?: FALSE #>   Write disk path:"},{"path":"https://docs.ropensci.org/vcr/articles/configuration.html","id":"persist_with","dir":"Articles","previous_headings":"vcr configuration > Details on some of the config options","what":"persist_with","title":"Configure vcr","text":"persister use. Right now option “FileSystem”","code":"vcr_configure(persist_with = \"FileSystem\") #> <vcr configuration> #>   Cassette Dir: new/path #>   Record: new_episodes #>   Serialize with: yaml #>   URI Parser: crul::url_parse #>   Match Requests on: query, headers #>   Preserve Bytes?: FALSE #>   Logging?: FALSE #>   ignored hosts:  #>   ignore localhost?: FALSE #>   Write disk path:"},{"path":"https://docs.ropensci.org/vcr/articles/configuration.html","id":"ignoring-some-requests","dir":"Articles","previous_headings":"vcr configuration > Details on some of the config options","what":"ignoring some requests","title":"Configure vcr","text":"ignore_hosts Specify particular hosts ignore. ignore, mean real HTTP requests ignored host allowed occur, others . ignore_localhost Ignore localhost requests ignore_request DOESN’T WORK YET ignore requests ignoring requests, can example, real http requests go (ignored vcr) requests handled vcr. example, let’s say want requests google.com ignored: request httpbin.org handled vcr, cassette created request/response url, google.com request ignored cached . Note: ignoring requests works crul package now; work httr later vcr version.","code":"vcr_configure(ignore_hosts = \"google.com\") #> <vcr configuration> #>   Cassette Dir: new/path #>   Record: new_episodes #>   Serialize with: yaml #>   URI Parser: crul::url_parse #>   Match Requests on: query, headers #>   Preserve Bytes?: FALSE #>   Logging?: FALSE #>   ignored hosts: google.com #>   ignore localhost?: FALSE #>   Write disk path: vcr_configure(ignore_localhost = TRUE) #> <vcr configuration> #>   Cassette Dir: new/path #>   Record: new_episodes #>   Serialize with: yaml #>   URI Parser: crul::url_parse #>   Match Requests on: query, headers #>   Preserve Bytes?: FALSE #>   Logging?: FALSE #>   ignored hosts: google.com #>   ignore localhost?: TRUE #>   Write disk path: vcr_configure(ignore_hosts = \"google.com\") use_cassette(\"foo_bar\", {   crul::HttpClient$new(\"https://httpbin.org/get\")$get()   crul::HttpClient$new(\"https://google.com\")$get() })"},{"path":"https://docs.ropensci.org/vcr/articles/configuration.html","id":"uri_parse","dir":"Articles","previous_headings":"vcr configuration > Details on some of the config options","what":"uri_parse","title":"Configure vcr","text":"uri parser use default use crul::url_parse, can use different one. Remember pass function quoted, namespaced.","code":"vcr_configure(uri_parser = \"urltools::url_parse\") #> <vcr configuration> #>   Cassette Dir: new/path #>   Record: new_episodes #>   Serialize with: yaml #>   URI Parser: urltools::url_parse #>   Match Requests on: query, headers #>   Preserve Bytes?: FALSE #>   Logging?: FALSE #>   ignored hosts: google.com #>   ignore localhost?: TRUE #>   Write disk path:"},{"path":"https://docs.ropensci.org/vcr/articles/configuration.html","id":"preserve_exact_body_bytes","dir":"Articles","previous_headings":"vcr configuration > Details on some of the config options","what":"preserve_exact_body_bytes","title":"Configure vcr","text":"HTTP servers well-behaved respond invalid data. Set preserve_exact_body_bytes TRUE base64 encode result body order preserve bytes exactly -. vcr default, since base64-encoding string removes human readability cassette.","code":"vcr_configure(preserve_exact_body_bytes = TRUE) #> <vcr configuration> #>   Cassette Dir: new/path #>   Record: new_episodes #>   Serialize with: yaml #>   URI Parser: urltools::url_parse #>   Match Requests on: query, headers #>   Preserve Bytes?: TRUE #>   Logging?: FALSE #>   ignored hosts: google.com #>   ignore localhost?: TRUE #>   Write disk path:"},{"path":"https://docs.ropensci.org/vcr/articles/configuration.html","id":"filter_sensitive_data","dir":"Articles","previous_headings":"vcr configuration > Details on some of the config options","what":"filter_sensitive_data","title":"Configure vcr","text":"named list values replace. Sometimes package script working sensitive tokens/keys, want accidentally share world. recording (writing cassette) replacement reading cassette reverse replacement get back real data. recording disk, env var MY_API_KEY retrieved machine, find instances , replace <some_api_key>. replaying create HTTP response object put real value env var back place. target specific request response headers see filter_request_headers filter_response_headers.","code":"vcr_configure(   filter_sensitive_data = list(\"<some_api_key>\" = Sys.getenv('MY_API_KEY')) )"},{"path":"https://docs.ropensci.org/vcr/articles/configuration.html","id":"filter_request_headers","dir":"Articles","previous_headings":"vcr configuration > Details on some of the config options","what":"filter_request_headers","title":"Configure vcr","text":"Expects character vector named list. character vector, unnamed element list, request header removed written cassette. named list passed, name header value value replace real value. request header set remove replace removed/replaced cassette, requests using cassette, still crul httr response objects real request creates cassette. Examples:","code":"vcr_configure(   filter_request_headers = \"Authorization\" ) vcr_configure(   filter_request_headers = c(\"Authorization\", \"User-Agent\") ) vcr_configure(   filter_request_headers = list(Authorization = \"<<<not-my-bearer-token>>>\") )"},{"path":"https://docs.ropensci.org/vcr/articles/configuration.html","id":"filter_response_headers","dir":"Articles","previous_headings":"vcr configuration > Details on some of the config options","what":"filter_response_headers","title":"Configure vcr","text":"Expects character vector named list. character vector, unnamed element list, response header removed written cassette. named list passed, name header value value replace real value. response header set remove replace removed/replaced cassette, requests using cassette, still crul httr response objects real request creates cassette. Examples:","code":"vcr_configure(   filter_response_headers = \"server\" ) vcr_configure(   filter_response_headers = c(\"server\", \"date\") ) vcr_configure(   filter_response_headers = list(server = \"fake-server\") )"},{"path":"https://docs.ropensci.org/vcr/articles/configuration.html","id":"filter_query_parameters","dir":"Articles","previous_headings":"vcr configuration > Details on some of the config options","what":"filter_query_parameters","title":"Configure vcr","text":"Expects character vector named list. character vector, unnamed element list, query parameter removed (parameter name value) written cassette. named list passed, name query parameter name value value replace real value. response header set remove replace removed/replaced cassette, requests using cassette, still crul httr response objects real request creates cassette. Beware match_requests_on option using filter. filter query parameter ’s probably bad idea match query given way vcr restore exact http request cassette one query parameters removed changed. One way filter query parameter still match query least complete uri use replacement behavior (named list), instead list(=\"b\") use two values list(=c(\"b\",\"c\")), “c” string stored cassette. course replace values values environment variables obscure real values code public. Examples:","code":"# completely drop parameter \"user\" vcr_configure(   filter_query_parameters = \"user\" ) # completely drop parameters \"user\" and \"api_key\" vcr_configure(   filter_query_parameters = c(\"user\", \"api_key\") ) # replace the value of parameter \"api_key\" with \"fake-api-key\" # NOTE: in this case there's no way to put back any value on # subsequent requests, so we have to match by dropping this # parameter value before comparing URIs vcr_configure(   filter_query_parameters = list(api_key = \"fake-api-key\") ) # replace the value found at Sys.getenv(\"MY_API_KEY\") of parameter # \"api_key\" with the value \"foo\". When using a cassette on subsequent # requests, we can replace \"foo\" with the value at Sys.getenv(\"MY_API_KEY\") # before doing the URI comparison vcr_configure(   filter_query_parameters = list(api_key = c(Sys.getenv(\"MY_API_KEY\"), \"foo\")) )"},{"path":"https://docs.ropensci.org/vcr/articles/configuration.html","id":"more-documentation","dir":"Articles","previous_headings":"vcr configuration","what":"More documentation","title":"Configure vcr","text":"Check http testing book lot documentation vcr, webmockr, crul","code":""},{"path":"https://docs.ropensci.org/vcr/articles/debugging.html","id":"an-http-request-has-been-made-that-vcr-does-not-know-how-to-handle","dir":"Articles","previous_headings":"","what":"An HTTP request has been made that vcr does not know how to handle","title":"Debugging your tests that use vcr","text":"get error starting “HTTP request made vcr know handle:” running tests, means code test makes HTTP request matching information cassette using. might added request, changed one slightly. easy fix : delete cassette re-run test re-record cassette. Run test second time ensure well. , escalate next paragraph. Maybe didn’t actually want change request making. Make sure requests contain something random, something related e.g. time now, URI (http://foo.com?time=13). make sure things varying, might want use mocking (e.g. function returning current time), setting random seed, using withr (e.g. setting option certain value test).","code":""},{"path":"https://docs.ropensci.org/vcr/articles/debugging.html","id":"actual-debugging","dir":"Articles","previous_headings":"An HTTP request has been made that vcr does not know how to handle","what":"Actual debugging","title":"Debugging your tests that use vcr","text":"Ideally want run code tests run inside tests, particular, using vcr cassette.","code":""},{"path":"https://docs.ropensci.org/vcr/articles/debugging.html","id":"prepare-your-debugging-environment","dir":"Articles","previous_headings":"An HTTP request has been made that vcr does not know how to handle","what":"Prepare your debugging environment","title":"Debugging your tests that use vcr","text":"first need load either vcr helper tests/testthat/helper-vcr.R (e.g. via devtools::load_all()) source vcr setup file tests/testthat/setup-vcr.R .e. file lines (maybe others) instead vcr::vcr_test_path(\"fixtures\") see \"../fixtures\", replace \"../fixtures\" vcr::vcr_test_path(\"fixtures\"), vcr::vcr_test_path() function meant help exactly want: path tests/fixtures/ work tests root (running code debug ). one step (loading vcr helper sourcing vcr setup file), maybe two (also replace \"../fixtures\" vcr::vcr_test_path(\"fixtures\")).","code":"library(\"vcr\") invisible(vcr::vcr_configure(   dir = vcr::vcr_test_path(\"fixtures\"),   filter_sensitive_data = list(\"<<github_api_token>>\" = Sys.getenv('GITHUB_PAT')) )) vcr::check_cassette_names()"},{"path":"https://docs.ropensci.org/vcr/articles/debugging.html","id":"debugging-itself","dir":"Articles","previous_headings":"An HTTP request has been made that vcr does not know how to handle","what":"Debugging itself","title":"Debugging your tests that use vcr","text":"Now look test whose code trying debug e.g. want run code test,","code":"foo <- function() crul::ok('https://httpbin.org/get')  test_that(\"foo works\", {   vcr::use_cassette(\"testing\", {     x <- foo()   })   expect_true(x) }) foo <- function() crul::ok('https://httpbin.org/get') vcr::insert_cassette(\"testing\") # it will be created if needed x <- foo() x # further interactive debugging and fixes vcr::eject_cassette(\"testing\")"},{"path":"https://docs.ropensci.org/vcr/articles/debugging.html","id":"logging","dir":"Articles","previous_headings":"An HTTP request has been made that vcr does not know how to handle","what":"Logging","title":"Debugging your tests that use vcr","text":"can use vcr’s built logging help debugging process. configure logging, use vcr_configure() function, set log=TRUE set options logging log_opts parameter named list. See ?vcr_configure details. , setting log file temporary file cleaned end R session. , file extension .log, file extension matter. log=TRUE can continue debugging. Open log file set text editor location; examine shell/terminal. example, running block open log file ’ll see logs step vcr takes handling HTTP request. logs information cassette used, exact time recorded, matchers use, cassette options, request handled. Logging isn’t meant turned time - rather debugging/informational purposes.","code":"vcr::vcr_configure(   dir = vcr::vcr_test_path(\"fixtures\"),   log = TRUE,   log_opts = list(file = file.path(tempdir(), \"vcr.log\")) ) foo <- function() crul::ok('https://httpbin.org/get')  test_that(\"foo works\", {   vcr::use_cassette(\"testing\", {     x <- foo()   })   expect_true(x) }) [Cassette: 'testing'] - 2020-11-24 16:05:17 - Init. HTTPInteractionList w/ request matchers [method, uri] & 0 interaction(s): {  } [Cassette: 'testing'] - 2020-11-24 16:05:17 - Initialized with options: {name: testing, record: once, serialize_with: yaml, persist_with: FileSystem, match_requests_on: c(\"method\", \"uri\"), update_content_length_header: FALSE, allow_playback_repeats: FALSE, preserve_exact_body_bytes: FALSE} [Cassette: 'testing'] - 2020-11-24 16:05:17 - Handling request: head https://httpbin.org/get (disabled: FALSE) [Cassette: 'testing'] - 2020-11-24 16:05:17 - Identified request type: (recordable) for head https://httpbin.org/get [Cassette: 'testing'] - 2020-11-24 16:05:17 -    Recorded HTTP interaction: head https://httpbin.org/get => 200"},{"path":"https://docs.ropensci.org/vcr/articles/debugging.html","id":"return-to-normal-development","dir":"Articles","previous_headings":"An HTTP request has been made that vcr does not know how to handle","what":"Return to normal development","title":"Debugging your tests that use vcr","text":"Make sure ejected cassette using! Unless vcr helper/setup file tweaked things like, even need re-start R, , just safe side.","code":""},{"path":"https://docs.ropensci.org/vcr/articles/design.html","id":"where-vcr-comes-from-and-why-r6","dir":"Articles","previous_headings":"","what":"Where vcr comes from and why R6","title":"Design of vcr","text":"vcr “ported” Ruby gem (aka, library) name1. ported Ruby, object-oriented programming language thought easier use object system R closely resemble used Ruby (least opinion). thinking lead choosing R6. exported functions users interact R6 classes, rather normal R functions. However, internal code package uses R6. Thus, familiarity R6 important people may want contribute vcr, required vcr users.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/vcr/articles/design.html","id":"an-easy-to-use-interface-hides-complexity","dir":"Articles","previous_headings":"Principles","what":"An easy to use interface hides complexity","title":"Design of vcr","text":"described , vcr uses R6 internally, users interact normal R functions. Internal functions quite complicated largely R6 exported, simpler functions users interact normal R functions.","code":""},{"path":"https://docs.ropensci.org/vcr/articles/design.html","id":"classfunction-names-are-inherited-from-ruby-vcr","dir":"Articles","previous_headings":"Principles","what":"Class/function names are inherited from Ruby vcr","title":"Design of vcr","text":"Since R vcr ported Ruby, kept names functions/classes variables. ’re wondering function, class, variable particular name, derivation can found package, part .","code":""},{"path":"https://docs.ropensci.org/vcr/articles/design.html","id":"hooks-into-http-clients","dir":"Articles","previous_headings":"Principles","what":"Hooks into HTTP clients","title":"Design of vcr","text":"Perhaps fundamental thing package work knows HTTP requests made. stumped quite long time. looking Ruby vcr, first thought must “listening” HTTP requests somehow. found monkey patching; ’s ’s achieved Ruby. , Ruby vcr package literally overrides certain methods Ruby HTTP clients, hijacking internals HTTP clients. However, monkey patching allowed R. Thus, R somehow “hooks” HTTP clients R. Fortunately, Scott maintainer one HTTP clients, crul, able quickly create hook. fortunately, already hook mechanism httr package. actual hooks vcr, webmockr. vcr depends webmockr hooking HTTP clients httr crul.","code":""},{"path":"https://docs.ropensci.org/vcr/articles/design.html","id":"internal-classes","dir":"Articles","previous_headings":"","what":"Internal classes","title":"Design of vcr","text":"overview important aspects vcr.","code":""},{"path":"https://docs.ropensci.org/vcr/articles/design.html","id":"configuration","dir":"Articles","previous_headings":"Internal classes","what":"Configuration","title":"Design of vcr","text":"internal object (vcr_c) created vcr loaded default vcr configuration options inside R6 class VCRConfig - see https://github.com/ropensci/vcr/blob/main/R/onLoad.R. class keeps track default user specified configuration options. can access vcr_c using triple namespace :::, though intended general use. Whenever make calls vcr_configure() configuration functions, vcr_c affected.","code":""},{"path":"https://docs.ropensci.org/vcr/articles/design.html","id":"cassette-class","dir":"Articles","previous_headings":"Internal classes","what":"Cassette class","title":"Design of vcr","text":"Cassette R6 class handles internals/state cassette. time run use_cassette() class used. class quite methods , ’s lot going class. Ideally class separated subclasses handle similar sets logic, ’s easy way R6. note Cassette called, within initialize() call webmockr used create webmockr stubs.","code":""},{"path":"https://docs.ropensci.org/vcr/articles/design.html","id":"how-http-requests-are-handled","dir":"Articles","previous_headings":"Internal classes","what":"How HTTP requests are handled","title":"Design of vcr","text":"Within webmockr, calls vcr class RequestHandler, child classes RequestHandlerCrul RequestHandlerHttr crul httr, respectively. classes determine HTTP request. options HTTP request include: Ignored can ignore HTTP requests certain rules using configuration options ignore_hosts ignore_localhost Stubbed vcr HTTP request match found cassette defined use_cassette()/insert_cassette() call. case matching request/response cassette returned real HTTP request allowed. Recordable HTTP request match found cassette defined use_cassette()/insert_cassette() call. case real HTTP request allowed, request/response recorded cassette. Unhandled group cases, cause error thrown message trying help user figure fix problem. use vcr logging ’ll see categories logs.","code":""},{"path":"https://docs.ropensci.org/vcr/articles/design.html","id":"serializers","dir":"Articles","previous_headings":"Internal classes","what":"Serializers","title":"Design of vcr","text":"Serializers handle format cassettes written files disk. current options YAML (default) JSON. YAML implemented first vcr ’s default option Ruby vcr. R6 class Serializer parent class serializer types; YAML JSON R6 classes inherit Serializer. YAML JSON define just two methods: serialize() deserialize() converting R structures yaml json, converting yaml json back R structures, respectively.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/vcr/articles/design.html","id":"logging","dir":"Articles","previous_headings":"Environments","what":"Logging","title":"Design of vcr","text":"internal environment (vcr_log_env) used use logging. point keeps track one variable - file - able refer file used logging across many classes/functions need write log file.","code":""},{"path":"https://docs.ropensci.org/vcr/articles/design.html","id":"a-bit-of-housekeeping","dir":"Articles","previous_headings":"Environments","what":"A bit of housekeeping","title":"Design of vcr","text":"Another internal environment (vcr__env) used keep track items, including current cassette use, last vcr error.","code":""},{"path":"https://docs.ropensci.org/vcr/articles/design.html","id":"lightswitch","dir":"Articles","previous_headings":"Environments","what":"Lightswitch","title":"Design of vcr","text":"Another internal environment (light_switch) used keep track users turning vcr. See ?lightswitch.","code":""},{"path":"https://docs.ropensci.org/vcr/articles/lightswitch.html","id":"turned-off","dir":"Articles","previous_headings":"","what":"turned_off","title":"Turning vcr on and off","text":"turned_off() lets temporarily make real HTTP request without completely turning vcr , unloading , etc. happens internally turn vcr, run code block, exit turn vcr back - vcr turned duration code block. Even code block errors, vcr turned back due use .exit(turn_on())","code":"library(vcr) library(crul) turned_off({   con <- HttpClient$new(url = \"https://httpbin.org/get\")   con$get() }) #> <crul response> #>   url: https://httpbin.org/get #>   request_headers: #>     User-Agent: libcurl/7.54.0 r-curl/4.3 crul/0.9.0 #>     Accept-Encoding: gzip, deflate #>     Accept: application/json, text/xml, application/xml, */* #>   response_headers: #>     status: HTTP/1.1 200 OK #>     date: Fri, 14 Feb 2020 19:44:46 GMT #>     content-type: application/json #>     content-length: 365 #>     connection: keep-alive #>     server: gunicorn/19.9.0 #>     access-control-allow-origin: * #>     access-control-allow-credentials: true #>   status: 200"},{"path":"https://docs.ropensci.org/vcr/articles/lightswitch.html","id":"turn-off-on","dir":"Articles","previous_headings":"","what":"turn_off/turn_on","title":"Turning vcr on and off","text":"turn_off() different turned_off() turn_off() aimed single call block, rather turns vcr entire package. turn_off() check first turning vcr currently cassette use. turn_off() meant make R ignore vcr::insert_cassette() vcr::use_cassette() blocks test suite - letting code block run wrapped vcr code - run tests cached requests/responses real HTTP requests toggle single R function environment variable.","code":"library(vcr) vcr_configure(dir = tempdir()) # real HTTP request works - vcr is not engaged here crul::HttpClient$new(url = \"https://eu.httpbin.org/get\")$get() # wrap HTTP request in use_cassette() - vcr is engaged here use_cassette(\"foo_bar\", {   crul::HttpClient$new(url = \"https://eu.httpbin.org/get\")$get() }) # turn off & ignore cassettes - use_cassette is ignored, real HTTP request made turn_off(ignore_cassettes = TRUE) use_cassette(\"foo_bar\", {   crul::HttpClient$new(url = \"https://eu.httpbin.org/get\")$get() }) # if you turn off and don't ignore cassettes, error thrown turn_off(ignore_cassettes = FALSE) use_cassette(\"foo_bar\", {   res2=crul::HttpClient$new(url = \"https://eu.httpbin.org/get\")$get() }) # vcr back on - now use_cassette behaves as before turn_on() use_cassette(\"foo_bar3\", {   res2=crul::HttpClient$new(url = \"https://eu.httpbin.org/get\")$get() })"},{"path":"https://docs.ropensci.org/vcr/articles/lightswitch.html","id":"turned-on","dir":"Articles","previous_headings":"","what":"turned_on","title":"Turning vcr on and off","text":"turned_on() says tin - tells vcr turned .","code":"library(vcr) turn_on() turned_on() #> [1] TRUE turn_off() #> vcr turned off; see ?turn_on to turn vcr back on turned_on() #> [1] FALSE"},{"path":"https://docs.ropensci.org/vcr/articles/lightswitch.html","id":"lightswitch-env-vars","dir":"Articles","previous_headings":"","what":"Environment variables","title":"Turning vcr on and off","text":"VCR_TURN_OFF environment variable can used within R command line turn vcr. example, can run tests package uses vcr, ignore use_cassette/insert_cassette usage, running command line root package: , similarly within R: VCR_TURNED_OFF VCR_IGNORE_CASSETTES environment variables can used combination achieve thing VCR_TURN_OFF:","code":"VCR_TURN_OFF=true Rscript -e \"devtools::test()\" Sys.setenv(VCR_TURN_OFF = TRUE) devtools::test() VCR_TURNED_OFF=true VCR_IGNORE_CASSETTES=true Rscript -e \"devtools::test()\""},{"path":"https://docs.ropensci.org/vcr/articles/record-modes.html","id":"request-matching","dir":"Articles","previous_headings":"","what":"Request matching","title":"Record modes","text":"Record modes dictate circumstances http requests/responses recorded cassettes (disk). Set recording mode parameter record use_cassette() insert_cassette() functions.","code":""},{"path":"https://docs.ropensci.org/vcr/articles/record-modes.html","id":"once","dir":"Articles","previous_headings":"Request matching","what":"once","title":"Record modes","text":"record mode : Replay previously recorded interactions. Record new interactions cassette file. Cause error raised new requests cassette file. similar new_episodes record mode, prevent new, unexpected requests made (.e. request URI changed whatever). default record mode, used set one.","code":""},{"path":"https://docs.ropensci.org/vcr/articles/record-modes.html","id":"none","dir":"Articles","previous_headings":"Request matching","what":"none","title":"Record modes","text":"none record mode : Replay previously recorded interactions. Cause error raised new requests. useful code makes potentially dangerous HTTP requests. none record mode guarantees new HTTP requests made.","code":""},{"path":"https://docs.ropensci.org/vcr/articles/record-modes.html","id":"new_episodes","dir":"Articles","previous_headings":"Request matching","what":"new_episodes","title":"Record modes","text":"new_episodes record mode : Record new interactions. Replay previously recorded interactions. similar record mode, always record new interactions, even existing recorded one similar (identical, based match_request_on option).","code":""},{"path":"https://docs.ropensci.org/vcr/articles/record-modes.html","id":"all","dir":"Articles","previous_headings":"Request matching","what":"all","title":"Record modes","text":"record mode : Record new interactions. Never replay previously recorded interactions. can temporarily used force vcr re-record cassette (.e. ensure responses date) can used simply want log HTTP requests.","code":""},{"path":"https://docs.ropensci.org/vcr/articles/record-modes.html","id":"more-documentation","dir":"Articles","previous_headings":"Request matching","what":"More documentation","title":"Record modes","text":"Check http testing book lot documentation vcr, webmockr, crul","code":""},{"path":"https://docs.ropensci.org/vcr/articles/request_matching.html","id":"request-matching","dir":"Articles","previous_headings":"","what":"Request matching","title":"Configure vcr request matching","text":"match previously recorded requests, vcr try match new HTTP requests previously recorded one. default, match HTTP method (e.g., GET) URI (e.g., http://foo.com), following Ruby’s VCR gem. can customize match requests one following options, default, can used together, alone. method: Use method request matcher match requests HTTP method (.e. GET, POST, PUT, DELETE, etc). generally want use matcher. method matcher used (along uri matcher) default specify requests match. uri: Use uri request matcher match requests request URI. uri matcher used (along method matcher) default specify requests match. host: Use host request matcher match requests request host. can use (alone, combination path) alternative uri non-deterministic portions URI considered part request matching. path: Use path request matcher match requests path portion request URI. can use (alone, combination host) alternative uri non-deterministic portions URI query: Use query request matcher match requests query string portion request URI. can use (alone, combination others) alternative uri non-deterministic portions URI considered part request matching. body: Use body request matcher match requests request body. headers: Use headers request matcher match requests request headers. can set options tweaking match_requests_on parameter use_cassette():","code":"library(vcr) use_cassette(name = \"foo_bar\", {     cli$post(\"post\", body = list(a = 5))   },    match_requests_on = c('method', 'headers', 'body') )"},{"path":[]},{"path":"https://docs.ropensci.org/vcr/articles/request_matching.html","id":"headers","dir":"Articles","previous_headings":"Request matching > Matching","what":"headers","title":"Configure vcr request matching","text":"","code":"library(crul) library(vcr) cli <- crul::HttpClient$new(\"https://httpbin.org/get\",    headers = list(foo = \"bar\")) use_cassette(name = \"nothing_new\", {     one <- cli$get()   },    match_requests_on = 'headers' ) cli$headers$foo <- \"stuff\" use_cassette(name = \"nothing_new\", {     two <- cli$get()   },    match_requests_on = 'headers' ) one$request_headers two$request_headers"},{"path":"https://docs.ropensci.org/vcr/articles/request_matching.html","id":"more-documentation","dir":"Articles","previous_headings":"Request matching","what":"More documentation","title":"Configure vcr request matching","text":"Check http testing book lot documentation vcr, webmockr, crul","code":""},{"path":"https://docs.ropensci.org/vcr/articles/vcr.html","id":"vcr-introduction","dir":"Articles","previous_headings":"","what":"vcr introduction","title":"Introduction to vcr","text":"vcr R port Ruby gem VCR (.e., translation, ’s Ruby :)) vcr helps stub record HTTP requests don’t repeat HTTP requests. main use case unit tests, can use outside unit test use case. vcr works crul httr HTTP request packages. Check HTTP testing book lot documentation vcr, webmockr, crul, packages.","code":""},{"path":"https://docs.ropensci.org/vcr/articles/vcr.html","id":"elevator-pitch","dir":"Articles","previous_headings":"vcr introduction","what":"Elevator pitch","title":"Introduction to vcr","text":"Setup vcr package vcr::use_vcr() Tweak configuration protect secrets Sprinkle tests vcr::use_cassette() save HTTP interactions disk “cassettes” files want test package behavior API returns e.g. 404 503 code, edit cassettes, use webmockr Now tests can work without internet connection! Demo adding vcr testing R package, corresponding narrative.","code":""},{"path":"https://docs.ropensci.org/vcr/articles/vcr.html","id":"installation","dir":"Articles","previous_headings":"vcr introduction","what":"Installation","title":"Introduction to vcr","text":"CRAN Development version","code":"install.packages(\"vcr\") remotes::install_github(\"ropensci/vcr\") library(\"vcr\")"},{"path":"https://docs.ropensci.org/vcr/articles/vcr.html","id":"getting-started","dir":"Articles","previous_headings":"vcr introduction","what":"Getting Started","title":"Introduction to vcr","text":"docs assume using testthat unit tests.","code":""},{"path":"https://docs.ropensci.org/vcr/articles/vcr.html","id":"use_vcr","dir":"Articles","previous_headings":"vcr introduction > Getting Started","what":"use_vcr","title":"Introduction to vcr","text":"can set package use vcr : : put vcr DESCRIPTION check testthat setup setup testthat set recorded cassettes saved sourced tests/fixtures setup config file vcr add example test file vcr make .gitattributes file settings vcr make ./tests/testthat/helper-vcr.R file see R console:","code":"vcr::use_vcr() ◉ Using package: vcr.example   ◉ assuming fixtures at: tests/fixtures   ✓ Adding vcr to Suggests field in DESCRIPTION   ✓ Creating directory: ./tests/testthat   ◉ Looking for testthat.R file or similar   ✓ tests/testthat.R: added   ✓ Adding vcr config to tests/testthat/helper-vcr.example.R   ✓ Adding example test file tests/testthat/test-vcr_example.R   ✓ .gitattributes: added   ◉ Learn more about `vcr`: https://books.ropensci.org/http-testing/"},{"path":"https://docs.ropensci.org/vcr/articles/vcr.html","id":"protecting-secrets","dir":"Articles","previous_headings":"vcr introduction > Getting Started","what":"Protecting secrets","title":"Introduction to vcr","text":"Secrets often turn API work. common example API key. vcr saves responses APIs YAML files, include secrets unless indicate vcr protect . vcr_configure function filter_sensitive_data argument function just situation. filter_sensitive_data argument takes named list name list string used recorded cassettes instead secret, list item. vcr manage replacement , need edit helper-vcr.R file like : Use filter_sensitive_data argument vcr_configure function show vcr keep secret. best way store secret information .Renviron file. Assuming already place, supply named list filter_sensitive_data argument. Notice wrote Sys.getenv('APIKEY') API key directly, otherwise ’d written API key file might end public repo. get secret information environment, make sure whenever vcr records new cassette, replace secret information <<<my_api_key>>>. can find HTTP testing book chapter security. addition line instruct vcr replace string cassettes records equivalent string stored APIKEY environmental variable masking string <<<my_api_key>>>. practice, might get YAML looks little like : , APIKEY environmental variable stored api-key value, vcr realised recorded string <<<my_api_key>>> instead. cassette recorded, vcr longer needs API key real requests made. Furthermore, default requests matching include API key, things work. Now, ensure tests work absence real API key? E.g. tests pass continuous integration external pull requests code repository. vcr need actual API key requests cassettes created, real requests made. still need fool package believing API key construct requests . add following lines testthat setup file (e.g. tests/testthat/helper-vcr.R)","code":"library(\"vcr\") # *Required* as vcr is set up on loading invisible(vcr::vcr_configure(   dir = \"../fixtures\" )) vcr::check_cassette_names() library(\"vcr\") invisible(vcr::vcr_configure(   filter_sensitive_data = list(\"<<<my_api_key>>>\" = Sys.getenv('APIKEY')),  # add this   dir = \"../fixtures\" )) vcr::check_cassette_names() http_interactions: - request:     method: post     ...     headers:       Accept: application/json, text/xml, application/xml, */*       Content-Type: application/json       api-key: <<<my_api_key>>>     ... if (!nzchar(Sys.getenv(\"APIKEY\"))) {   Sys.setenv(\"APIKEY\" = \"foobar\") }"},{"path":"https://docs.ropensci.org/vcr/articles/vcr.html","id":"using-an--renviron","dir":"Articles","previous_headings":"vcr introduction > Getting Started > Protecting secrets","what":"Using an .Renviron","title":"Introduction to vcr","text":"simple way manage local environmental variables use .Renviron file. .Renviron file might look like : can set project user level, usethis usethis::edit_r_environ() function help edit file.","code":"APIKEY=\"mytotallysecretkey\""},{"path":[]},{"path":"https://docs.ropensci.org/vcr/articles/vcr.html","id":"in-tests","dir":"Articles","previous_headings":"vcr introduction > Basic usage","what":"In tests","title":"Introduction to vcr","text":"tests, whichever tests want use vcr, wrap vcr::use_cassette() call like: put vcr::use_cassette() block inside, put testthat expectations outside vcr::use_cassette() block: Don’t wrap use_cassette() block inside test_that() block testthat expectations inside use_cassette() block, ’ll get line number use_cassette() block starts failures. first time run tests, “cassette” .e. file recorded HTTP interactions, created tests/fixtures/rl_citation.yml. times , cassette used. change code HTTP interactions needed code wrapped vcr::use_cassette(\"rl_citation\", delete tests/fixtures/rl_citation.yml run tests re-recording cassette.","code":"library(testthat) vcr::use_cassette(\"rl_citation\", {   test_that(\"my test\", {     aa <- rl_citation()      expect_is(aa, \"character\")     expect_match(aa, \"IUCN\")     expect_match(aa, \"www.iucnredlist.org\")   }) }) library(testthat) test_that(\"my test\", {   vcr::use_cassette(\"rl_citation\", {     aa <- rl_citation()   })    expect_is(aa, \"character\")   expect_match(aa, \"IUCN\")   expect_match(aa, \"www.iucnredlist.org\") })"},{"path":"https://docs.ropensci.org/vcr/articles/vcr.html","id":"outside-of-tests","dir":"Articles","previous_headings":"vcr introduction > Basic usage","what":"Outside of tests","title":"Introduction to vcr","text":"want get feel vcr works, although don’t need . request gets recorded, subsequent requests form used cached HTTP response, much faster Importantly, unit test deals inputs outputs - behind scenes use cached HTTP response - thus, tests run faster. cached response looks something like (condensed brevity): components request response preserved, HTTP client (case crul) can reconstruct response just wasn’t using vcr.","code":"library(vcr) library(crul)  cli <- crul::HttpClient$new(url = \"https://eu.httpbin.org\") system.time(   use_cassette(name = \"helloworld\", {     cli$get(\"get\")   }) ) #>    user  system elapsed  #>   0.107   0.003   0.161 system.time(   use_cassette(name = \"helloworld\", {     cli$get(\"get\")   }) ) #>    user  system elapsed  #>    0.08    0.00    0.08 http_interactions: - request:     method: get     uri: https://eu.httpbin.org/get     body:       encoding: ''       string: ''     headers:       User-Agent: libcurl/7.54.0 r-curl/3.2 crul/0.5.2   response:     status:       status_code: '200'       message: OK       explanation: Request fulfilled, document follows     headers:       status: HTTP/1.1 200 OK       connection: keep-alive     body:       encoding: UTF-8       string: \"{\\n  \\\"args\\\": {}, \\n  \\\"headers\\\": {\\n    \\\"Accept\\\": \\\"application/json,         text/xml, application/xml, */*\\\", \\n    \\\"Accept-Encoding\\\": \\\"gzip, deflate\\\",         \\n    \\\"Connection\\\": \\\"close\\\", \\n    \\\"Host\\\": \\\"httpbin.org\\\", \\n    \\\"User-Agent\\\":         \\\"libcurl/7.54.0 r-curl/3.2 crul/0.5.2\\\"\\n  }, \\n  \\\"origin\\\": \\\"111.222.333.444\\\",         \\n  \\\"url\\\": \\\"https://eu.httpbin.org/get\\\"\\n}\\n\"   recorded_at: 2018-04-03 22:55:02 GMT   recorded_with: vcr/0.1.0, webmockr/0.2.4, crul/0.5.2"},{"path":"https://docs.ropensci.org/vcr/articles/vcr.html","id":"less-basic-usage","dir":"Articles","previous_headings":"vcr introduction > Basic usage","what":"Less basic usage","title":"Introduction to vcr","text":"tweaking things needs, make sure read docs configuration (e.g., fixtures saved? can re-recorded automatically regulary?) request matching (vcr match request recorded interaction?)","code":""},{"path":"https://docs.ropensci.org/vcr/articles/vcr.html","id":"terminology","dir":"Articles","previous_headings":"vcr introduction","what":"Terminology","title":"Introduction to vcr","text":"vcr: name comes idea want record something play back later, like vcr cassette: thing record HTTP interactions . Right now option file system (writing files), future things, e.g. key-value store like Redis fixture: fixture something used consistently test piece software. case, cassette (just defined ) fixture - used unit tests. use setup function vcr_setup() default directory created hold cassettes called fixtures/ signal folder contains. Persisters: save requests - currently option file system serialize: translating data format can stored; , translate HTTP request response data representation disk read back later Serializers: serialize HTTP response - currently option YAML; options future include e.g. JSON insert cassette: create cassette (HTTP interactions recorded cassette) eject cassette: eject cassette (longer recording cassette) replay: refers using cached result http request recorded earlier","code":""},{"path":[]},{"path":"https://docs.ropensci.org/vcr/articles/vcr.html","id":"vcr-for-tests","dir":"Articles","previous_headings":"vcr introduction > Workflows","what":"vcr for tests","title":"Introduction to vcr","text":"See usage section running tests checks whole package, note users found different results devtools::check() vs. devtools::test(). ’s clear make difference. let us know run problem.","code":""},{"path":"https://docs.ropensci.org/vcr/articles/vcr.html","id":"vcr-in-your-r-project","dir":"Articles","previous_headings":"vcr introduction > Workflows","what":"vcr in your R project","title":"Introduction to vcr","text":"can use vcr R project well. Load vcr project Similar example, use use_cassette run code HTTP requests. first time real request done, cached response used.","code":""},{"path":"https://docs.ropensci.org/vcr/articles/vcr.html","id":"configuration","dir":"Articles","previous_headings":"vcr introduction","what":"Configuration","title":"Introduction to vcr","text":"See also configuration vignette. set following defaults: dir = \".\" record = \"\" match_requests_on = \"c(\"method\", \"uri\")\" allow_unused_http_interactions = TRUE serialize_with = \"yaml\" json_pretty = FALSE persist_with = \"FileSystem\" ignore_hosts = NULL ignore_localhost = FALSE ignore_request = NULL uri_parser = \"crul::url_parse\" preserve_exact_body_bytes = FALSE turned_off = FALSE re_record_interval = NULL clean_outdated_http_interactions = FALSE allow_http_connections_when_no_cassette = FALSE cassettes = list() linked_context = NULL log = FALSE log_opts = list(file = \"vcr.log\", log_prefix = \"Cassette\", date = TRUE) filter_sensitive_data = NULL filter_sensitive_data_regex = NULL filter_request_headers = NULL filter_response_headers = NULL filter_query_parameters = NULL write_disk_path = NULL verbose_errors = FALSE quiet = TRUE warn_on_empty_cassette = TRUE can get defaults programmatically can change defaults vcr_configure(): Calling vcr_configuration() gives important configuration parameters nice tidy print details refer configuration vignette","code":"vcr_config_defaults() vcr_configure() vcr_configuration() #> <vcr configuration> #>   Cassette Dir: /tmp/RtmpaLsmPl #>   Record: once #>   Serialize with: yaml #>   URI Parser: crul::url_parse #>   Match Requests on: method, uri #>   Preserve Bytes?: FALSE #>   Logging?: FALSE #>   ignored hosts:  #>   ignore localhost?: FALSE #>   Write disk path:"},{"path":"https://docs.ropensci.org/vcr/articles/vcr.html","id":"matchingmatchers","dir":"Articles","previous_headings":"vcr introduction","what":"Matching/Matchers","title":"Introduction to vcr","text":"vcr looks similarity HTTP requests cached requests. can set examined request one following options: body headers host method path query uri default, use method (HTTP method, e.g., GET) uri (test exact match URI, e.g., http://foo.com). can set options tweaking match_requests_on parameter: details refer request matching vignette.","code":"use_cassette(name = \"one\", {     cli$post(\"post\", body = list(a = 5))   },   match_requests_on = c('method', 'headers', 'body') )"},{"path":"https://docs.ropensci.org/vcr/articles/vcr.html","id":"note-about-missing-features","dir":"Articles","previous_headings":"vcr introduction","what":"Note about missing features","title":"Introduction to vcr","text":"’s number features package yet supported, parameters found package. ’ve tried make sure parameters ignored marked . Keep eye package updates changes parameters, /let us know want can move priority list.","code":""},{"path":"https://docs.ropensci.org/vcr/articles/write-to-disk.html","id":"request-matching","dir":"Articles","previous_headings":"","what":"Request matching","title":"Mocking writing to disk","text":"http requests write response disk, use vcr_configure() set write_disk_path option. See write_disk_path configuration option vignette(\"configuration\", package = \"vcr\"). , create temporary directory, set fixtures pass file path (doesn’t exist yet) crul’s disk parameter. vcr take care handling writing response file addition cassette. also works httr. difference write disk function httr::write_disk(path) rather parameter. Note write disk using vcr, cassette slightly changed. Instead holding http response body , cassette file path response body. file response body otherwise string yaml field :","code":"library(\"vcr\") tmpdir <- tempdir() vcr_configure(   dir = file.path(tmpdir, \"fixtures\"),   write_disk_path = file.path(tmpdir, \"files\") ) #> <vcr configuration> #>   Cassette Dir: /tmp/RtmpCgA3Wg/fixtures #>   Record: once #>   Serialize with: yaml #>   URI Parser: crul::url_parse #>   Match Requests on: method, uri #>   Preserve Bytes?: FALSE #>   Logging?: FALSE #>   ignored hosts:  #>   ignore localhost?: FALSE #>   Write disk path: /tmp/RtmpCgA3Wg/files library(crul) ## make a temp file f <- tempfile(fileext = \".json\") ## make a request cas <- use_cassette(\"test_write_to_disk\", {   out <- HttpClient$new(\"https://httpbin.org/get\")$get(disk = f) }) file.exists(out$content) #> [1] TRUE out$parse() #> [1] \"{\\n  \\\"args\\\": {}, \\n  \\\"headers\\\": {\\n    \\\"Accept\\\": \\\"application/json, text/xml, application/xml, */*\\\", \\n    \\\"Accept-Encoding\\\": \\\"gzip, deflate\\\", \\n    \\\"Host\\\": \\\"httpbin.org\\\", \\n    \\\"User-Agent\\\": \\\"libcurl/7.81.0 r-curl/5.2.1 crul/1.4.0\\\", \\n    \\\"X-Amzn-Trace-Id\\\": \\\"Root=1-65e6c1ec-46bc459566112ef1162e5134\\\"\\n  }, \\n  \\\"origin\\\": \\\"20.49.54.4\\\", \\n  \\\"url\\\": \\\"https://httpbin.org/get\\\"\\n}\\n\" http_interactions: - request:     method: get     uri: https://httpbin.org/get   response:     headers:       status: HTTP/1.1 200 OK       access-control-allow-credentials: 'true'     body:       encoding: UTF-8       file: yes       string: /private/var/folders/fc/n7g_vrvn0sx_st0p8lxb3ts40000gn/T/Rtmp5W4olr/files/file177e2e5d97ec.json {   \"args\": {},    \"headers\": {     \"Accept\": \"application/json, text/xml, application/xml, */*\",      \"Accept-Encoding\": \"gzip, deflate\",      \"Host\": \"httpbin.org\",      \"User-Agent\": \"libcurl/7.54.0 r-curl/4.3 crul/0.9.0\"   },    \"origin\": \"24.21.229.59, 24.21.229.59\",    \"url\": \"https://httpbin.org/get\" }"},{"path":"https://docs.ropensci.org/vcr/articles/write-to-disk.html","id":"more-documentation","dir":"Articles","previous_headings":"Request matching","what":"More documentation","title":"Mocking writing to disk","text":"Check http testing book lot documentation vcr, webmockr, crul","code":""},{"path":"https://docs.ropensci.org/vcr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Scott Chamberlain. Author, maintainer. Aaron Wolen. Author. Maëlle Salmon. Author. Daniel Possenriede. Author. . Funder.            https://ropensci.org","code":""},{"path":"https://docs.ropensci.org/vcr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chamberlain S, Wolen , Salmon M, Possenriede D (2024). vcr: Record 'HTTP' Calls Disk. R package version 1.2.2.93https://github.com/ropensci/vcr/ (devel) https://books.ropensci.org/http-testing/ (user manual) https://docs.ropensci.org/vcr/ (website), https://github.com/ropensci/vcr/ (devel)https://books.ropensci.org/http-testing/ (user manual)https://docs.ropensci.org/vcr/ (website).","code":"@Manual{,   title = {vcr: Record 'HTTP' Calls to Disk},   author = {Scott Chamberlain and Aaron Wolen and Maëlle Salmon and Daniel Possenriede},   year = {2024},   note = {R package version 1.2.2.93https://github.com/ropensci/vcr/ (devel) https://books.ropensci.org/http-testing/ (user manual) https://docs.ropensci.org/vcr/ (website)},   url = {https://github.com/ropensci/vcr/ (devel) https://books.ropensci.org/http-testing/ (user manual) https://docs.ropensci.org/vcr/ (website)}, }"},{"path":"https://docs.ropensci.org/vcr/index.html","id":"vcr","dir":"","previous_headings":"","what":"Record HTTP Calls to Disk","title":"Record HTTP Calls to Disk","text":"Easier HTTP testing! Record HTTP requests responses disk replay unit tests R package, make independent connection, faster, complete. R port Ruby gem vcr","code":""},{"path":"https://docs.ropensci.org/vcr/index.html","id":"elevator-pitch","dir":"","previous_headings":"","what":"Elevator pitch","title":"Record HTTP Calls to Disk","text":"Setup vcr package vcr::use_vcr() Tweak configuration protect secrets Sprinkle tests vcr::use_cassette() save HTTP interactions disk “cassettes” files want test package behavior API returns e.g. 404 503 code, edit cassettes, use webmockr Now tests can work without internet connection! Demo adding vcr testing R package, corresponding narrative.","code":""},{"path":"https://docs.ropensci.org/vcr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Record HTTP Calls to Disk","text":"CRAN version: Development version:","code":"install.packages(\"vcr\") remotes::install_github(\"ropensci/vcr\") library(\"vcr\") library(\"crul\")"},{"path":"https://docs.ropensci.org/vcr/index.html","id":"docs","dir":"","previous_headings":"","what":"Docs","title":"Record HTTP Calls to Disk","text":"Check HTTP testing book vcr vignettes.","code":""},{"path":"https://docs.ropensci.org/vcr/index.html","id":"supported-http-libraries","dir":"","previous_headings":"","what":"Supported HTTP libraries","title":"Record HTTP Calls to Disk","text":"crul httr","code":""},{"path":"https://docs.ropensci.org/vcr/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Record HTTP Calls to Disk","text":"docs assume using testthat unit tests.","code":""},{"path":"https://docs.ropensci.org/vcr/index.html","id":"use_vcr","dir":"","previous_headings":"Getting Started","what":"use_vcr","title":"Record HTTP Calls to Disk","text":"can set package use vcr : : put vcr DESCRIPTION check testthat setup setup testthat set recorded cassettes saved sourced tests/fixtures setup config file vcr add example test file vcr make .gitattributes file settings vcr make ./tests/testthat/helper-vcr.R file see R console:","code":"vcr::use_vcr() ◉ Using package: vcr.example   ◉ assuming fixtures at: tests/fixtures   ✓ Adding vcr to Suggests field in DESCRIPTION   ✓ Creating directory: ./tests/testthat   ◉ Looking for testthat.R file or similar   ✓ tests/testthat.R: added   ✓ Adding vcr config to tests/testthat/helper-vcr.example.R   ✓ Adding example test file tests/testthat/test-vcr_example.R   ✓ .gitattributes: added   ◉ Learn more about `vcr`: https://books.ropensci.org/http-testing/"},{"path":"https://docs.ropensci.org/vcr/index.html","id":"protecting-secrets","dir":"","previous_headings":"Getting Started","what":"Protecting secrets","title":"Record HTTP Calls to Disk","text":"Secrets often turn API work. common example API key. vcr saves responses APIs YAML files, include secrets unless indicate vcr protect . vcr_configure function filter_sensitive_data argument function just situation. filter_sensitive_data argument takes named list name list string used recorded cassettes instead secret, list item. vcr manage replacement , need edit helper-vcr.R file like : Use filter_sensitive_data argument vcr_configure function show vcr keep secret. best way store secret information .Renviron file. Assuming already place, supply named list filter_sensitive_data argument. Notice wrote Sys.getenv('APIKEY') API key directly, otherwise ’d written API key file might end public repo. get secret information environment, make sure whenever vcr records new cassette, replace secret information <<<my_api_key>>>. can find HTTP testing book chapter security. addition line instruct vcr replace string cassettes records equivalent string stored APIKEY environmental variable masking string <<<my_api_key>>>. practice, might get YAML looks little like : , APIKEY environmental variable stored api-key value, vcr realised recorded string <<<my_api_key>>> instead. cassette recorded, vcr longer needs API key real requests made. Furthermore, default requests matching include API key, things work. Now, ensure tests work absence real API key? E.g. tests pass continuous integration external pull requests code repository. vcr need actual API key requests cassettes created, real requests made. still need fool package believing API key construct requests . add following lines testthat setup file (e.g. tests/testthat/helper-vcr.R)","code":"library(\"vcr\") # *Required* as vcr is set up on loading invisible(vcr::vcr_configure(   dir = \"../fixtures\" )) vcr::check_cassette_names() library(\"vcr\") invisible(vcr::vcr_configure(   filter_sensitive_data = list(\"<<<my_api_key>>>\" = Sys.getenv('APIKEY')),  # add this   dir = \"../fixtures\" )) vcr::check_cassette_names() http_interactions: - request:     method: post     ...     headers:       Accept: application/json, text/xml, application/xml, */*       Content-Type: application/json       api-key: <<<my_api_key>>>     ... if (!nzchar(Sys.getenv(\"APIKEY\"))) {   Sys.setenv(\"APIKEY\" = \"foobar\") }"},{"path":"https://docs.ropensci.org/vcr/index.html","id":"using-an-renviron","dir":"","previous_headings":"Getting Started > Protecting secrets","what":"Using an .Renviron","title":"Record HTTP Calls to Disk","text":"simple way manage local environmental variables use .Renviron file. .Renviron file might look like : can set project user level, usethis usethis::edit_r_environ() function help edit file.","code":"APIKEY=\"mytotallysecretkey\""},{"path":[]},{"path":"https://docs.ropensci.org/vcr/index.html","id":"in-tests","dir":"","previous_headings":"Usage","what":"In tests","title":"Record HTTP Calls to Disk","text":"tests, whichever tests want use vcr, wrap vcr::use_cassette() call like: put vcr::use_cassette() block inside, put testthat expectations outside vcr::use_cassette() block: Don’t wrap use_cassette() block inside test_that() block testthat expectations inside use_cassette() block, ’ll get line number use_cassette() block starts failures. first time run tests, “cassette” .e. file recorded HTTP interactions, created tests/fixtures/rl_citation.yml. times , cassette used. change code HTTP interactions needed code wrapped vcr::use_cassette(\"rl_citation\", delete tests/fixtures/rl_citation.yml run tests re-recording cassette.","code":"library(testthat) vcr::use_cassette(\"rl_citation\", {   test_that(\"my test\", {     aa <- rl_citation()      expect_is(aa, \"character\")     expect_match(aa, \"IUCN\")     expect_match(aa, \"www.iucnredlist.org\")   }) }) library(testthat) test_that(\"my test\", {   vcr::use_cassette(\"rl_citation\", {     aa <- rl_citation()   })    expect_is(aa, \"character\")   expect_match(aa, \"IUCN\")   expect_match(aa, \"www.iucnredlist.org\") })"},{"path":"https://docs.ropensci.org/vcr/index.html","id":"outside-of-tests","dir":"","previous_headings":"Usage","what":"Outside of tests","title":"Record HTTP Calls to Disk","text":"want get feel vcr works, although don’t need . request gets recorded, subsequent requests form used cached HTTP response, much faster Importantly, unit test deals inputs outputs - behind scenes use cached HTTP response - thus, tests run faster. cached response looks something like (condensed brevity): components request response preserved, HTTP client (case crul) can reconstruct response just wasn’t using vcr.","code":"library(vcr) library(crul)  cli <- crul::HttpClient$new(url = \"https://eu.httpbin.org\") system.time(   use_cassette(name = \"helloworld\", {     cli$get(\"get\")   }) ) system.time(   use_cassette(name = \"helloworld\", {     cli$get(\"get\")   }) ) http_interactions: - request:     method: get     uri: https://eu.httpbin.org/get     body:       encoding: ''       string: ''     headers:       User-Agent: libcurl/7.54.0 r-curl/3.2 crul/0.5.2   response:     status:       status_code: '200'       message: OK       explanation: Request fulfilled, document follows     headers:       status: HTTP/1.1 200 OK       connection: keep-alive     body:       encoding: UTF-8       string: \"{\\n  \\\"args\\\": {}, \\n  \\\"headers\\\": {\\n    \\\"Accept\\\": \\\"application/json,         text/xml, application/xml, */*\\\", \\n    \\\"Accept-Encoding\\\": \\\"gzip, deflate\\\",         \\n    \\\"Connection\\\": \\\"close\\\", \\n    \\\"Host\\\": \\\"httpbin.org\\\", \\n    \\\"User-Agent\\\":         \\\"libcurl/7.54.0 r-curl/3.2 crul/0.5.2\\\"\\n  }, \\n  \\\"origin\\\": \\\"111.222.333.444\\\",         \\n  \\\"url\\\": \\\"https://eu.httpbin.org/get\\\"\\n}\\n\"   recorded_at: 2018-04-03 22:55:02 GMT   recorded_with: vcr/0.1.0, webmockr/0.2.4, crul/0.5.2"},{"path":"https://docs.ropensci.org/vcr/index.html","id":"less-basic-usage","dir":"","previous_headings":"Usage","what":"Less basic usage","title":"Record HTTP Calls to Disk","text":"tweaking things needs, make sure read docs configuration (e.g., fixtures saved? can re-recorded automatically regulary?) request matching (vcr match request recorded interaction?)","code":""},{"path":"https://docs.ropensci.org/vcr/index.html","id":"terminology","dir":"","previous_headings":"","what":"Terminology","title":"Record HTTP Calls to Disk","text":"vcr: name comes idea want record something play back later, like vcr cassette: thing record HTTP interactions . Right now option file system (writing files), future things, e.g. key-value store like Redis fixture: fixture something used consistently test piece software. case, cassette (just defined ) fixture - used unit tests. use setup function vcr_setup() default directory created hold cassettes called fixtures/ signal folder contains. Persisters: save requests - currently option file system serialize: translating data format can stored; , translate HTTP request response data representation disk read back later Serializers: serialize HTTP response - currently option YAML; options future include e.g. JSON insert cassette: create cassette (HTTP interactions recorded cassette) eject cassette: eject cassette (longer recording cassette) replay: refers using cached result http request recorded earlier","code":""},{"path":[]},{"path":"https://docs.ropensci.org/vcr/index.html","id":"vcr-for-tests","dir":"","previous_headings":"Workflows","what":"vcr for tests","title":"Record HTTP Calls to Disk","text":"See usage section running tests checks whole package, note users found different results devtools::check() vs. devtools::test(). ’s clear make difference. let us know run problem.","code":""},{"path":"https://docs.ropensci.org/vcr/index.html","id":"vcr-in-your-r-project","dir":"","previous_headings":"Workflows","what":"vcr in your R project","title":"Record HTTP Calls to Disk","text":"can use vcr R project well. Load vcr project Similar example, use use_cassette run code HTTP requests. first time real request done, cached response used.","code":""},{"path":"https://docs.ropensci.org/vcr/index.html","id":"how-it-works-in-lots-of-detail","dir":"","previous_headings":"Workflows","what":"How it works in lots of detail","title":"Record HTTP Calls to Disk","text":"See vignette internals","code":""},{"path":"https://docs.ropensci.org/vcr/index.html","id":"just-want-to-mock-and-not-store-on-disk","dir":"","previous_headings":"Workflows","what":"Just want to mock and not store on disk?","title":"Record HTTP Calls to Disk","text":"’re looking webmockr, vcr uses. webmockr matches requests based criteria choose, cache HTTP interactions disk vcr .","code":""},{"path":"https://docs.ropensci.org/vcr/index.html","id":"configuration","dir":"","previous_headings":"","what":"Configuration","title":"Record HTTP Calls to Disk","text":"See also configuration vignette. set following defaults: dir = \".\" record = \"\" match_requests_on = \"c(\"method\", \"uri\")\" allow_unused_http_interactions = TRUE serialize_with = \"yaml\" json_pretty = FALSE persist_with = \"FileSystem\" ignore_hosts = NULL ignore_localhost = FALSE ignore_request = NULL uri_parser = \"crul::url_parse\" preserve_exact_body_bytes = FALSE turned_off = FALSE re_record_interval = NULL clean_outdated_http_interactions = FALSE allow_http_connections_when_no_cassette = FALSE cassettes = list() linked_context = NULL log = FALSE log_opts = list(file = \"vcr.log\", log_prefix = \"Cassette\", date = TRUE) filter_sensitive_data = NULL filter_sensitive_data_regex = NULL filter_request_headers = NULL filter_response_headers = NULL filter_query_parameters = NULL write_disk_path = NULL verbose_errors = FALSE quiet = TRUE warn_on_empty_cassette = TRUE can get defaults programmatically can change defaults vcr_configure(): Calling vcr_configuration() gives important configuration parameters nice tidy print details refer configuration vignette","code":"vcr_config_defaults() vcr_configure() vcr_configuration() #> <vcr configuration> #>   Cassette Dir: . #>   Record: once #>   Serialize with: yaml #>   URI Parser: crul::url_parse #>   Match Requests on: method, uri #>   Preserve Bytes?: FALSE #>   Logging?: FALSE #>   ignored hosts:  #>   ignore localhost?: FALSE #>   Write disk path:"},{"path":"https://docs.ropensci.org/vcr/index.html","id":"matchingmatchers","dir":"","previous_headings":"","what":"Matching/Matchers","title":"Record HTTP Calls to Disk","text":"vcr looks similarity HTTP requests cached requests. can set examined request one following options: body headers host method path query uri default, use method (HTTP method, e.g., GET) uri (test exact match URI, e.g., http://foo.com). can set options tweaking match_requests_on parameter: details refer request matching vignette.","code":"use_cassette(name = \"one\", {     cli$post(\"post\", body = list(a = 5))   },   match_requests_on = c('method', 'headers', 'body') )"},{"path":"https://docs.ropensci.org/vcr/index.html","id":"vcr-in-other-languages","dir":"","previous_headings":"","what":"vcr in other languages","title":"Record HTTP Calls to Disk","text":"canonical vcr (Ruby) lists ports languages https://github.com/vcr/vcr","code":""},{"path":"https://docs.ropensci.org/vcr/index.html","id":"note-about-missing-features","dir":"","previous_headings":"","what":"Note about missing features","title":"Record HTTP Calls to Disk","text":"’s number features package yet supported, parameters found package. ’ve tried make sure parameters ignored marked . Keep eye package updates changes parameters, /let us know want can move priority list.","code":""},{"path":"https://docs.ropensci.org/vcr/index.html","id":"example-packages-using-vcr","dir":"","previous_headings":"","what":"Example packages using vcr","title":"Record HTTP Calls to Disk","text":"allcontributors bold qualtRics rgbif ritis rredlist rtoot rtweet wikitaxa worrms","code":""},{"path":"https://docs.ropensci.org/vcr/index.html","id":"contributors","dir":"","previous_headings":"","what":"Contributors","title":"Record HTTP Calls to Disk","text":"Scott Chamberlain Aaron Wolen Maëlle Salmon Daniel Possenriede","code":""},{"path":"https://docs.ropensci.org/vcr/index.html","id":"meta","dir":"","previous_headings":"","what":"Meta","title":"Record HTTP Calls to Disk","text":"Please report issues bugs License: MIT Get citation information vcr R citation(package = 'vcr') Please note package released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":null,"dir":"Reference","previous_headings":"","what":"Cassette handler — Cassette","title":"Cassette handler — Cassette","text":"Main R6 class called main user facing function use_cassette()","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cassette handler — Cassette","text":"object class Cassette","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"points-of-webmockr-integration","dir":"Reference","previous_headings":"","what":"Points of webmockr integration","title":"Cassette handler — Cassette","text":"initialize(): webmockr used initialize() method create webmockr stubs. stubs created call Cassette$new() within insert_cassette(), exiting use_cassette(), calling eject() Cassette class insert_cassette(), stubs cleaned . eject() method: webmockr::disable() called exiting eject disable webmock webmockr affect HTTP requests happen afterwards call_block() method: call_block used use_cassette() function evaluate whatever code passed ; within call_block webmockr::webmockr_allow_net_connect() run evaluate code block allow real HTTP requests, webmockr::webmockr_disable_net_connect() called evalulating code block disallow real HTTP requests make_http_interaction() method: webmockr::pluck_body() utility function used pull request body HTTP request serialize_to_crul() method: method: webmockr::RequestSignature webmockr::Response used build request response, respectively, passed webmockr::build_crul_response() make complete crul HTTP response object","code":""},{"path":[]},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Cassette handler — Cassette","text":"name (character) cassette name record (character) record mode manfile (character) cassette file path recorded_at (character) date/time recorded serialize_with (character) serializer use (yaml|json) serializer (character) serializer use (yaml|json) persist_with (character) persister use (FileSystem ) persister (character) persister use (FileSystem ) match_requests_on (character) matchers use default: method & uri re_record_interval (numeric) re-record interval tag ignored, used right now tags ignored, used right now root_dir root dir, gathered vcr_configuration() update_content_length_header (logical) Whether overwrite Content-Length header allow_playback_repeats (logical) Whether allow single HTTP interaction played back multiple times allow_unused_http_interactions (logical) ignored, used right now exclusive (logical) ignored, used right now preserve_exact_body_bytes (logical) Whether base64 encode bytes requests responses args (list) internal use http_interactions_ (list) internal use new_recorded_interactions (list) internal use clean_outdated_http_interactions (logical) outdated interactions recorded back file to_return (logical) internal use cassette_opts (list) various cassette options","code":""},{"path":[]},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Cassette handler — Cassette","text":"Cassette$new() Cassette$print() Cassette$call_block() Cassette$eject() Cassette$file() Cassette$recording() Cassette$is_empty() Cassette$originally_recorded_at() Cassette$serializable_hash() Cassette$interactions_to_record() Cassette$merged_interactions() Cassette$up_to_date_interactions() Cassette$should_re_record() Cassette$should_stub_requests() Cassette$should_remove_matching_existing_interactions() Cassette$storage_key() Cassette$raw_cassette_bytes() Cassette$make_dir() Cassette$deserialized_hash() Cassette$previously_recorded_interactions() Cassette$write_recorded_interactions_to_disk() Cassette$record_http_interaction() Cassette$any_new_recorded_interactions() Cassette$make_args() Cassette$write_metadata() Cassette$http_interactions() Cassette$make_http_interaction() Cassette$serialize_to_crul() Cassette$clone()","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Cassette handler — Cassette","text":"Create new Cassette object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cassette handler — Cassette","text":"","code":"Cassette$new(   name,   record,   serialize_with,   persist_with,   match_requests_on,   re_record_interval,   tag,   tags,   update_content_length_header,   allow_playback_repeats,   allow_unused_http_interactions,   exclusive,   preserve_exact_body_bytes,   clean_outdated_http_interactions )"},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cassette handler — Cassette","text":"name name cassette. vcr sanitize ensure valid file name. record record mode. Default: \"\". future support \"\", \"\", \"none\", \"new_episodes\". See recording information serialize_with (character) serializer use. Valid values \"yaml\" (default), one supported now. persist_with (character) cassette persister use. Default: \"file_system\". can also register use custom persister. match_requests_on List request matchers use determine recorded HTTP interaction replay. Defaults [\"method\", \"uri\"]. built-matchers \"method\", \"uri\", \"headers\" \"body\" (\"host\" \"path\" supported yet, future version) re_record_interval (numeric) given, cassette re-recorded given interval, seconds. tag, tags tags ignored, used right now update_content_length_header (logical) Whether overwrite Content-Length header responses match length response body. Default: FALSE allow_playback_repeats (logical) Whether allow single HTTP interaction played back multiple times. Default: FALSE. allow_unused_http_interactions (logical) ignored, used right now exclusive (logical) ignored, used right now preserve_exact_body_bytes (logical) Whether base64 encode bytes requests responses cassette serializing . See also preserve_exact_body_bytes vcr_configure(). Default: FALSE clean_outdated_http_interactions (logical) outdated interactions recorded back file. Default: FALSE","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Cassette handler — Cassette","text":"new Cassette object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Cassette handler — Cassette","text":"print method Cassette objects","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Cassette handler — Cassette","text":"","code":"Cassette$print(x, ...)"},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cassette handler — Cassette","text":"x self ... ignored","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"method-call-block-","dir":"Reference","previous_headings":"","what":"Method call_block()","title":"Cassette handler — Cassette","text":"run code","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Cassette handler — Cassette","text":"","code":"Cassette$call_block(...)"},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cassette handler — Cassette","text":"... pass things evaluated","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Cassette handler — Cassette","text":"various","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"method-eject-","dir":"Reference","previous_headings":"","what":"Method eject()","title":"Cassette handler — Cassette","text":"ejects current cassette","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Cassette handler — Cassette","text":"","code":"Cassette$eject()"},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Cassette handler — Cassette","text":"self","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"method-file-","dir":"Reference","previous_headings":"","what":"Method file()","title":"Cassette handler — Cassette","text":"get file path cassette","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Cassette handler — Cassette","text":"","code":"Cassette$file()"},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Cassette handler — Cassette","text":"character","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"method-recording-","dir":"Reference","previous_headings":"","what":"Method recording()","title":"Cassette handler — Cassette","text":"cassette recording mode?","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Cassette handler — Cassette","text":"","code":"Cassette$recording()"},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Cassette handler — Cassette","text":"logical","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"method-is-empty-","dir":"Reference","previous_headings":"","what":"Method is_empty()","title":"Cassette handler — Cassette","text":"cassette disk empty","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Cassette handler — Cassette","text":"","code":"Cassette$is_empty()"},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Cassette handler — Cassette","text":"logical","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"method-originally-recorded-at-","dir":"Reference","previous_headings":"","what":"Method originally_recorded_at()","title":"Cassette handler — Cassette","text":"timestamp cassette originally recorded ","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Cassette handler — Cassette","text":"","code":"Cassette$originally_recorded_at()"},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Cassette handler — Cassette","text":"POSIXct date","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"method-serializable-hash-","dir":"Reference","previous_headings":"","what":"Method serializable_hash()","title":"Cassette handler — Cassette","text":"Get list http interactions record + recorded_with","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Cassette handler — Cassette","text":"","code":"Cassette$serializable_hash()"},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"Cassette handler — Cassette","text":"list","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"method-interactions-to-record-","dir":"Reference","previous_headings":"","what":"Method interactions_to_record()","title":"Cassette handler — Cassette","text":"Get list http interactions record","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Cassette handler — Cassette","text":"","code":"Cassette$interactions_to_record()"},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"Cassette handler — Cassette","text":"list","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"method-merged-interactions-","dir":"Reference","previous_headings":"","what":"Method merged_interactions()","title":"Cassette handler — Cassette","text":"Get interactions record","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Cassette handler — Cassette","text":"","code":"Cassette$merged_interactions()"},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"Cassette handler — Cassette","text":"list","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"method-up-to-date-interactions-","dir":"Reference","previous_headings":"","what":"Method up_to_date_interactions()","title":"Cassette handler — Cassette","text":"Cleans old interactions based re_record_interval clean_outdated_http_interactions settings","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Cassette handler — Cassette","text":"","code":"Cassette$up_to_date_interactions(interactions)"},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cassette handler — Cassette","text":"interactions list http interactions, class HTTPInteraction","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"returns-10","dir":"Reference","previous_headings":"","what":"Returns","title":"Cassette handler — Cassette","text":"list interactions record","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"method-should-re-record-","dir":"Reference","previous_headings":"","what":"Method should_re_record()","title":"Cassette handler — Cassette","text":"re-record interactions?","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Cassette handler — Cassette","text":"","code":"Cassette$should_re_record()"},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"returns-11","dir":"Reference","previous_headings":"","what":"Returns","title":"Cassette handler — Cassette","text":"logical","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"method-should-stub-requests-","dir":"Reference","previous_headings":"","what":"Method should_stub_requests()","title":"Cassette handler — Cassette","text":"record mode \"\"?","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Cassette handler — Cassette","text":"","code":"Cassette$should_stub_requests()"},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"returns-12","dir":"Reference","previous_headings":"","what":"Returns","title":"Cassette handler — Cassette","text":"logical","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"method-should-remove-matching-existing-interactions-","dir":"Reference","previous_headings":"","what":"Method should_remove_matching_existing_interactions()","title":"Cassette handler — Cassette","text":"record mode \"\"?","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"Cassette handler — Cassette","text":"","code":"Cassette$should_remove_matching_existing_interactions()"},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"returns-13","dir":"Reference","previous_headings":"","what":"Returns","title":"Cassette handler — Cassette","text":"logical","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"method-storage-key-","dir":"Reference","previous_headings":"","what":"Method storage_key()","title":"Cassette handler — Cassette","text":"Get serializer path","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"Cassette handler — Cassette","text":"","code":"Cassette$storage_key()"},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"returns-14","dir":"Reference","previous_headings":"","what":"Returns","title":"Cassette handler — Cassette","text":"character","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"method-raw-cassette-bytes-","dir":"Reference","previous_headings":"","what":"Method raw_cassette_bytes()","title":"Cassette handler — Cassette","text":"Get character string entire cassette; bytes misnomer","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"Cassette handler — Cassette","text":"","code":"Cassette$raw_cassette_bytes()"},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"returns-15","dir":"Reference","previous_headings":"","what":"Returns","title":"Cassette handler — Cassette","text":"character","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"method-make-dir-","dir":"Reference","previous_headings":"","what":"Method make_dir()","title":"Cassette handler — Cassette","text":"Create directory holds cassettes, present","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"Cassette handler — Cassette","text":"","code":"Cassette$make_dir()"},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"returns-16","dir":"Reference","previous_headings":"","what":"Returns","title":"Cassette handler — Cassette","text":"return; creates directory recursively, missing","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"method-deserialized-hash-","dir":"Reference","previous_headings":"","what":"Method deserialized_hash()","title":"Cassette handler — Cassette","text":"get http interactions cassette via serializer","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"usage-18","dir":"Reference","previous_headings":"","what":"Usage","title":"Cassette handler — Cassette","text":"","code":"Cassette$deserialized_hash()"},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"returns-17","dir":"Reference","previous_headings":"","what":"Returns","title":"Cassette handler — Cassette","text":"list","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"method-previously-recorded-interactions-","dir":"Reference","previous_headings":"","what":"Method previously_recorded_interactions()","title":"Cassette handler — Cassette","text":"get previously recorded interactions","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"usage-19","dir":"Reference","previous_headings":"","what":"Usage","title":"Cassette handler — Cassette","text":"","code":"Cassette$previously_recorded_interactions()"},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"returns-18","dir":"Reference","previous_headings":"","what":"Returns","title":"Cassette handler — Cassette","text":"list","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"method-write-recorded-interactions-to-disk-","dir":"Reference","previous_headings":"","what":"Method write_recorded_interactions_to_disk()","title":"Cassette handler — Cassette","text":"write recorded interactions disk","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"usage-20","dir":"Reference","previous_headings":"","what":"Usage","title":"Cassette handler — Cassette","text":"","code":"Cassette$write_recorded_interactions_to_disk()"},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"returns-19","dir":"Reference","previous_headings":"","what":"Returns","title":"Cassette handler — Cassette","text":"nothing returned","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"method-record-http-interaction-","dir":"Reference","previous_headings":"","what":"Method record_http_interaction()","title":"Cassette handler — Cassette","text":"record http interaction (write disk)","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"usage-21","dir":"Reference","previous_headings":"","what":"Usage","title":"Cassette handler — Cassette","text":"","code":"Cassette$record_http_interaction(x)"},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cassette handler — Cassette","text":"x crul httr response object, request $request","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"returns-20","dir":"Reference","previous_headings":"","what":"Returns","title":"Cassette handler — Cassette","text":"nothing returned","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"method-any-new-recorded-interactions-","dir":"Reference","previous_headings":"","what":"Method any_new_recorded_interactions()","title":"Cassette handler — Cassette","text":"new recorded interactions?","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"usage-22","dir":"Reference","previous_headings":"","what":"Usage","title":"Cassette handler — Cassette","text":"","code":"Cassette$any_new_recorded_interactions()"},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"returns-21","dir":"Reference","previous_headings":"","what":"Returns","title":"Cassette handler — Cassette","text":"logical","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"method-make-args-","dir":"Reference","previous_headings":"","what":"Method make_args()","title":"Cassette handler — Cassette","text":"make list options","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"usage-23","dir":"Reference","previous_headings":"","what":"Usage","title":"Cassette handler — Cassette","text":"","code":"Cassette$make_args()"},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"returns-22","dir":"Reference","previous_headings":"","what":"Returns","title":"Cassette handler — Cassette","text":"nothing returned","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"method-write-metadata-","dir":"Reference","previous_headings":"","what":"Method write_metadata()","title":"Cassette handler — Cassette","text":"write metadata cassette","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"usage-24","dir":"Reference","previous_headings":"","what":"Usage","title":"Cassette handler — Cassette","text":"","code":"Cassette$write_metadata()"},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"returns-23","dir":"Reference","previous_headings":"","what":"Returns","title":"Cassette handler — Cassette","text":"nothing returned","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"method-http-interactions-","dir":"Reference","previous_headings":"","what":"Method http_interactions()","title":"Cassette handler — Cassette","text":"make HTTPInteractionList object, assign http_interactions_ var","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"usage-25","dir":"Reference","previous_headings":"","what":"Usage","title":"Cassette handler — Cassette","text":"","code":"Cassette$http_interactions()"},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"returns-24","dir":"Reference","previous_headings":"","what":"Returns","title":"Cassette handler — Cassette","text":"nothing returned","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"method-make-http-interaction-","dir":"Reference","previous_headings":"","what":"Method make_http_interaction()","title":"Cassette handler — Cassette","text":"Make HTTPInteraction object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"usage-26","dir":"Reference","previous_headings":"","what":"Usage","title":"Cassette handler — Cassette","text":"","code":"Cassette$make_http_interaction(x)"},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cassette handler — Cassette","text":"x crul httr response object, request $request","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"returns-25","dir":"Reference","previous_headings":"","what":"Returns","title":"Cassette handler — Cassette","text":"object class HTTPInteraction","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"method-serialize-to-crul-","dir":"Reference","previous_headings":"","what":"Method serialize_to_crul()","title":"Cassette handler — Cassette","text":"Make crul response object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"usage-27","dir":"Reference","previous_headings":"","what":"Usage","title":"Cassette handler — Cassette","text":"","code":"Cassette$serialize_to_crul()"},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"returns-26","dir":"Reference","previous_headings":"","what":"Returns","title":"Cassette handler — Cassette","text":"crul response","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Cassette handler — Cassette","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"usage-28","dir":"Reference","previous_headings":"","what":"Usage","title":"Cassette handler — Cassette","text":"","code":"Cassette$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cassette handler — Cassette","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Cassette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cassette handler — Cassette","text":"","code":"if (FALSE) { library(vcr) vcr_configure(dir = tempdir())  res <- Cassette$new(name = \"bob\") res$file() res$originally_recorded_at() res$recording() res$serializable_hash() res$eject() res$should_remove_matching_existing_interactions() res$storage_key() res$match_requests_on  # record all requests res <- Cassette$new(\"foobar\", record = \"all\") res$eject()  # cleanup unlink(file.path(tempdir(), c(\"bob.yml\", \"foobar.yml\")))  library(vcr) vcr_configure(dir = tempdir()) res <- Cassette$new(name = \"jane\") library(crul) # HttpClient$new(\"https://hb.opencpu.org\")$get(\"get\") }"},{"path":"https://docs.ropensci.org/vcr/reference/FileSystem.html","id":null,"dir":"Reference","previous_headings":"","what":"File system persister — FileSystem","title":"File system persister — FileSystem","text":"built-cassette persister. Persists cassettes file system.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/FileSystem.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"File system persister — FileSystem","text":"Private Methods storage_location() Get storage location absolute_path_to_file() Get absolute path storage_location","code":""},{"path":"https://docs.ropensci.org/vcr/reference/FileSystem.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"File system persister — FileSystem","text":"file_name (character) file name, whole path write_fxn (character) fxn use writing disk content (character) content record cassette path (character) storage directory cassettes write2disk (character) write disk make new FileSystem","code":""},{"path":[]},{"path":"https://docs.ropensci.org/vcr/reference/FileSystem.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"File system persister — FileSystem","text":"FileSystem$new() FileSystem$get_cassette() FileSystem$is_empty() FileSystem$set_cassette() FileSystem$clone()","code":""},{"path":"https://docs.ropensci.org/vcr/reference/FileSystem.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"File system persister — FileSystem","text":"Create new FileSystem object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/FileSystem.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"File system persister — FileSystem","text":"","code":"FileSystem$new(   file_name = NULL,   write_fxn = NULL,   content = NULL,   path = NULL,   write2disk = FALSE )"},{"path":"https://docs.ropensci.org/vcr/reference/FileSystem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"File system persister — FileSystem","text":"file_name (character) file name, whole path write_fxn (character) fxn use writing disk content (character) content record cassette path (character) storage directory cassettes write2disk (logical) write disk just make new FileSystem object. Default: FALSE","code":""},{"path":"https://docs.ropensci.org/vcr/reference/FileSystem.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"File system persister — FileSystem","text":"new FileSystem object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/FileSystem.html","id":"method-get-cassette-","dir":"Reference","previous_headings":"","what":"Method get_cassette()","title":"File system persister — FileSystem","text":"Gets cassette given storage key (file name)","code":""},{"path":"https://docs.ropensci.org/vcr/reference/FileSystem.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"File system persister — FileSystem","text":"","code":"FileSystem$get_cassette(file_name = NULL)"},{"path":"https://docs.ropensci.org/vcr/reference/FileSystem.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"File system persister — FileSystem","text":"file_name (character) file name, whole path","code":""},{"path":"https://docs.ropensci.org/vcr/reference/FileSystem.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"File system persister — FileSystem","text":"named list, yaml::yaml.load_file","code":""},{"path":"https://docs.ropensci.org/vcr/reference/FileSystem.html","id":"method-is-empty-","dir":"Reference","previous_headings":"","what":"Method is_empty()","title":"File system persister — FileSystem","text":"Checks cassette empty ","code":""},{"path":"https://docs.ropensci.org/vcr/reference/FileSystem.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"File system persister — FileSystem","text":"","code":"FileSystem$is_empty()"},{"path":"https://docs.ropensci.org/vcr/reference/FileSystem.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"File system persister — FileSystem","text":"logical","code":""},{"path":"https://docs.ropensci.org/vcr/reference/FileSystem.html","id":"method-set-cassette-","dir":"Reference","previous_headings":"","what":"Method set_cassette()","title":"File system persister — FileSystem","text":"Sets cassette given storage key (file name)","code":""},{"path":"https://docs.ropensci.org/vcr/reference/FileSystem.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"File system persister — FileSystem","text":"","code":"FileSystem$set_cassette(file_name = NULL, content)"},{"path":"https://docs.ropensci.org/vcr/reference/FileSystem.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"File system persister — FileSystem","text":"file_name (character) file name, whole path content (character) content record cassette","code":""},{"path":"https://docs.ropensci.org/vcr/reference/FileSystem.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"File system persister — FileSystem","text":"return; writes disk","code":""},{"path":"https://docs.ropensci.org/vcr/reference/FileSystem.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"File system persister — FileSystem","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/FileSystem.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"File system persister — FileSystem","text":"","code":"FileSystem$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/vcr/reference/FileSystem.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"File system persister — FileSystem","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteraction.html","id":null,"dir":"Reference","previous_headings":"","what":"HTTPInteraction class — HTTPInteraction","title":"HTTPInteraction class — HTTPInteraction","text":"object holds request response objects","code":""},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteraction.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"HTTPInteraction class — HTTPInteraction","text":"Methods to_hash() Create hash HTTPInteraction object from_hash(hash) Create HTTPInteraction object hash","code":""},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteraction.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"HTTPInteraction class — HTTPInteraction","text":"request Request class object response VcrResponse class object recorded_at (character) Time http interaction recorded ","code":""},{"path":[]},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteraction.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"HTTPInteraction class — HTTPInteraction","text":"HTTPInteraction$new() HTTPInteraction$to_hash() HTTPInteraction$from_hash() HTTPInteraction$clone()","code":""},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteraction.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"HTTPInteraction class — HTTPInteraction","text":"Create new HTTPInteraction object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteraction.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTPInteraction class — HTTPInteraction","text":"","code":"HTTPInteraction$new(request, response, recorded_at)"},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteraction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTPInteraction class — HTTPInteraction","text":"request Request class object response VcrResponse class object recorded_at (character) Time http interaction recorded ","code":""},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteraction.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"HTTPInteraction class — HTTPInteraction","text":"new HTTPInteraction object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteraction.html","id":"method-to-hash-","dir":"Reference","previous_headings":"","what":"Method to_hash()","title":"HTTPInteraction class — HTTPInteraction","text":"Create hash HTTPInteraction object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteraction.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTPInteraction class — HTTPInteraction","text":"","code":"HTTPInteraction$to_hash()"},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteraction.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"HTTPInteraction class — HTTPInteraction","text":"named list","code":""},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteraction.html","id":"method-from-hash-","dir":"Reference","previous_headings":"","what":"Method from_hash()","title":"HTTPInteraction class — HTTPInteraction","text":"Create HTTPInteraction object hash","code":""},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteraction.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTPInteraction class — HTTPInteraction","text":"","code":"HTTPInteraction$from_hash(hash)"},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteraction.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTPInteraction class — HTTPInteraction","text":"hash named list","code":""},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteraction.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"HTTPInteraction class — HTTPInteraction","text":"new HttpInteraction object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteraction.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"HTTPInteraction class — HTTPInteraction","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteraction.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTPInteraction class — HTTPInteraction","text":"","code":"HTTPInteraction$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteraction.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTPInteraction class — HTTPInteraction","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteraction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HTTPInteraction class — HTTPInteraction","text":"","code":"if (FALSE) { # make the request library(vcr) url <- \"https://hb.opencpu.org/post\" body <- list(foo = \"bar\") cli <- crul::HttpClient$new(url = url) res <- cli$post(body = body)  # build a Request object (request <- Request$new(\"POST\", uri = url,   body = body, headers = res$response_headers)) # build a VcrResponse object (response <- VcrResponse$new(    res$status_http(),    res$response_headers,    res$parse(\"UTF-8\"),    res$response_headers$status))  # make HTTPInteraction object (x <- HTTPInteraction$new(request = request, response = response)) x$recorded_at x$to_hash()  # make an HTTPInteraction from a hash with the object already made x$from_hash(x$to_hash())  # Make an HTTPInteraction from a hash alone my_hash <- x$to_hash() HTTPInteraction$new()$from_hash(my_hash) }"},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteractionList.html","id":null,"dir":"Reference","previous_headings":"","what":"HTTPInteractionList class — HTTPInteractionList","title":"HTTPInteractionList class — HTTPInteractionList","text":"keeps track HTTPInteraction objects","code":""},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteractionList.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"HTTPInteractionList class — HTTPInteractionList","text":"Private Methods has_unused_interactions() unused interactions? returns boolean matching_interaction_index_for() asdfadf matching_used_interaction_for(request) asdfadfs interaction_matches_request(request, interaction) Check request matches interaction (logical) from_hash() Get hash back. request_summary(z) Get request summary (character) response_summary(z) Get response summary (character)","code":""},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteractionList.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"HTTPInteractionList class — HTTPInteractionList","text":"interactions (list) list interaction class objects request_matchers (character) vector request matchers allow_playback_repeats whether allow playback repeats parent_list list empty objects, see NullList used_interactions (list) Interactions used","code":""},{"path":[]},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteractionList.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"HTTPInteractionList class — HTTPInteractionList","text":"HTTPInteractionList$new() HTTPInteractionList$response_for() HTTPInteractionList$has_interaction_matching() HTTPInteractionList$has_used_interaction_matching() HTTPInteractionList$remaining_unused_interaction_count() HTTPInteractionList$assert_no_unused_interactions() HTTPInteractionList$clone()","code":""},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteractionList.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"HTTPInteractionList class — HTTPInteractionList","text":"Create new HTTPInteractionList object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteractionList.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTPInteractionList class — HTTPInteractionList","text":"","code":"HTTPInteractionList$new(   interactions,   request_matchers,   allow_playback_repeats = FALSE,   parent_list = NullList$new(),   used_interactions = list() )"},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteractionList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTPInteractionList class — HTTPInteractionList","text":"interactions (list) list interaction class objects request_matchers (character) vector request matchers allow_playback_repeats whether allow playback repeats parent_list list empty objects, see NullList used_interactions (list) Interactions used. , interactions disk current cassette, request made matches interaction","code":""},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteractionList.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"HTTPInteractionList class — HTTPInteractionList","text":"new HTTPInteractionList object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteractionList.html","id":"method-response-for-","dir":"Reference","previous_headings":"","what":"Method response_for()","title":"HTTPInteractionList class — HTTPInteractionList","text":"Check matching interaction, returns response object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteractionList.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTPInteractionList class — HTTPInteractionList","text":"","code":"HTTPInteractionList$response_for(request)"},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteractionList.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTPInteractionList class — HTTPInteractionList","text":"request request object class HTTPInteraction","code":""},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteractionList.html","id":"method-has-interaction-matching-","dir":"Reference","previous_headings":"","what":"Method has_interaction_matching()","title":"HTTPInteractionList class — HTTPInteractionList","text":"Check matching interaction","code":""},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteractionList.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTPInteractionList class — HTTPInteractionList","text":"","code":"HTTPInteractionList$has_interaction_matching(request)"},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteractionList.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTPInteractionList class — HTTPInteractionList","text":"request request object class HTTPInteraction","code":""},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteractionList.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"HTTPInteractionList class — HTTPInteractionList","text":"logical","code":""},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteractionList.html","id":"method-has-used-interaction-matching-","dir":"Reference","previous_headings":"","what":"Method has_used_interaction_matching()","title":"HTTPInteractionList class — HTTPInteractionList","text":"check used interactions matching given request","code":""},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteractionList.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTPInteractionList class — HTTPInteractionList","text":"","code":"HTTPInteractionList$has_used_interaction_matching(request)"},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteractionList.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTPInteractionList class — HTTPInteractionList","text":"request request object class HTTPInteraction","code":""},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteractionList.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"HTTPInteractionList class — HTTPInteractionList","text":"logical","code":""},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteractionList.html","id":"method-remaining-unused-interaction-count-","dir":"Reference","previous_headings":"","what":"Method remaining_unused_interaction_count()","title":"HTTPInteractionList class — HTTPInteractionList","text":"Number unused interactions","code":""},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteractionList.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTPInteractionList class — HTTPInteractionList","text":"","code":"HTTPInteractionList$remaining_unused_interaction_count()"},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteractionList.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"HTTPInteractionList class — HTTPInteractionList","text":"integer","code":""},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteractionList.html","id":"method-assert-no-unused-interactions-","dir":"Reference","previous_headings":"","what":"Method assert_no_unused_interactions()","title":"HTTPInteractionList class — HTTPInteractionList","text":"Checks unused interactions left.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteractionList.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTPInteractionList class — HTTPInteractionList","text":"","code":"HTTPInteractionList$assert_no_unused_interactions()"},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteractionList.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"HTTPInteractionList class — HTTPInteractionList","text":"various","code":""},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteractionList.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"HTTPInteractionList class — HTTPInteractionList","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteractionList.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTPInteractionList class — HTTPInteractionList","text":"","code":"HTTPInteractionList$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteractionList.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTPInteractionList class — HTTPInteractionList","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/HTTPInteractionList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HTTPInteractionList class — HTTPInteractionList","text":"","code":"if (FALSE) { vcr_configure(  dir = tempdir(),  record = \"once\" )  # make interactions ## make the request ### turn off mocking crul::mock(FALSE) url <- \"https://hb.opencpu.org/post\" cli <- crul::HttpClient$new(url = url) res <- cli$post(body = list(a = 5))  ## request (request <- Request$new(\"POST\", url, list(a = 5), res$headers)) ## response (response <- VcrResponse$new(    res$status_http(),    res$response_headers,    res$parse(\"UTF-8\"),    res$response_headers$status)) ## make an interaction (inter <- HTTPInteraction$new(request = request, response = response))  # make an interactionlist (x <- HTTPInteractionList$new(    interactions = list(inter),    request_matchers = vcr_configuration()$match_requests_on )) x$interactions x$request_matchers x$parent_list x$parent_list$response_for() x$parent_list$has_interaction_matching() x$parent_list$has_used_interaction_matching() x$parent_list$remaining_unused_interaction_count() x$used_interactions x$allow_playback_repeats x$interactions x$response_for(request) }"},{"path":"https://docs.ropensci.org/vcr/reference/Hooks.html","id":null,"dir":"Reference","previous_headings":"","what":"Hooks class — Hooks","title":"Hooks class — Hooks","text":"Helps define new hooks, hold hooks, accessors get use hooks.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Hooks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hooks class — Hooks","text":"Private Methods make_hook(x, plac, fun) Make hook. - x (character) Hook name - plac Placement, one \"start\" \"end\" - fun function/callback","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Hooks.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Hooks class — Hooks","text":"hooks intenal use","code":""},{"path":[]},{"path":"https://docs.ropensci.org/vcr/reference/Hooks.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Hooks class — Hooks","text":"Hooks$invoke_hook() Hooks$clear_hooks() Hooks$define_hook() Hooks$clone()","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Hooks.html","id":"method-invoke-hook-","dir":"Reference","previous_headings":"","what":"Method invoke_hook()","title":"Hooks class — Hooks","text":"invoke hook","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Hooks.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hooks class — Hooks","text":"","code":"Hooks$invoke_hook(hook_type, args)"},{"path":"https://docs.ropensci.org/vcr/reference/Hooks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hooks class — Hooks","text":"hook_type (character) Hook name args (named list) Args passed invoking hook","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Hooks.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Hooks class — Hooks","text":"executes hook","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Hooks.html","id":"method-clear-hooks-","dir":"Reference","previous_headings":"","what":"Method clear_hooks()","title":"Hooks class — Hooks","text":"clear hooks","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Hooks.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Hooks class — Hooks","text":"","code":"Hooks$clear_hooks()"},{"path":"https://docs.ropensci.org/vcr/reference/Hooks.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Hooks class — Hooks","text":"return","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Hooks.html","id":"method-define-hook-","dir":"Reference","previous_headings":"","what":"Method define_hook()","title":"Hooks class — Hooks","text":"define hook","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Hooks.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Hooks class — Hooks","text":"","code":"Hooks$define_hook(hook_type, fun, prepend = FALSE)"},{"path":"https://docs.ropensci.org/vcr/reference/Hooks.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hooks class — Hooks","text":"hook_type (character) Hook name fun function prepend (logical) Whether prepend add end string. Default: FALSE","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Hooks.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Hooks class — Hooks","text":"return; defines hook internally","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Hooks.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Hooks class — Hooks","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Hooks.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Hooks class — Hooks","text":"","code":"Hooks$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/vcr/reference/Hooks.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hooks class — Hooks","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/JSON.html","id":null,"dir":"Reference","previous_headings":"","what":"The JSON serializer — JSON","title":"The JSON serializer — JSON","text":"class methods serializing via jsonlite","code":""},{"path":"https://docs.ropensci.org/vcr/reference/JSON.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"The JSON serializer — JSON","text":"vcr::Serializer -> JSON","code":""},{"path":[]},{"path":"https://docs.ropensci.org/vcr/reference/JSON.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"The JSON serializer — JSON","text":"JSON$new() JSON$serialize() JSON$deserialize() JSON$clone()","code":""},{"path":"https://docs.ropensci.org/vcr/reference/JSON.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"The JSON serializer — JSON","text":"Create new JSON object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/JSON.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The JSON serializer — JSON","text":"","code":"JSON$new(path = NULL)"},{"path":"https://docs.ropensci.org/vcr/reference/JSON.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The JSON serializer — JSON","text":"path (character) full path yaml file","code":""},{"path":"https://docs.ropensci.org/vcr/reference/JSON.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"The JSON serializer — JSON","text":"new JSON object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/JSON.html","id":"method-serialize-","dir":"Reference","previous_headings":"","what":"Method serialize()","title":"The JSON serializer — JSON","text":"Serializes given hash using internal fxn write_json","code":""},{"path":"https://docs.ropensci.org/vcr/reference/JSON.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"The JSON serializer — JSON","text":"","code":"JSON$serialize(x, path, bytes)"},{"path":"https://docs.ropensci.org/vcr/reference/JSON.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"The JSON serializer — JSON","text":"x (list) object serialize path (character) file path bytes (logical) whether preserve exact body bytes ","code":""},{"path":"https://docs.ropensci.org/vcr/reference/JSON.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"The JSON serializer — JSON","text":"(character) json string write disk","code":""},{"path":"https://docs.ropensci.org/vcr/reference/JSON.html","id":"method-deserialize-","dir":"Reference","previous_headings":"","what":"Method deserialize()","title":"The JSON serializer — JSON","text":"Deserializes content file path using jsonlite::fromJSON","code":""},{"path":"https://docs.ropensci.org/vcr/reference/JSON.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"The JSON serializer — JSON","text":"","code":"JSON$deserialize(cassette)"},{"path":"https://docs.ropensci.org/vcr/reference/JSON.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"The JSON serializer — JSON","text":"cassette current cassette object properties can retrieved","code":""},{"path":"https://docs.ropensci.org/vcr/reference/JSON.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"The JSON serializer — JSON","text":"(list) deserialized object, R list","code":""},{"path":"https://docs.ropensci.org/vcr/reference/JSON.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"The JSON serializer — JSON","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/JSON.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"The JSON serializer — JSON","text":"","code":"JSON$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/vcr/reference/JSON.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"The JSON serializer — JSON","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Persisters.html","id":null,"dir":"Reference","previous_headings":"","what":"Cassette persisters — Persisters","title":"Cassette persisters — Persisters","text":"Keeps track cassette persisters hash-like object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Persisters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cassette persisters — Persisters","text":"","code":"persister_fetch(x = \"FileSystem\", file_name)"},{"path":"https://docs.ropensci.org/vcr/reference/Persisters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cassette persisters — Persisters","text":"one option: FileSystem Private Methods persister_get() Gets sets named persister","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Persisters.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Cassette persisters — Persisters","text":"persisters (list) internal use, holds persister object name (character)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/vcr/reference/Persisters.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Cassette persisters — Persisters","text":"Persisters$new() Persisters$clone()","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Persisters.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Cassette persisters — Persisters","text":"Create new Persisters object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Persisters.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cassette persisters — Persisters","text":"","code":"Persisters$new(persisters = list(), name = \"FileSystem\")"},{"path":"https://docs.ropensci.org/vcr/reference/Persisters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cassette persisters — Persisters","text":"persisters (list) list name (character) Persister name, option right now \"FileSystem\"","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Persisters.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Cassette persisters — Persisters","text":"new Persisters object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Persisters.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Cassette persisters — Persisters","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Persisters.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Cassette persisters — Persisters","text":"","code":"Persisters$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/vcr/reference/Persisters.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cassette persisters — Persisters","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Persisters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cassette persisters — Persisters","text":"","code":"(aa <- Persisters$new()) #> <Persisters> #>   Public: #>     clone: function (deep = FALSE)  #>     initialize: function (persisters = list(), name = \"FileSystem\")  #>     name: FileSystem #>     persisters: R6ClassGenerator #>   Private: #>     persister_get: function ()  aa$name #> [1] \"FileSystem\" aa$persisters #> <FileSystem> object generator #>   Public: #>     file_name: NULL #>     write_fxn: NULL #>     content: NULL #>     path: NULL #>     write2disk: FALSE #>     initialize: function (file_name = NULL, write_fxn = NULL, content = NULL,  #>     get_cassette: function (file_name = NULL)  #>     is_empty: function ()  #>     set_cassette: function (file_name = NULL, content)  #>     clone: function (deep = FALSE)  #>   Private: #>     storage_location: function ()  #>     absolute_path_to_file: function (x, y)  #>   Parent env: <environment: namespace:vcr> #>   Locked objects: TRUE #>   Locked class: FALSE #>   Portable: TRUE yaml_serializer <- aa$persisters$new() yaml_serializer #> <FileSystem> #>   Public: #>     clone: function (deep = FALSE)  #>     content: NULL #>     file_name: NULL #>     get_cassette: function (file_name = NULL)  #>     initialize: function (file_name = NULL, write_fxn = NULL, content = NULL,  #>     is_empty: function ()  #>     path: . #>     set_cassette: function (file_name = NULL, content)  #>     write2disk: FALSE #>     write_fxn: NULL #>   Private: #>     absolute_path_to_file: function (x, y)  #>     storage_location: function ()"},{"path":"https://docs.ropensci.org/vcr/reference/Request.html","id":null,"dir":"Reference","previous_headings":"","what":"The request of an HTTPInteraction — Request","title":"The request of an HTTPInteraction — Request","text":"object handled aspects request","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Request.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"The request of an HTTPInteraction — Request","text":"method (character) http method uri (character) uri scheme (character) scheme (http https) host (character) host (e.g., stuff.org) path (character) path (e.g., foo/bar) query (character) query params, named list body (character) named list headers (character) named list skip_port_stripping (logical) whether strip port hash (character) named list - internal use opts (character) options - internal use disk (logical) xx fields (various) request body details output (various) request output details, disk, memory, etc","code":""},{"path":[]},{"path":"https://docs.ropensci.org/vcr/reference/Request.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"The request of an HTTPInteraction — Request","text":"Request$new() Request$to_hash() Request$from_hash() Request$clone()","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Request.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"The request of an HTTPInteraction — Request","text":"Create new Request object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Request.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The request of an HTTPInteraction — Request","text":"","code":"Request$new(   method,   uri,   body,   headers,   opts,   disk,   fields,   output,   skip_port_stripping = FALSE )"},{"path":"https://docs.ropensci.org/vcr/reference/Request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The request of an HTTPInteraction — Request","text":"method (character) HTTP method (.e. head, options, get, post, put, patch delete) uri (character) request URI body (character) request body headers (named list) request headers opts (named list) options internal use disk (boolean), body file disk fields (various) post fields output (various) output details skip_port_stripping (logical) whether strip port. default: FALSE","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Request.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"The request of an HTTPInteraction — Request","text":"new Request object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Request.html","id":"method-to-hash-","dir":"Reference","previous_headings":"","what":"Method to_hash()","title":"The request of an HTTPInteraction — Request","text":"Convert request list","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Request.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"The request of an HTTPInteraction — Request","text":"","code":"Request$to_hash()"},{"path":"https://docs.ropensci.org/vcr/reference/Request.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"The request of an HTTPInteraction — Request","text":"list","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Request.html","id":"method-from-hash-","dir":"Reference","previous_headings":"","what":"Method from_hash()","title":"The request of an HTTPInteraction — Request","text":"Convert request list","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Request.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"The request of an HTTPInteraction — Request","text":"","code":"Request$from_hash(hash)"},{"path":"https://docs.ropensci.org/vcr/reference/Request.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"The request of an HTTPInteraction — Request","text":"hash list","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Request.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"The request of an HTTPInteraction — Request","text":"new Request object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Request.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"The request of an HTTPInteraction — Request","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Request.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"The request of an HTTPInteraction — Request","text":"","code":"Request$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/vcr/reference/Request.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"The request of an HTTPInteraction — Request","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Request.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The request of an HTTPInteraction — Request","text":"","code":"url <- \"https://hb.opencpu.org/post\" body <- list(foo = \"bar\") headers <- list(   `User-Agent` = \"libcurl/7.54.0 r-curl/3.2 crul/0.5.2\",   `Accept-Encoding` = \"gzip, deflate\",   Accept = \"application/json, text/xml, application/xml, */*\" )  (x <- Request$new(\"POST\", url, body, headers)) #> <Request> #>   Public: #>     body: foo=bar #>     clone: function (deep = FALSE)  #>     disk: NULL #>     fields: NULL #>     from_hash: function (hash)  #>     hash: NULL #>     headers: list #>     host: hb.opencpu.org #>     initialize: function (method, uri, body, headers, opts, disk, fields, output,  #>     method: post #>     opts: NULL #>     output: NULL #>     path: post #>     query: NA #>     scheme: https #>     skip_port_stripping: FALSE #>     to_hash: function ()  #>     uri: https://hb.opencpu.org/post #>   Private: #>     parsed_uri: function (uri)  #>     without_standard_port: function (uri)  x$body #> [1] \"foo=bar\" x$method #> [1] \"post\" x$uri #> [1] \"https://hb.opencpu.org/post\" x$host #> [1] \"hb.opencpu.org\" x$path #> [1] \"post\" x$headers #> $`User-Agent` #> [1] \"libcurl/7.54.0 r-curl/3.2 crul/0.5.2\" #>  #> $`Accept-Encoding` #> [1] \"gzip, deflate\" #>  #> $Accept #> [1] \"application/json, text/xml, application/xml, */*\" #>  h <- x$to_hash() x$from_hash(h) #> <Request> #>   Public: #>     body: foo=bar #>     clone: function (deep = FALSE)  #>     disk: NULL #>     fields: NULL #>     from_hash: function (hash)  #>     hash: NULL #>     headers: list #>     host: hb.opencpu.org #>     initialize: function (method, uri, body, headers, opts, disk, fields, output,  #>     method: post #>     opts: NULL #>     output: NULL #>     path: post #>     query: NA #>     scheme: https #>     skip_port_stripping: FALSE #>     to_hash: function ()  #>     uri: https://hb.opencpu.org/post #>   Private: #>     parsed_uri: function (uri)  #>     without_standard_port: function (uri)"},{"path":"https://docs.ropensci.org/vcr/reference/RequestHandler.html","id":null,"dir":"Reference","previous_headings":"","what":"RequestHandler — RequestHandler","title":"RequestHandler — RequestHandler","text":"Base handler http requests, deciding whether request stubbed, ignored, recordable, unhandled","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestHandler.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"RequestHandler — RequestHandler","text":"Private Methods request_type(request) Get request type externally_stubbed() just returns FALSE should_ignore() ignore request, depends request ignorer infrastructure working yet has_response_stub() Check matching response stub http interaction list get_stubbed_response() Check response get request_summary(request) get request summary on_externally_stubbed_request(request) externally stubbed request nothing on_ignored_request(request) ignored request, something on_recordable_request(request) recordable request, record request on_unhandled_request(request) unhandled request, run UnhandledHTTPRequestError","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestHandler.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"RequestHandler — RequestHandler","text":"request_original original, modification request request, modification vcr_response holds VcrResponse object stubbed_response stubbed response cassette cassette holder","code":""},{"path":[]},{"path":"https://docs.ropensci.org/vcr/reference/RequestHandler.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"RequestHandler — RequestHandler","text":"RequestHandler$new() RequestHandler$handle() RequestHandler$clone()","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestHandler.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"RequestHandler — RequestHandler","text":"Create new RequestHandler object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestHandler.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RequestHandler — RequestHandler","text":"","code":"RequestHandler$new(request)"},{"path":"https://docs.ropensci.org/vcr/reference/RequestHandler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RequestHandler — RequestHandler","text":"request request object class HttpInteraction","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestHandler.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"RequestHandler — RequestHandler","text":"new RequestHandler object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestHandler.html","id":"method-handle-","dir":"Reference","previous_headings":"","what":"Method handle()","title":"RequestHandler — RequestHandler","text":"Handle request (request given $initialize())","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestHandler.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"RequestHandler — RequestHandler","text":"","code":"RequestHandler$handle()"},{"path":"https://docs.ropensci.org/vcr/reference/RequestHandler.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"RequestHandler — RequestHandler","text":"handles request, outcomes vary","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestHandler.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"RequestHandler — RequestHandler","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestHandler.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"RequestHandler — RequestHandler","text":"","code":"RequestHandler$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/vcr/reference/RequestHandler.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"RequestHandler — RequestHandler","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestHandler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RequestHandler — RequestHandler","text":"","code":"if (FALSE) { # record mode: once vcr_configure(  dir = tempdir(),  record = \"once\" )  data(crul_request) crul_request$url$handle <- curl::new_handle() crul_request x <- RequestHandler$new(crul_request) # x$handle()  # record mode: none vcr_configure(  dir = tempdir(),  record = \"none\" ) data(crul_request) crul_request$url$handle <- curl::new_handle() crul_request insert_cassette(\"testing_record_mode_none\", record = \"none\") #file.path(vcr_c$dir, \"testing_record_mode_none.yml\") x <- RequestHandlerCrul$new(crul_request) # x$handle() crul_request$url$url <- \"https://api.crossref.org/works/10.1039/c8sm90002g/\" crul_request$url$handle <- curl::new_handle() z <- RequestHandlerCrul$new(crul_request) # z$handle() eject_cassette(\"testing_record_mode_none\") }"},{"path":"https://docs.ropensci.org/vcr/reference/RequestHandlerCrul.html","id":null,"dir":"Reference","previous_headings":"","what":"RequestHandlerCrul — RequestHandlerCrul","title":"RequestHandlerCrul — RequestHandlerCrul","text":"Methods crul package, building RequestHandler","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestHandlerCrul.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"RequestHandlerCrul — RequestHandlerCrul","text":"vcr::RequestHandler -> RequestHandlerCrul","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestHandlerCrul.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"RequestHandlerCrul — RequestHandlerCrul","text":"vcr::RequestHandler$handle() vcr::RequestHandler$initialize()","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestHandlerCrul.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"RequestHandlerCrul — RequestHandlerCrul","text":"RequestHandlerCrul$clone()","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestHandlerCrul.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"RequestHandlerCrul — RequestHandlerCrul","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestHandlerCrul.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RequestHandlerCrul — RequestHandlerCrul","text":"","code":"RequestHandlerCrul$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/vcr/reference/RequestHandlerCrul.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RequestHandlerCrul — RequestHandlerCrul","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestHandlerCrul.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RequestHandlerCrul — RequestHandlerCrul","text":"","code":"if (FALSE) { vcr_configure(  dir = tempdir(),  record = \"once\" )  data(crul_request) crul_request$url$handle <- curl::new_handle() crul_request x <- RequestHandlerCrul$new(crul_request) # x$handle()  # body matching library(vcr) library(crul) vcr_configure(dir = tempdir(), log = TRUE,  log_opts = list(file = file.path(tempdir(), \"vcr.log\"))) cli <- HttpClient$new(url = \"https://hb.opencpu.org\")  ## testing, same uri and method, changed body in 2nd block use_cassette(name = \"apple7\", {   resp <- cli$post(\"post\", body = list(foo = \"bar\")) }, match_requests_on = c(\"method\", \"uri\", \"body\")) ## should error, b/c record=\"once\" if (interactive()) {   use_cassette(name = \"apple7\", {     resp <- cli$post(\"post\", body = list(foo = \"bar\"))     resp2 <- cli$post(\"post\", body = list(hello = \"world\"))   }, match_requests_on = c(\"method\", \"uri\", \"body\")) } cas <- insert_cassette(name = \"apple7\",    match_requests_on = c(\"method\", \"uri\", \"body\")) resp2 <- cli$post(\"post\", body = list(foo = \"bar\")) eject_cassette(\"apple7\")  ## testing, same body, changed method in 2nd block if (interactive()) { use_cassette(name = \"apple8\", {   x <- cli$post(\"post\", body = list(hello = \"world\")) }, match_requests_on = c(\"method\", \"body\")) use_cassette(name = \"apple8\", {   x <- cli$get(\"post\", body = list(hello = \"world\")) }, match_requests_on = c(\"method\", \"body\")) }  ## testing, same body, changed uri in 2nd block # use_cassette(name = \"apple9\", { #   x <- cli$post(\"post\", body = list(hello = \"world\")) #   w <- cli$post(\"get\", body = list(hello = \"world\")) # }, match_requests_on = c(\"method\", \"body\")) # use_cassette(name = \"apple9\", { #   NOTHING HERE # }, match_requests_on = c(\"method\", \"body\")) # unlink(file.path(vcr_configuration()$dir, \"apple9.yml\")) }"},{"path":"https://docs.ropensci.org/vcr/reference/RequestHandlerHttr.html","id":null,"dir":"Reference","previous_headings":"","what":"RequestHandlerHttr — RequestHandlerHttr","title":"RequestHandlerHttr — RequestHandlerHttr","text":"Methods httr package, building RequestHandler","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestHandlerHttr.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"RequestHandlerHttr — RequestHandlerHttr","text":"vcr::RequestHandler -> RequestHandlerHttr","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestHandlerHttr.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"RequestHandlerHttr — RequestHandlerHttr","text":"vcr::RequestHandler$handle()","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestHandlerHttr.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"RequestHandlerHttr — RequestHandlerHttr","text":"RequestHandlerHttr$new() RequestHandlerHttr$clone()","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestHandlerHttr.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"RequestHandlerHttr — RequestHandlerHttr","text":"Create new RequestHandlerHttr object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestHandlerHttr.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RequestHandlerHttr — RequestHandlerHttr","text":"","code":"RequestHandlerHttr$new(request)"},{"path":"https://docs.ropensci.org/vcr/reference/RequestHandlerHttr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RequestHandlerHttr — RequestHandlerHttr","text":"request request object class HttpInteraction","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestHandlerHttr.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"RequestHandlerHttr — RequestHandlerHttr","text":"new RequestHandlerHttr object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestHandlerHttr.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"RequestHandlerHttr — RequestHandlerHttr","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestHandlerHttr.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"RequestHandlerHttr — RequestHandlerHttr","text":"","code":"RequestHandlerHttr$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/vcr/reference/RequestHandlerHttr.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"RequestHandlerHttr — RequestHandlerHttr","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestHandlerHttr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RequestHandlerHttr — RequestHandlerHttr","text":"","code":"if (FALSE) { vcr_configure(  dir = tempdir(),  record = \"once\" )  # GET request library(httr) load(\"~/httr_req.rda\") req x <- RequestHandlerHttr$new(req) # x$handle()  # POST request library(httr) webmockr::httr_mock() mydir <- file.path(tempdir(), \"testing_httr\") invisible(vcr_configure(dir = mydir)) use_cassette(name = \"testing2\", {   res <- POST(\"https://hb.opencpu.org/post\", body = list(foo = \"bar\")) }, match_requests_on = c(\"method\", \"uri\", \"body\"))  load(\"~/httr_req_post.rda\") insert_cassette(\"testing3\") httr_req_post x <- RequestHandlerHttr$new(httr_req_post) x # x$handle() self=x  }"},{"path":"https://docs.ropensci.org/vcr/reference/RequestIgnorer.html","id":null,"dir":"Reference","previous_headings":"","what":"Request ignorer — RequestIgnorer","title":"Request ignorer — RequestIgnorer","text":"request ignorer methods","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestIgnorer.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Request ignorer — RequestIgnorer","text":"LOCALHOST_ALIASES constant values: 'localhost', '127.0.0.1', '0.0.0.0' ignored_hosts vector ignored host URI's","code":""},{"path":[]},{"path":"https://docs.ropensci.org/vcr/reference/RequestIgnorer.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Request ignorer — RequestIgnorer","text":"RequestIgnorer$new() RequestIgnorer$ignore_request() RequestIgnorer$ignore_localhost() RequestIgnorer$ignore_localhost_value() RequestIgnorer$ignore_hosts() RequestIgnorer$should_be_ignored() RequestIgnorer$clone()","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestIgnorer.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Request ignorer — RequestIgnorer","text":"Create new RequestIgnorer object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestIgnorer.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Request ignorer — RequestIgnorer","text":"","code":"RequestIgnorer$new()"},{"path":"https://docs.ropensci.org/vcr/reference/RequestIgnorer.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Request ignorer — RequestIgnorer","text":"new RequestIgnorer object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestIgnorer.html","id":"method-ignore-request-","dir":"Reference","previous_headings":"","what":"Method ignore_request()","title":"Request ignorer — RequestIgnorer","text":"ignore request given function returns TRUE","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestIgnorer.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Request ignorer — RequestIgnorer","text":"","code":"RequestIgnorer$ignore_request()"},{"path":"https://docs.ropensci.org/vcr/reference/RequestIgnorer.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Request ignorer — RequestIgnorer","text":"return; defines request ignorer hook","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestIgnorer.html","id":"method-ignore-localhost-","dir":"Reference","previous_headings":"","what":"Method ignore_localhost()","title":"Request ignorer — RequestIgnorer","text":"ignore localhost values (localhost, 127.0.0.1, 0.0.0.0)","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestIgnorer.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Request ignorer — RequestIgnorer","text":"","code":"RequestIgnorer$ignore_localhost()"},{"path":"https://docs.ropensci.org/vcr/reference/RequestIgnorer.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Request ignorer — RequestIgnorer","text":"return; sets ignore localhost aliases","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestIgnorer.html","id":"method-ignore-localhost-value-","dir":"Reference","previous_headings":"","what":"Method ignore_localhost_value()","title":"Request ignorer — RequestIgnorer","text":"ignore specific named localhost","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestIgnorer.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Request ignorer — RequestIgnorer","text":"","code":"RequestIgnorer$ignore_localhost_value(value)"},{"path":"https://docs.ropensci.org/vcr/reference/RequestIgnorer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Request ignorer — RequestIgnorer","text":"value (character) localhost value ignore, e.g., 'localhost'","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestIgnorer.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Request ignorer — RequestIgnorer","text":"return; defines request ignorer hook","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestIgnorer.html","id":"method-ignore-hosts-","dir":"Reference","previous_headings":"","what":"Method ignore_hosts()","title":"Request ignorer — RequestIgnorer","text":"ignore named host","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestIgnorer.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Request ignorer — RequestIgnorer","text":"","code":"RequestIgnorer$ignore_hosts(hosts)"},{"path":"https://docs.ropensci.org/vcr/reference/RequestIgnorer.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Request ignorer — RequestIgnorer","text":"hosts (character) vector hosts ignore","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestIgnorer.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Request ignorer — RequestIgnorer","text":"return; adds host ignore","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestIgnorer.html","id":"method-should-be-ignored-","dir":"Reference","previous_headings":"","what":"Method should_be_ignored()","title":"Request ignorer — RequestIgnorer","text":"method determine whether ignore request","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestIgnorer.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Request ignorer — RequestIgnorer","text":"","code":"RequestIgnorer$should_be_ignored(request)"},{"path":"https://docs.ropensci.org/vcr/reference/RequestIgnorer.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Request ignorer — RequestIgnorer","text":"request request ignore","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestIgnorer.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Request ignorer — RequestIgnorer","text":"return; defines request ignorer hook","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestIgnorer.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Request ignorer — RequestIgnorer","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestIgnorer.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Request ignorer — RequestIgnorer","text":"","code":"RequestIgnorer$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/vcr/reference/RequestIgnorer.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Request ignorer — RequestIgnorer","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestMatcherRegistry.html","id":null,"dir":"Reference","previous_headings":"","what":"RequestMatcherRegistry — RequestMatcherRegistry","title":"RequestMatcherRegistry — RequestMatcherRegistry","text":"handles request matchers","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestMatcherRegistry.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"RequestMatcherRegistry — RequestMatcherRegistry","text":"r1=new request; r2=recorded interaction","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestMatcherRegistry.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"RequestMatcherRegistry — RequestMatcherRegistry","text":"registry initialze registry list request, leave empty default_matchers request matchers use. default: method, uri","code":""},{"path":[]},{"path":"https://docs.ropensci.org/vcr/reference/RequestMatcherRegistry.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"RequestMatcherRegistry — RequestMatcherRegistry","text":"RequestMatcherRegistry$new() RequestMatcherRegistry$register() RequestMatcherRegistry$register_built_ins() RequestMatcherRegistry$try_to_register_body_as_json() RequestMatcherRegistry$clone()","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestMatcherRegistry.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"RequestMatcherRegistry — RequestMatcherRegistry","text":"Create new RequestMatcherRegistry object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestMatcherRegistry.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RequestMatcherRegistry — RequestMatcherRegistry","text":"","code":"RequestMatcherRegistry$new(   registry = list(),   default_matchers = list(\"method\", \"uri\") )"},{"path":"https://docs.ropensci.org/vcr/reference/RequestMatcherRegistry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RequestMatcherRegistry — RequestMatcherRegistry","text":"registry initialze registry list request, leave empty default_matchers request matchers use. default: method, uri","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestMatcherRegistry.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"RequestMatcherRegistry — RequestMatcherRegistry","text":"new RequestMatcherRegistry object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestMatcherRegistry.html","id":"method-register-","dir":"Reference","previous_headings":"","what":"Method register()","title":"RequestMatcherRegistry — RequestMatcherRegistry","text":"Register custom matcher","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestMatcherRegistry.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"RequestMatcherRegistry — RequestMatcherRegistry","text":"","code":"RequestMatcherRegistry$register(name, func)"},{"path":"https://docs.ropensci.org/vcr/reference/RequestMatcherRegistry.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"RequestMatcherRegistry — RequestMatcherRegistry","text":"name matcher name func function describes matcher, return single boolean","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestMatcherRegistry.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"RequestMatcherRegistry — RequestMatcherRegistry","text":"return; registers matcher","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestMatcherRegistry.html","id":"method-register-built-ins-","dir":"Reference","previous_headings":"","what":"Method register_built_ins()","title":"RequestMatcherRegistry — RequestMatcherRegistry","text":"Register built matchers","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestMatcherRegistry.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"RequestMatcherRegistry — RequestMatcherRegistry","text":"","code":"RequestMatcherRegistry$register_built_ins()"},{"path":"https://docs.ropensci.org/vcr/reference/RequestMatcherRegistry.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"RequestMatcherRegistry — RequestMatcherRegistry","text":"return; registers built matchers","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestMatcherRegistry.html","id":"method-try-to-register-body-as-json-","dir":"Reference","previous_headings":"","what":"Method try_to_register_body_as_json()","title":"RequestMatcherRegistry — RequestMatcherRegistry","text":"Try register body JSON","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestMatcherRegistry.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"RequestMatcherRegistry — RequestMatcherRegistry","text":"","code":"RequestMatcherRegistry$try_to_register_body_as_json(r1, r2)"},{"path":"https://docs.ropensci.org/vcr/reference/RequestMatcherRegistry.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"RequestMatcherRegistry — RequestMatcherRegistry","text":"r1, r2 Request class objects","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestMatcherRegistry.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"RequestMatcherRegistry — RequestMatcherRegistry","text":"return; registers matcher","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestMatcherRegistry.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"RequestMatcherRegistry — RequestMatcherRegistry","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestMatcherRegistry.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"RequestMatcherRegistry — RequestMatcherRegistry","text":"","code":"RequestMatcherRegistry$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/vcr/reference/RequestMatcherRegistry.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"RequestMatcherRegistry — RequestMatcherRegistry","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/RequestMatcherRegistry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RequestMatcherRegistry — RequestMatcherRegistry","text":"","code":"if (FALSE) { (x <- RequestMatcherRegistry$new()) x$default_matchers x$registry }"},{"path":"https://docs.ropensci.org/vcr/reference/Serializer.html","id":null,"dir":"Reference","previous_headings":"","what":"Serializer class - base class for JSON/YAML serializers — Serializer","title":"Serializer class - base class for JSON/YAML serializers — Serializer","text":"Serializer class - base class JSON/YAML serializers Serializer class - base class JSON/YAML serializers","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Serializer.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Serializer class - base class for JSON/YAML serializers — Serializer","text":"file_extension (character) file extension path (character) full path yaml file","code":""},{"path":[]},{"path":"https://docs.ropensci.org/vcr/reference/Serializer.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Serializer class - base class for JSON/YAML serializers — Serializer","text":"Serializer$new() Serializer$serialize() Serializer$deserialize() Serializer$clone()","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Serializer.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Serializer class - base class for JSON/YAML serializers — Serializer","text":"Create new YAML object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Serializer.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Serializer class - base class for JSON/YAML serializers — Serializer","text":"","code":"Serializer$new(file_extension = NULL, path = NULL)"},{"path":"https://docs.ropensci.org/vcr/reference/Serializer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Serializer class - base class for JSON/YAML serializers — Serializer","text":"file_extension (character) file extension path (character) path cassette, excluding cassette directory file extension","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Serializer.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Serializer class - base class for JSON/YAML serializers — Serializer","text":"new YAML object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Serializer.html","id":"method-serialize-","dir":"Reference","previous_headings":"","what":"Method serialize()","title":"Serializer class - base class for JSON/YAML serializers — Serializer","text":"Serializes hash - REPLACED YAML/JSON METHODS","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Serializer.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Serializer class - base class for JSON/YAML serializers — Serializer","text":"","code":"Serializer$serialize(x, path, bytes)"},{"path":"https://docs.ropensci.org/vcr/reference/Serializer.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Serializer class - base class for JSON/YAML serializers — Serializer","text":"x (list) object serialize path (character) file path bytes (logical) whether preserve exact body bytes ","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Serializer.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Serializer class - base class for JSON/YAML serializers — Serializer","text":"(character) YAML JSON string write disk","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Serializer.html","id":"method-deserialize-","dir":"Reference","previous_headings":"","what":"Method deserialize()","title":"Serializer class - base class for JSON/YAML serializers — Serializer","text":"Serializes file - REPLACED YAML/JSON METHODS","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Serializer.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Serializer class - base class for JSON/YAML serializers — Serializer","text":"","code":"Serializer$deserialize()"},{"path":"https://docs.ropensci.org/vcr/reference/Serializer.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Serializer class - base class for JSON/YAML serializers — Serializer","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Serializer.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Serializer class - base class for JSON/YAML serializers — Serializer","text":"","code":"Serializer$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/vcr/reference/Serializer.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Serializer class - base class for JSON/YAML serializers — Serializer","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Serializers.html","id":null,"dir":"Reference","previous_headings":"","what":"Cassette serializers — Serializers","title":"Cassette serializers — Serializers","text":"Keeps track cassette serializers hash-like object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Serializers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cassette serializers — Serializers","text":"","code":"serializer_fetch(x = \"yaml\", name)"},{"path":"https://docs.ropensci.org/vcr/reference/Serializers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cassette serializers — Serializers","text":"Private Methods serialize_get() Gets named serializer. also run Serializers$new()","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Serializers.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Cassette serializers — Serializers","text":"serializers (list) list serializer names name (character) Name serializer. \"yaml\" (default) \"json\"","code":""},{"path":[]},{"path":"https://docs.ropensci.org/vcr/reference/Serializers.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Cassette serializers — Serializers","text":"Serializers$new() Serializers$clone()","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Serializers.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Cassette serializers — Serializers","text":"Create new Serializers object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Serializers.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cassette serializers — Serializers","text":"","code":"Serializers$new(serializers = list(), name = \"yaml\")"},{"path":"https://docs.ropensci.org/vcr/reference/Serializers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cassette serializers — Serializers","text":"serializers (list) list serializer names name (character) Name serializer. \"yaml\" (default) \"json\"","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Serializers.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Cassette serializers — Serializers","text":"new Serializers object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Serializers.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Cassette serializers — Serializers","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Serializers.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Cassette serializers — Serializers","text":"","code":"Serializers$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/vcr/reference/Serializers.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cassette serializers — Serializers","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/Serializers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cassette serializers — Serializers","text":"","code":"if (FALSE) { (aa <- Serializers$new()) aa$name aa$serializers yaml_serializer <- aa$serializers$new() yaml_serializer  x <- Serializers$new(name = \"json\") x$serializers$new() json_serializer <- x$serializers$new() json_serializer }"},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":null,"dir":"Reference","previous_headings":"","what":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"Handle http request errors","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"","code":"vcr_last_error()"},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"error class used: record=\"\" trigger . Users can use vcr context use_cassette() insert_cassette() former, requests go call_block latter, requests go webmockr. one place can put UnhandledHTTPRequestError handle use_cassette insert_cassette?","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"error-situations-where-this-is-invoked","dir":"Reference","previous_headings":"","what":"Error situations where this is invoked","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"record=new request match one cassette disk webmockr: stub found recorded interactions cassette, record = , error UnhandledHTTPRequestError record != , allow , unless record == none others?","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"request Request object cassette cassette name","code":""},{"path":[]},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"UnhandledHTTPRequestError$new() UnhandledHTTPRequestError$run() UnhandledHTTPRequestError$construct_message() UnhandledHTTPRequestError$request_description() UnhandledHTTPRequestError$current_matchers() UnhandledHTTPRequestError$match_request_on_headers() UnhandledHTTPRequestError$match_request_on_body() UnhandledHTTPRequestError$formatted_headers() UnhandledHTTPRequestError$cassettes_description() UnhandledHTTPRequestError$cassettes_list() UnhandledHTTPRequestError$get_help() UnhandledHTTPRequestError$formatted_suggestions() UnhandledHTTPRequestError$format_bullet_point() UnhandledHTTPRequestError$format_foot_note() UnhandledHTTPRequestError$suggestion_for() UnhandledHTTPRequestError$suggestions() UnhandledHTTPRequestError$no_cassette_suggestions() UnhandledHTTPRequestError$record_mode_suggestion() UnhandledHTTPRequestError$has_used_interaction_matching() UnhandledHTTPRequestError$match_requests_on_suggestion() UnhandledHTTPRequestError$clone()","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"Create new UnhandledHTTPRequestError object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"","code":"UnhandledHTTPRequestError$new(request)"},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"request (Request) Request object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"new UnhandledHTTPRequestError object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"method-run-","dir":"Reference","previous_headings":"","what":"Method run()","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"Run unhandled request handling","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"","code":"UnhandledHTTPRequestError$run()"},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"various","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"method-construct-message-","dir":"Reference","previous_headings":"","what":"Method construct_message()","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"Construct execute stop message request failed","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"","code":"UnhandledHTTPRequestError$construct_message()"},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"stop message","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"method-request-description-","dir":"Reference","previous_headings":"","what":"Method request_description()","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"construct request description","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"","code":"UnhandledHTTPRequestError$request_description()"},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"character","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"method-current-matchers-","dir":"Reference","previous_headings":"","what":"Method current_matchers()","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"get current request matchers","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"","code":"UnhandledHTTPRequestError$current_matchers()"},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"character","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"method-match-request-on-headers-","dir":"Reference","previous_headings":"","what":"Method match_request_on_headers()","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"headers included current matchers?","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"","code":"UnhandledHTTPRequestError$match_request_on_headers()"},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"logical","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"method-match-request-on-body-","dir":"Reference","previous_headings":"","what":"Method match_request_on_body()","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"body includled current matchers?","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"","code":"UnhandledHTTPRequestError$match_request_on_body()"},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"logical","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"method-formatted-headers-","dir":"Reference","previous_headings":"","what":"Method formatted_headers()","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"get request headers","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"","code":"UnhandledHTTPRequestError$formatted_headers()"},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"character","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"method-cassettes-description-","dir":"Reference","previous_headings":"","what":"Method cassettes_description()","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"construct description current lack thereof cassettes","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"","code":"UnhandledHTTPRequestError$cassettes_description()"},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"character","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"method-cassettes-list-","dir":"Reference","previous_headings":"","what":"Method cassettes_list()","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"cassette details","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"","code":"UnhandledHTTPRequestError$cassettes_list()"},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"character","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"method-get-help-","dir":"Reference","previous_headings":"","what":"Method get_help()","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"get help message non-verbose error","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"","code":"UnhandledHTTPRequestError$get_help()"},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"returns-10","dir":"Reference","previous_headings":"","what":"Returns","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"character","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"method-formatted-suggestions-","dir":"Reference","previous_headings":"","what":"Method formatted_suggestions()","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"make suggestions ","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"","code":"UnhandledHTTPRequestError$formatted_suggestions()"},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"returns-11","dir":"Reference","previous_headings":"","what":"Returns","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"character","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"method-format-bullet-point-","dir":"Reference","previous_headings":"","what":"Method format_bullet_point()","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"add bullet point beginning line","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"","code":"UnhandledHTTPRequestError$format_bullet_point(lines, index)"},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"lines (character) vector strings index (integer) number","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"returns-12","dir":"Reference","previous_headings":"","what":"Returns","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"character","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"method-format-foot-note-","dir":"Reference","previous_headings":"","what":"Method format_foot_note()","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"make foot note","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"","code":"UnhandledHTTPRequestError$format_foot_note(url, index)"},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"url (character) url index (integer) number","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"returns-13","dir":"Reference","previous_headings":"","what":"Returns","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"character","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"method-suggestion-for-","dir":"Reference","previous_headings":"","what":"Method suggestion_for()","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"get suggestion key","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"","code":"UnhandledHTTPRequestError$suggestion_for(key)"},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"key (character) character string","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"returns-14","dir":"Reference","previous_headings":"","what":"Returns","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"character","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"method-suggestions-","dir":"Reference","previous_headings":"","what":"Method suggestions()","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"get suggestions","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"","code":"UnhandledHTTPRequestError$suggestions()"},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"returns-15","dir":"Reference","previous_headings":"","what":"Returns","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"list","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"method-no-cassette-suggestions-","dir":"Reference","previous_headings":"","what":"Method no_cassette_suggestions()","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"get cassette suggestions","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"","code":"UnhandledHTTPRequestError$no_cassette_suggestions()"},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"returns-16","dir":"Reference","previous_headings":"","what":"Returns","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"list","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"method-record-mode-suggestion-","dir":"Reference","previous_headings":"","what":"Method record_mode_suggestion()","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"get appropriate record mode suggestion","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"","code":"UnhandledHTTPRequestError$record_mode_suggestion()"},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"returns-17","dir":"Reference","previous_headings":"","what":"Returns","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"character","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"method-has-used-interaction-matching-","dir":"Reference","previous_headings":"","what":"Method has_used_interaction_matching()","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"used interactions","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"usage-18","dir":"Reference","previous_headings":"","what":"Usage","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"","code":"UnhandledHTTPRequestError$has_used_interaction_matching()"},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"returns-18","dir":"Reference","previous_headings":"","what":"Returns","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"logical","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"method-match-requests-on-suggestion-","dir":"Reference","previous_headings":"","what":"Method match_requests_on_suggestion()","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"match requests suggestion","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"usage-19","dir":"Reference","previous_headings":"","what":"Usage","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"","code":"UnhandledHTTPRequestError$match_requests_on_suggestion()"},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"returns-19","dir":"Reference","previous_headings":"","what":"Returns","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"list","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"usage-20","dir":"Reference","previous_headings":"","what":"Usage","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"","code":"UnhandledHTTPRequestError$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/UnhandledHTTPRequestError.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"UnhandledHTTPRequestError — UnhandledHTTPRequestError","text":"","code":"if (FALSE) { vcr_configure(dir = tempdir()) cassettes() insert_cassette(\"turtle\") request <- Request$new(\"post\", 'https://hb.opencpu.org/post?a=5',   \"\", list(foo = \"bar\"))  err <- UnhandledHTTPRequestError$new(request) err$request_description() err$current_matchers() err$match_request_on_headers() err$match_request_on_body() err$formatted_headers() cat(err$formatted_headers(), \"\\n\") cat(err$cassettes_description(), \"\\n\") cat(err$cassettes_list(), \"\\n\") err$formatted_suggestions() cat(err$format_bullet_point('foo bar', 1), \"\\n\") err$suggestion_for(\"use_new_episodes\") err$suggestions() err$no_cassette_suggestions() err$record_mode_suggestion() err$has_used_interaction_matching() err$match_requests_on_suggestion()  # err$construct_message()  # cleanup eject_cassette(\"turtle\") unlink(tempdir()) } if (FALSE) { # vcr_last_error() }"},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":null,"dir":"Reference","previous_headings":"","what":"The response of an HTTPInteraction — VcrResponse","title":"The response of an HTTPInteraction — VcrResponse","text":"Custom vcr http response object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"The response of an HTTPInteraction — VcrResponse","text":"status status response headers response headers body response body http_version HTTP version opts list adapter_metadata Additional metadata used specific VCR adapter hash list disk boolean","code":""},{"path":[]},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"The response of an HTTPInteraction — VcrResponse","text":"VcrResponse$new() VcrResponse$print() VcrResponse$to_hash() VcrResponse$from_hash() VcrResponse$update_content_length_header() VcrResponse$get_header() VcrResponse$edit_header() VcrResponse$delete_header() VcrResponse$content_encoding() VcrResponse$is_compressed() VcrResponse$clone()","code":""},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"The response of an HTTPInteraction — VcrResponse","text":"Create new VcrResponse object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The response of an HTTPInteraction — VcrResponse","text":"","code":"VcrResponse$new(   status,   headers,   body,   http_version,   opts,   adapter_metadata = NULL,   disk )"},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The response of an HTTPInteraction — VcrResponse","text":"status status response headers response headers body response body http_version HTTP version opts list adapter_metadata Additional metadata used specific VCR adapter disk boolean, body file disk","code":""},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"The response of an HTTPInteraction — VcrResponse","text":"new VcrResponse object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"The response of an HTTPInteraction — VcrResponse","text":"print method VcrResponse class","code":""},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"The response of an HTTPInteraction — VcrResponse","text":"","code":"VcrResponse$print(x, ...)"},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"The response of an HTTPInteraction — VcrResponse","text":"x self ... ignored","code":""},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"method-to-hash-","dir":"Reference","previous_headings":"","what":"Method to_hash()","title":"The response of an HTTPInteraction — VcrResponse","text":"Create hash","code":""},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"The response of an HTTPInteraction — VcrResponse","text":"","code":"VcrResponse$to_hash()"},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"The response of an HTTPInteraction — VcrResponse","text":"list","code":""},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"method-from-hash-","dir":"Reference","previous_headings":"","what":"Method from_hash()","title":"The response of an HTTPInteraction — VcrResponse","text":"Get hash back R list","code":""},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"The response of an HTTPInteraction — VcrResponse","text":"","code":"VcrResponse$from_hash(hash)"},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"The response of an HTTPInteraction — VcrResponse","text":"hash list","code":""},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"The response of an HTTPInteraction — VcrResponse","text":"VcrResponse object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"method-update-content-length-header-","dir":"Reference","previous_headings":"","what":"Method update_content_length_header()","title":"The response of an HTTPInteraction — VcrResponse","text":"Updates Content-Length response header accurate response body","code":""},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"The response of an HTTPInteraction — VcrResponse","text":"","code":"VcrResponse$update_content_length_header()"},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"The response of an HTTPInteraction — VcrResponse","text":"return; modifies content length header","code":""},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"method-get-header-","dir":"Reference","previous_headings":"","what":"Method get_header()","title":"The response of an HTTPInteraction — VcrResponse","text":"Get header name","code":""},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"The response of an HTTPInteraction — VcrResponse","text":"","code":"VcrResponse$get_header(key)"},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"The response of an HTTPInteraction — VcrResponse","text":"key (character) header name get","code":""},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"The response of an HTTPInteraction — VcrResponse","text":"header value (exists)","code":""},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"method-edit-header-","dir":"Reference","previous_headings":"","what":"Method edit_header()","title":"The response of an HTTPInteraction — VcrResponse","text":"Edit header","code":""},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"The response of an HTTPInteraction — VcrResponse","text":"","code":"VcrResponse$edit_header(key, value = NULL)"},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"The response of an HTTPInteraction — VcrResponse","text":"key (character) header name edit value (character) new value assign","code":""},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"The response of an HTTPInteraction — VcrResponse","text":"return; modifies header place","code":""},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"method-delete-header-","dir":"Reference","previous_headings":"","what":"Method delete_header()","title":"The response of an HTTPInteraction — VcrResponse","text":"Delete header","code":""},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"The response of an HTTPInteraction — VcrResponse","text":"","code":"VcrResponse$delete_header(key)"},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"The response of an HTTPInteraction — VcrResponse","text":"key (character) header name delete","code":""},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"The response of an HTTPInteraction — VcrResponse","text":"return; header deleted exists","code":""},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"method-content-encoding-","dir":"Reference","previous_headings":"","what":"Method content_encoding()","title":"The response of an HTTPInteraction — VcrResponse","text":"Get content-encoding header value","code":""},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"The response of an HTTPInteraction — VcrResponse","text":"","code":"VcrResponse$content_encoding()"},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"The response of an HTTPInteraction — VcrResponse","text":"(character) content-encoding value","code":""},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"method-is-compressed-","dir":"Reference","previous_headings":"","what":"Method is_compressed()","title":"The response of an HTTPInteraction — VcrResponse","text":"Checks encoding one \"gzip\" \"deflate\"","code":""},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"The response of an HTTPInteraction — VcrResponse","text":"","code":"VcrResponse$is_compressed()"},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"The response of an HTTPInteraction — VcrResponse","text":"logical","code":""},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"The response of an HTTPInteraction — VcrResponse","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"The response of an HTTPInteraction — VcrResponse","text":"","code":"VcrResponse$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"The response of an HTTPInteraction — VcrResponse","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/VcrResponse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The response of an HTTPInteraction — VcrResponse","text":"","code":"if (FALSE) { vcr_configure(dir = tempdir())  # basic example of VcrResponse use url <- \"https://google.com\" (cli <- crul::HttpClient$new(url = url)) (res <- cli$get(\"get\", query = list(q = \"stuff\"))) (x <- VcrResponse$new(res$status_http(), res$response_headers,    res$parse(\"UTF-8\"), res$response_headers$status)) x$body x$status x$headers x$http_version x$to_hash() x$from_hash(x$to_hash())  # update content length header ## example 1 ### content-length header present, but no change url <- \"https://fishbase.ropensci.org\" cli <- crul::HttpClient$new(url = url, headers = list(`Accept-Encoding` = '*')) res <- cli$get(\"species/34\") x <- VcrResponse$new(res$status_http(), res$response_headers,    res$parse(\"UTF-8\"), res$response_headers$status) x$headers$`content-length` x$update_content_length_header() x$headers$`content-length`  ## example 2 ### no content-length header b/c a transfer-encoding header is included ### and no content-length header allowed if transfer-encoding header ### used (via rfc7230) url <- \"https://google.com\" cli <- crul::HttpClient$new(url = url) res <- cli$get() x <- VcrResponse$new(res$status_http(), res$response_headers,    rawToChar(res$content), res$response_headers$status) x$headers$`content-length` # = NULL x$update_content_length_header() # no change, b/c header doesn't exist x$headers$`content-length` # = NULL  ## example 3 ### content-length header present, and does change body <- \" Hello World \" x <- VcrResponse$new(200, list('content-length'=nchar(body)),   body, \"HTTP/2\") x$headers$`content-length` # = 13 x$body <- gsub(\"^\\\\s|\\\\s$\", \"\", x$body) x$headers$`content-length` # = 13 x$update_content_length_header() x$headers$`content-length` # = 11  # check if body is compressed url <- \"https://fishbase.ropensci.org\" (cli <- crul::HttpClient$new(url = url)) (res <- cli$get(\"species/3\")) res$response_headers (x <- VcrResponse$new(res$status_http(), res$response_headers,    res$parse(\"UTF-8\"), res$response_headers$status)) x$content_encoding() x$is_compressed()  # with disk url <- \"https://google.com\" (cli <- crul::HttpClient$new(url = url)) f <- tempfile() (res <- cli$get(\"get\", query = list(q = \"stuff\"), disk = f)) (x <- VcrResponse$new(res$status_http(), res$response_headers,    f, res$response_headers$status, disk = TRUE)) }"},{"path":"https://docs.ropensci.org/vcr/reference/YAML.html","id":null,"dir":"Reference","previous_headings":"","what":"The YAML serializer — YAML","title":"The YAML serializer — YAML","text":"class methods serializing via yaml package","code":""},{"path":"https://docs.ropensci.org/vcr/reference/YAML.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"The YAML serializer — YAML","text":"vcr::Serializer -> YAML","code":""},{"path":[]},{"path":"https://docs.ropensci.org/vcr/reference/YAML.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"The YAML serializer — YAML","text":"YAML$new() YAML$serialize() YAML$deserialize() YAML$clone()","code":""},{"path":"https://docs.ropensci.org/vcr/reference/YAML.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"The YAML serializer — YAML","text":"Create new YAML object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/YAML.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The YAML serializer — YAML","text":"","code":"YAML$new(path = NULL)"},{"path":"https://docs.ropensci.org/vcr/reference/YAML.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The YAML serializer — YAML","text":"path (character) path cassette, excluding cassette directory file extension","code":""},{"path":"https://docs.ropensci.org/vcr/reference/YAML.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"The YAML serializer — YAML","text":"new YAML object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/YAML.html","id":"method-serialize-","dir":"Reference","previous_headings":"","what":"Method serialize()","title":"The YAML serializer — YAML","text":"Serializes given hash using internal fxn write_yaml","code":""},{"path":"https://docs.ropensci.org/vcr/reference/YAML.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"The YAML serializer — YAML","text":"","code":"YAML$serialize(x, path, bytes)"},{"path":"https://docs.ropensci.org/vcr/reference/YAML.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"The YAML serializer — YAML","text":"x (list) object serialize path (character) file path bytes (logical) whether preserve exact body bytes ","code":""},{"path":"https://docs.ropensci.org/vcr/reference/YAML.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"The YAML serializer — YAML","text":"(character) YAML string write disk","code":""},{"path":"https://docs.ropensci.org/vcr/reference/YAML.html","id":"method-deserialize-","dir":"Reference","previous_headings":"","what":"Method deserialize()","title":"The YAML serializer — YAML","text":"Deserializes content path using yaml::yaml.load_file","code":""},{"path":"https://docs.ropensci.org/vcr/reference/YAML.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"The YAML serializer — YAML","text":"","code":"YAML$deserialize(cassette)"},{"path":"https://docs.ropensci.org/vcr/reference/YAML.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"The YAML serializer — YAML","text":"cassette current cassette object properties can retrieved","code":""},{"path":"https://docs.ropensci.org/vcr/reference/YAML.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"The YAML serializer — YAML","text":"(list) deserialized object, R list","code":""},{"path":"https://docs.ropensci.org/vcr/reference/YAML.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"The YAML serializer — YAML","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/YAML.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"The YAML serializer — YAML","text":"","code":"YAML$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/vcr/reference/YAML.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"The YAML serializer — YAML","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/as.cassette.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce names, etc. to cassettes — as.cassette","title":"Coerce names, etc. to cassettes — as.cassette","text":"Coerce names, etc. cassettes Coerce cassette path","code":""},{"path":"https://docs.ropensci.org/vcr/reference/as.cassette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce names, etc. to cassettes — as.cassette","text":"","code":"as.cassette(x, ...)  as.cassettepath(x)"},{"path":"https://docs.ropensci.org/vcr/reference/as.cassette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce names, etc. to cassettes — as.cassette","text":"x Input, cassette name (character), something can coerced cassette ... arguments passed cassettes() [read_cassette_meta()","code":""},{"path":"https://docs.ropensci.org/vcr/reference/as.cassette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce names, etc. to cassettes — as.cassette","text":"cassette class Cassette","code":""},{"path":"https://docs.ropensci.org/vcr/reference/as.cassette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce names, etc. to cassettes — as.cassette","text":"","code":"if (FALSE) { vcr_configure(dir = tempfile()) insert_cassette(\"foobar\") cassettes(on_disk = FALSE) cassettes(on_disk = TRUE) as.cassette(\"foobar\", on_disk = FALSE) eject_cassette() # eject the current cassette  # cleanup unlink(file.path(tempfile(), \"foobar.yml\")) }"},{"path":"https://docs.ropensci.org/vcr/reference/cassettes.html","id":null,"dir":"Reference","previous_headings":"","what":"List cassettes, get current cassette, etc. — cassettes","title":"List cassettes, get current cassette, etc. — cassettes","text":"List cassettes, get current cassette, etc.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/cassettes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List cassettes, get current cassette, etc. — cassettes","text":"","code":"cassettes(on_disk = TRUE, verb = FALSE)  current_cassette()  cassette_path()"},{"path":"https://docs.ropensci.org/vcr/reference/cassettes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List cassettes, get current cassette, etc. — cassettes","text":"on_disk (logical) Check cassettes disk + cassettes session (TRUE), check cassettes session (FALSE). Default: TRUE verb (logical) verbose messages","code":""},{"path":"https://docs.ropensci.org/vcr/reference/cassettes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List cassettes, get current cassette, etc. — cassettes","text":"cassettes(): returns cassettes found R session, can toggle whether pull disk current_cassette(): returns empty list cassettes use, returns current cassette (Cassette object) one use cassette_path(): just gives current directory path cassettes stored","code":""},{"path":"https://docs.ropensci.org/vcr/reference/cassettes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List cassettes, get current cassette, etc. — cassettes","text":"","code":"vcr_configure(dir = tempdir()) #> <vcr configuration> #>   Cassette Dir: /tmp/RtmpbSjnZa #>   Record: once #>   Serialize with: yaml #>   URI Parser: crul::url_parse #>   Match Requests on: method, uri #>   Preserve Bytes?: FALSE #>   Logging?: FALSE #>   ignored hosts:  #>   ignore localhost?: FALSE #>   Write disk path:   # list all cassettes cassettes() #> list() cassettes(on_disk = FALSE) #> list()  # list the currently active cassette insert_cassette(\"stuffthings\") #> <vcr - Cassette> stuffthings #>   Record method: once #>   Serialize with: yaml #>   Persist with: FileSystem #>   Re-record interval (s):  #>   Clean outdated interactions?: FALSE #>   update_content_length_header: FALSE #>   allow_playback_repeats: FALSE #>   allow_unused_http_interactions:  #>   exclusive:  #>   preserve_exact_body_bytes: FALSE current_cassette() #> <vcr - Cassette> stuffthings #>   Record method: once #>   Serialize with: yaml #>   Persist with: FileSystem #>   Re-record interval (s):  #>   Clean outdated interactions?: FALSE #>   update_content_length_header: FALSE #>   allow_playback_repeats: FALSE #>   allow_unused_http_interactions:  #>   exclusive:  #>   preserve_exact_body_bytes: FALSE eject_cassette() #> Warning: Empty cassette (stuffthings) deleted; consider the following: #>  - If an error occurred resolve that first, then check: #>  - vcr only supports crul & httr; requests w/ curl, download.file, etc. are not supported #>  - If you are using crul/httr, are you sure you made an HTTP request? #> net connect disabled #> <vcr - Cassette> stuffthings #>   Record method: once #>   Serialize with: yaml #>   Persist with: FileSystem #>   Re-record interval (s):  #>   Clean outdated interactions?: FALSE #>   update_content_length_header: FALSE #>   allow_playback_repeats: FALSE #>   allow_unused_http_interactions:  #>   exclusive:  #>   preserve_exact_body_bytes: FALSE  cassettes() #> list() cassettes(on_disk = FALSE) #> list()  # list the path to cassettes cassette_path() #> [1] \"/tmp/RtmpbSjnZa\" vcr_configure(dir = file.path(tempdir(), \"foo\")) #> <vcr configuration> #>   Cassette Dir: /tmp/RtmpbSjnZa/foo #>   Record: once #>   Serialize with: yaml #>   URI Parser: crul::url_parse #>   Match Requests on: method, uri #>   Preserve Bytes?: FALSE #>   Logging?: FALSE #>   ignored hosts:  #>   ignore localhost?: FALSE #>   Write disk path:  cassette_path() #> [1] \"/tmp/RtmpbSjnZa/foo\"  vcr_configure_reset()"},{"path":"https://docs.ropensci.org/vcr/reference/check_cassette_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Check cassette names — check_cassette_names","title":"Check cassette names — check_cassette_names","text":"Check cassette names","code":""},{"path":"https://docs.ropensci.org/vcr/reference/check_cassette_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check cassette names — check_cassette_names","text":"","code":"check_cassette_names(   pattern = \"test-\",   behavior = \"stop\",   allowed_duplicates = NULL )"},{"path":"https://docs.ropensci.org/vcr/reference/check_cassette_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check cassette names — check_cassette_names","text":"pattern (character) regex pattern file paths check. done inside tests/testthat/. default: \"test-\" behavior (character) \"stop\" (default) \"warning\". \"warning\", use immediate.=TRUE warning happens top tests rather seeing tests run (happen default) allowed_duplicates (character) cassette names can duplicated","code":""},{"path":"https://docs.ropensci.org/vcr/reference/check_cassette_names.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check cassette names — check_cassette_names","text":"Cassette names: meaningful obvious test/function relate . Meaningful names important can quickly determine test file test block cassette belongs. Note vcr check cassette names meaningful. duplicated. Duplicated cassette names lead test using wrong cassette. spaces. Spaces can lead problems using file paths. include file extension. vcr handles file extensions user. illegal characters can lead problems using file paths: /, ?, <, >, \\, :, *, |, \\\" control characters, e.g., \\n just dots, e.g., . .. Windows reserved words, e.g., com1 trailing dots longer 255 characters vcr::check_cassette_names() meant run tests, helper-*.R file inside tests/testthat directory. checks cassette names duplicated. Note need duplicated cassette names can using allowed_duplicates parameter check_cassette_names(). helper function check_cassette_names() runs inside insert_cassette() checks cassettes : spaces, file extensions, unaccepted characters (slashes).","code":""},{"path":"https://docs.ropensci.org/vcr/reference/crul_request.html","id":null,"dir":"Reference","previous_headings":"","what":"An HTTP request as prepared by the crul package — crul_request","title":"An HTTP request as prepared by the crul package — crul_request","text":"object list, object passed webmockr vcr instead routing crul normal. Used examples/tests.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/crul_request.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"An HTTP request as prepared by the crul package — crul_request","text":"list","code":""},{"path":"https://docs.ropensci.org/vcr/reference/eject_cassette.html","id":null,"dir":"Reference","previous_headings":"","what":"Eject a cassette — eject_cassette","title":"Eject a cassette — eject_cassette","text":"Eject cassette","code":""},{"path":"https://docs.ropensci.org/vcr/reference/eject_cassette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Eject a cassette — eject_cassette","text":"","code":"eject_cassette(   cassette = NULL,   options = list(),   skip_no_unused_interactions_assertion = NULL )"},{"path":"https://docs.ropensci.org/vcr/reference/eject_cassette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Eject a cassette — eject_cassette","text":"cassette (character) single cassette names eject; see name parameter definition insert_cassette() cassette name rules options (list) list options apply eject process skip_no_unused_interactions_assertion (logical) TRUE, skip \"unused HTTP interactions\" assertion enabled allow_unused_http_interactions = FALSE cassette option. intended use test error, test framework already handled - IGNORED NOW","code":""},{"path":"https://docs.ropensci.org/vcr/reference/eject_cassette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Eject a cassette — eject_cassette","text":"ejected cassette one","code":""},{"path":[]},{"path":"https://docs.ropensci.org/vcr/reference/eject_cassette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Eject a cassette — eject_cassette","text":"","code":"vcr_configure(dir = tempdir()) #> <vcr configuration> #>   Cassette Dir: /tmp/RtmpbSjnZa #>   Record: once #>   Serialize with: yaml #>   URI Parser: crul::url_parse #>   Match Requests on: method, uri #>   Preserve Bytes?: FALSE #>   Logging?: FALSE #>   ignored hosts:  #>   ignore localhost?: FALSE #>   Write disk path:  insert_cassette(\"hello\") #> <vcr - Cassette> hello #>   Record method: once #>   Serialize with: yaml #>   Persist with: FileSystem #>   Re-record interval (s):  #>   Clean outdated interactions?: FALSE #>   update_content_length_header: FALSE #>   allow_playback_repeats: FALSE #>   allow_unused_http_interactions:  #>   exclusive:  #>   preserve_exact_body_bytes: FALSE (x <- current_cassette()) #> <vcr - Cassette> hello #>   Record method: once #>   Serialize with: yaml #>   Persist with: FileSystem #>   Re-record interval (s):  #>   Clean outdated interactions?: FALSE #>   update_content_length_header: FALSE #>   allow_playback_repeats: FALSE #>   allow_unused_http_interactions:  #>   exclusive:  #>   preserve_exact_body_bytes: FALSE  # by default does current cassette x <- eject_cassette() #> Warning: Empty cassette (hello) deleted; consider the following: #>  - If an error occurred resolve that first, then check: #>  - vcr only supports crul & httr; requests w/ curl, download.file, etc. are not supported #>  - If you are using crul/httr, are you sure you made an HTTP request? #> net connect disabled x #> <vcr - Cassette> hello #>   Record method: once #>   Serialize with: yaml #>   Persist with: FileSystem #>   Re-record interval (s):  #>   Clean outdated interactions?: FALSE #>   update_content_length_header: FALSE #>   allow_playback_repeats: FALSE #>   allow_unused_http_interactions:  #>   exclusive:  #>   preserve_exact_body_bytes: FALSE # can also select by cassette name # eject_cassette(cassette = \"hello\")"},{"path":"https://docs.ropensci.org/vcr/reference/http_interactions.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the http interactions of the current cassette — http_interactions","title":"Get the http interactions of the current cassette — http_interactions","text":"Get http interactions current cassette","code":""},{"path":"https://docs.ropensci.org/vcr/reference/http_interactions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the http interactions of the current cassette — http_interactions","text":"","code":"http_interactions()"},{"path":"https://docs.ropensci.org/vcr/reference/http_interactions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the http interactions of the current cassette — http_interactions","text":"object class HTTPInteractionList current cassette use, NullList cassette use","code":""},{"path":"https://docs.ropensci.org/vcr/reference/http_interactions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the http interactions of the current cassette — http_interactions","text":"","code":"if (FALSE) { vcr_configure(dir = tempdir()) insert_cassette(\"foo_bar\") webmockr::webmockr_allow_net_connect() library(crul) cli <- crul::HttpClient$new(\"https://hb.opencpu.org/get\") one <- cli$get(query = list(a = 5)) z <- http_interactions() z z$interactions z$used_interactions # on eject, request written to the cassette eject_cassette(\"foo_bar\")  # insert cassette again insert_cassette(\"foo_bar\") # now interactions will be present  z <- http_interactions() z$interactions z$used_interactions invisible(cli$get(query = list(a = 5))) z$used_interactions  # cleanup unlink(file.path(tempdir(), \"foo_bar.yml\")) }"},{"path":"https://docs.ropensci.org/vcr/reference/insert_cassette.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert a cassette to record HTTP requests — insert_cassette","title":"Insert a cassette to record HTTP requests — insert_cassette","text":"Insert cassette record HTTP requests","code":""},{"path":"https://docs.ropensci.org/vcr/reference/insert_cassette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert a cassette to record HTTP requests — insert_cassette","text":"","code":"insert_cassette(   name,   record = NULL,   match_requests_on = NULL,   update_content_length_header = FALSE,   allow_playback_repeats = FALSE,   serialize_with = NULL,   persist_with = NULL,   preserve_exact_body_bytes = NULL,   re_record_interval = NULL,   clean_outdated_http_interactions = NULL )"},{"path":"https://docs.ropensci.org/vcr/reference/insert_cassette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert a cassette to record HTTP requests — insert_cassette","text":"name name cassette. vcr check ensure valid file name. allowed: spaces, file extensions, control characters (e.g., \\n), illegal characters ('/', '?', '<', '>', '\\', ':', '*', '|', '\\\"'), dots alone (e.g., '.', '..'), Windows reserved words (e.g., 'com1'), trailing dots (can cause problems Windows), names longer 255 characters. See section \"Cassette names\" record record mode (default: \"\"). See recording complete list different recording modes. match_requests_on List request matchers use determine recorded HTTP interaction replay. Defaults [\"method\", \"uri\"]. built-matchers \"method\", \"uri\", \"host\", \"path\", \"headers\", \"body\" \"query\" update_content_length_header (logical) Whether overwrite Content-Length header responses match length response body. Default: FALSE allow_playback_repeats (logical) Whether allow single HTTP interaction played back multiple times. Default: FALSE. serialize_with (character) serializer use. Valid values \"yaml\" (default) \"json\". Note can multiple cassettes name long use different serializers; want one cassette given cassette name, make sure switch serializers, clean files longer need. persist_with (character) cassette persister use. Default: \"file_system\". can also register use custom persister. preserve_exact_body_bytes (logical) Whether base64 encode bytes requests responses cassette serializing . See also preserve_exact_body_bytes vcr_configure(). Default: FALSE re_record_interval (integer) frequently (seconds) cassette re-recorded. default: NULL (re-recorded) clean_outdated_http_interactions (logical) outdated interactions recorded back file? default: FALSE","code":""},{"path":"https://docs.ropensci.org/vcr/reference/insert_cassette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert a cassette to record HTTP requests — insert_cassette","text":"object class Cassette","code":""},{"path":"https://docs.ropensci.org/vcr/reference/insert_cassette.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Insert a cassette to record HTTP requests — insert_cassette","text":"Cassette names: meaningful obvious test/function relate . Meaningful names important can quickly determine test file test block cassette belongs. Note vcr check cassette names meaningful. duplicated. Duplicated cassette names lead test using wrong cassette. spaces. Spaces can lead problems using file paths. include file extension. vcr handles file extensions user. illegal characters can lead problems using file paths: /, ?, <, >, \\, :, *, |, \\\" control characters, e.g., \\n just dots, e.g., . .. Windows reserved words, e.g., com1 trailing dots longer 255 characters vcr::check_cassette_names() meant run tests, helper-*.R file inside tests/testthat directory. checks cassette names duplicated. Note need duplicated cassette names can using allowed_duplicates parameter check_cassette_names(). helper function check_cassette_names() runs inside insert_cassette() checks cassettes : spaces, file extensions, unaccepted characters (slashes).","code":""},{"path":"https://docs.ropensci.org/vcr/reference/insert_cassette.html","id":"cassette-options","dir":"Reference","previous_headings":"","what":"Cassette options","title":"Insert a cassette to record HTTP requests — insert_cassette","text":"Default values arguments controlling cassette behavior inherited vcr's global configuration. See vcr_configure() complete list options default settings. can override options specific cassette changing argument's value something NULL calling either insert_cassette() use_cassette().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/vcr/reference/insert_cassette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Insert a cassette to record HTTP requests — insert_cassette","text":"","code":"if (FALSE) { library(vcr) library(crul) vcr_configure(dir = tempdir()) webmockr::webmockr_allow_net_connect()  (x <- insert_cassette(name = \"leo5\")) current_cassette() x$new_recorded_interactions x$previously_recorded_interactions() cli <- crul::HttpClient$new(url = \"https://hb.opencpu.org\") cli$get(\"get\") x$new_recorded_interactions # 1 interaction x$previously_recorded_interactions() # empty webmockr::stub_registry() # not empty # very important when using inject_cassette: eject when done x$eject() # same as eject_cassette(\"leo5\") x$new_recorded_interactions # same, 1 interaction x$previously_recorded_interactions() # now not empty ## stub_registry now empty, eject() calls webmockr::disable(), which ## calls the disable method for each of crul and httr adadapters, ## which calls webmockr's remove_stubs() method for each adapter webmockr::stub_registry()  # cleanup unlink(file.path(tempdir(), \"leo5.yml\")) }"},{"path":"https://docs.ropensci.org/vcr/reference/lightswitch.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn vcr on and off, check on/off status, and turn off for a given http call — lightswitch","title":"Turn vcr on and off, check on/off status, and turn off for a given http call — lightswitch","text":"Turn vcr , check /status, turn given http call","code":""},{"path":"https://docs.ropensci.org/vcr/reference/lightswitch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn vcr on and off, check on/off status, and turn off for a given http call — lightswitch","text":"","code":"turned_off(..., ignore_cassettes = FALSE)  turn_on()  turned_on()  turn_off(ignore_cassettes = FALSE)"},{"path":"https://docs.ropensci.org/vcr/reference/lightswitch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn vcr on and off, check on/off status, and turn off for a given http call — lightswitch","text":"... block code run, presumably http request ignore_cassettes (logical) Controls happens cassette inserted vcr turned . TRUE passed, cassette insertion ignored; otherwise error raised. Default: FALSE","code":""},{"path":"https://docs.ropensci.org/vcr/reference/lightswitch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Turn vcr on and off, check on/off status, and turn off for a given http call — lightswitch","text":"Sometimes may need turn vcr, either individual function calls, individual test blocks, whole test files, entire package. following attempts break options. vcr following four exported functions: turned_off() - Turns vcr duration code block turn_off() - Turns vcr completely, longer handles every HTTP request turn_on() - turns vcr ; opposite turn_off() turned_on() - Asks vcr turned , returns boolean Instead using four functions, use environment variables achieve thing. way enable/disable vcr non-interactive environments continuous integration, Docker containers, running R non-interactively command line. full set environment variables vcr uses, accept TRUE FALSE: VCR_TURN_OFF: turn vcr altogether; set TRUE skip vcr usage; default: FALSE VCR_TURNED_OFF: set turned_off internal package setting; turn vcr completely VCR_TURN_OFF , rather looked together VCR_IGNORE_CASSETTES VCR_IGNORE_CASSETTES: set ignore_cassettes internal package setting; looked together VCR_TURNED_OFF","code":""},{"path":"https://docs.ropensci.org/vcr/reference/lightswitch.html","id":"turned-off","dir":"Reference","previous_headings":"","what":"turned_off","title":"Turn vcr on and off, check on/off status, and turn off for a given http call — lightswitch","text":"turned_off() lets temporarily make real HTTP request without completely turning vcr , unloading , etc. happens internally turn vcr, run code block, exit turn vcr back - vcr turned duration code block. Even code block errors, vcr turned back due use .exit(turn_on())","code":"library(vcr) library(crul) turned_off({   con <- HttpClient$new(url = \"https://httpbin.org/get\")   con$get() }) #> <crul response> #>   url: https://httpbin.org/get #>   request_headers: #>     User-Agent: libcurl/7.54.0 r-curl/4.3 crul/0.9.0 #>     Accept-Encoding: gzip, deflate #>     Accept: application/json, text/xml, application/xml, */* #>   response_headers: #>     status: HTTP/1.1 200 OK #>     date: Fri, 14 Feb 2020 19:44:46 GMT #>     content-type: application/json #>     content-length: 365 #>     connection: keep-alive #>     server: gunicorn/19.9.0 #>     access-control-allow-origin: * #>     access-control-allow-credentials: true #>   status: 200"},{"path":"https://docs.ropensci.org/vcr/reference/lightswitch.html","id":"turn-off-turn-on","dir":"Reference","previous_headings":"","what":"turn_off/turn_on","title":"Turn vcr on and off, check on/off status, and turn off for a given http call — lightswitch","text":"turn_off() different turned_off() turn_off() aimed single call block, rather turns vcr entire package. turn_off() check first turning vcr currently cassette use. turn_off() meant make R ignore vcr::insert_cassette() vcr::use_cassette() blocks test suite - letting code block run wrapped vcr code - run tests cached requests/responses real HTTP requests toggle single R function environment variable.","code":"library(vcr) vcr_configure(dir = tempdir()) # real HTTP request works - vcr is not engaged here crul::HttpClient$new(url = \"https://eu.httpbin.org/get\")$get() # wrap HTTP request in use_cassette() - vcr is engaged here use_cassette(\"foo_bar\", {   crul::HttpClient$new(url = \"https://eu.httpbin.org/get\")$get() }) # turn off & ignore cassettes - use_cassette is ignored, real HTTP request made turn_off(ignore_cassettes = TRUE) use_cassette(\"foo_bar\", {   crul::HttpClient$new(url = \"https://eu.httpbin.org/get\")$get() }) # if you turn off and don't ignore cassettes, error thrown turn_off(ignore_cassettes = FALSE) use_cassette(\"foo_bar\", {   res2=crul::HttpClient$new(url = \"https://eu.httpbin.org/get\")$get() }) # vcr back on - now use_cassette behaves as before turn_on() use_cassette(\"foo_bar3\", {   res2=crul::HttpClient$new(url = \"https://eu.httpbin.org/get\")$get() })"},{"path":"https://docs.ropensci.org/vcr/reference/lightswitch.html","id":"turned-on","dir":"Reference","previous_headings":"","what":"turned_on","title":"Turn vcr on and off, check on/off status, and turn off for a given http call — lightswitch","text":"turned_on() says tin - tells vcr turned .","code":"library(vcr) turn_on() turned_on() ## [1] TRUE turn_off() ## vcr turned off; see ?turn_on to turn vcr back on turned_on() ## [1] FALSE"},{"path":"https://docs.ropensci.org/vcr/reference/lightswitch.html","id":"environment-variables","dir":"Reference","previous_headings":"","what":"Environment variables","title":"Turn vcr on and off, check on/off status, and turn off for a given http call — lightswitch","text":"VCR_TURN_OFF environment variable can used within R command line turn vcr. example, can run tests package uses vcr, ignore use_cassette/insert_cassette usage, running command line root package:   , similarly within R:   VCR_TURNED_OFF VCR_IGNORE_CASSETTES environment variables can used combination achieve thing VCR_TURN_OFF:","code":"VCR_TURN_OFF=true Rscript -e \"devtools::test()\" Sys.setenv(VCR_TURN_OFF = TRUE) devtools::test() VCR_TURNED_OFF=true VCR_IGNORE_CASSETTES=true Rscript -e \"devtools::test()\""},{"path":"https://docs.ropensci.org/vcr/reference/lightswitch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn vcr on and off, check on/off status, and turn off for a given http call — lightswitch","text":"","code":"if (FALSE) { vcr_configure(dir = tempdir())  turn_on() turned_on() turn_off()  # turn off for duration of a block library(crul) turned_off({  res <- HttpClient$new(url = \"https://hb.opencpu.org/get\")$get() }) res  # turn completely off turn_off() library(webmockr) crul::mock() # HttpClient$new(url = \"https://hb.opencpu.org/get\")$get(verbose = TRUE) turn_on() }"},{"path":"https://docs.ropensci.org/vcr/reference/real_http_connections_allowed.html","id":null,"dir":"Reference","previous_headings":"","what":"Are real http connections allowed? — real_http_connections_allowed","title":"Are real http connections allowed? — real_http_connections_allowed","text":"real http connections allowed?","code":""},{"path":"https://docs.ropensci.org/vcr/reference/real_http_connections_allowed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Are real http connections allowed? — real_http_connections_allowed","text":"","code":"real_http_connections_allowed()"},{"path":"https://docs.ropensci.org/vcr/reference/real_http_connections_allowed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Are real http connections allowed? — real_http_connections_allowed","text":"boolean, TRUE real HTTP requests allowed; FALSE ","code":""},{"path":"https://docs.ropensci.org/vcr/reference/real_http_connections_allowed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Are real http connections allowed? — real_http_connections_allowed","text":"","code":"real_http_connections_allowed() #> [1] FALSE"},{"path":"https://docs.ropensci.org/vcr/reference/recording.html","id":null,"dir":"Reference","previous_headings":"","what":"vcr recording options — recording","title":"vcr recording options — recording","text":"vcr recording options","code":""},{"path":"https://docs.ropensci.org/vcr/reference/recording.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"vcr recording options — recording","text":"Record modes dictate circumstances http requests/responses recorded cassettes (disk). Set recording mode parameter record use_cassette() insert_cassette() functions.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/recording.html","id":"once","dir":"Reference","previous_headings":"","what":"once","title":"vcr recording options — recording","text":"record mode : Replay previously recorded interactions. Record new interactions cassette file. Cause error raised new requests cassette file. similar new_episodes record mode, prevent new, unexpected requests made (.e. request URI changed whatever). default record mode, used set one.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/recording.html","id":"none","dir":"Reference","previous_headings":"","what":"none","title":"vcr recording options — recording","text":"none record mode : Replay previously recorded interactions. Cause error raised new requests. useful code makes potentially dangerous HTTP requests. none record mode guarantees new HTTP requests made.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/recording.html","id":"new-episodes","dir":"Reference","previous_headings":"","what":"new_episodes","title":"vcr recording options — recording","text":"new_episodes record mode : Record new interactions. Replay previously recorded interactions. similar record mode, always record new interactions, even existing recorded one similar (identical, based match_request_on option).","code":""},{"path":"https://docs.ropensci.org/vcr/reference/recording.html","id":"all","dir":"Reference","previous_headings":"","what":"all","title":"vcr recording options — recording","text":"record mode : Record new interactions. Never replay previously recorded interactions. can temporarily used force vcr re-record cassette (.e. ensure responses date) can used simply want log HTTP requests.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/request-matching.html","id":null,"dir":"Reference","previous_headings":"","what":"vcr request matching — request-matching","title":"vcr request matching — request-matching","text":"number options, default, can used together, alone.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/request-matching.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"vcr request matching — request-matching","text":"match previously recorded requests, vcr try match new HTTP requests previously recorded one. default, match HTTP method (e.g., GET) URI (e.g., http://foo.com), following Ruby’s VCR gem. can customize match requests one following options, default, can used together, alone. method: Use method request matcher match requests HTTP method (.e. GET, POST, PUT, DELETE, etc). generally want use matcher. method matcher used (along uri matcher) default specify requests match. uri: Use uri request matcher match requests request URI. uri matcher used (along method matcher) default specify requests match. host: Use host request matcher match requests request host. can use (alone, combination path) alternative uri non-deterministic portions URI considered part request matching. path: Use path request matcher match requests path portion request URI. can use (alone, combination host) alternative uri non-deterministic portions URI query: Use query request matcher match requests query string portion request URI. can use (alone, combination others) alternative uri non-deterministic portions URI considered part request matching. body: Use body request matcher match requests request body. headers: Use headers request matcher match requests request headers. can set options tweaking match_requests_on parameter use_cassette():","code":"library(vcr) use_cassette(name = \"foo_bar\", {     cli$post(\"post\", body = list(a = 5))   },    match_requests_on = c('method', 'headers', 'body') )"},{"path":[]},{"path":"https://docs.ropensci.org/vcr/reference/request-matching.html","id":"headers","dir":"Reference","previous_headings":"","what":"headers","title":"vcr request matching — request-matching","text":"","code":"library(crul) library(vcr) cli <- crul::HttpClient$new(\"https://httpbin.org/get\",    headers = list(foo = \"bar\")) use_cassette(name = \"nothing_new\", {     one <- cli$get()   },    match_requests_on = 'headers' ) cli$headers$foo <- \"stuff\" use_cassette(name = \"nothing_new\", {     two <- cli$get()   },    match_requests_on = 'headers' ) one$request_headers two$request_headers"},{"path":"https://docs.ropensci.org/vcr/reference/request_response.html","id":null,"dir":"Reference","previous_headings":"","what":"request and response summary methods — request_response","title":"request and response summary methods — request_response","text":"request response summary methods","code":""},{"path":"https://docs.ropensci.org/vcr/reference/request_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"request and response summary methods — request_response","text":"","code":"request_summary(request, request_matchers = \"\")  response_summary(response)"},{"path":"https://docs.ropensci.org/vcr/reference/request_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"request and response summary methods — request_response","text":"request Request object request_matchers (character) vector matchers. Default: \"\" response VcrResponse object","code":""},{"path":"https://docs.ropensci.org/vcr/reference/request_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"request and response summary methods — request_response","text":"character string, either request response","code":""},{"path":"https://docs.ropensci.org/vcr/reference/request_response.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"request and response summary methods — request_response","text":"default, method uri included request summary - body /headers specified request_matchers, also included HTTP status code response body included response summary. response body truncated max 80 characters response_summary() use gsub useBytes=TRUE avoid problems sometimes seen multibyte strings - affect data/etc. printing summary response","code":""},{"path":"https://docs.ropensci.org/vcr/reference/request_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"request and response summary methods — request_response","text":"","code":"# request url <- \"https://hb.opencpu.org\" body <- list(foo = \"bar\") headers <- list(   `User-Agent` = \"r-curl/3.2\",   `Accept-Encoding` = \"gzip, deflate\",   Accept = \"application/json\" )  (x <- Request$new(\"POST\", url, body, headers)) #> <Request> #>   Public: #>     body: foo=bar #>     clone: function (deep = FALSE)  #>     disk: NULL #>     fields: NULL #>     from_hash: function (hash)  #>     hash: NULL #>     headers: list #>     host: hb.opencpu.org #>     initialize: function (method, uri, body, headers, opts, disk, fields, output,  #>     method: post #>     opts: NULL #>     output: NULL #>     path: NA #>     query: NA #>     scheme: https #>     skip_port_stripping: FALSE #>     to_hash: function ()  #>     uri: https://hb.opencpu.org/ #>   Private: #>     parsed_uri: function (uri)  #>     without_standard_port: function (uri)  request_summary(request = x) #> [1] \"post https://hb.opencpu.org/\" request_summary(request = x, c('method', 'uri')) #> [1] \"post https://hb.opencpu.org/\" request_summary(request = x, c('method', 'uri', 'body')) #> [1] \"post https://hb.opencpu.org/ foo=bar\" request_summary(request = x, c('method', 'uri', 'headers')) #> [1] \"post https://hb.opencpu.org/ r-curl/3.2 gzip, deflate application/json\" request_summary(request = x, c('method', 'uri', 'body', 'headers')) #> [1] \"post https://hb.opencpu.org/ foo=bar r-curl/3.2 gzip, deflate application/json\"  # response status <- list(status_code = 200, message = \"OK\",   explanation = \"Request fulfilled, document follows\") headers <- list(   status = \"HTTP/1.1 200 OK\",   connection = \"keep-alive\",   date = \"Tue, 24 Apr 2018 04:46:56 GMT\" ) response_body <-  \"{\\\"args\\\": {\\\"q\\\": \\\"stuff\\\"}, \\\"headers\\\": {\\\"Accept\\\": \\\"text/html\\\"}}\\n\" (x <- VcrResponse$new(status, headers,    response_body, \"HTTP/1.1 200 OK\")) #> <VcrResponse>  response_summary(x) #> [1] \"200 {\\\"args\\\": {\\\"q\\\": \\\"stuff\\\"}, \\\"headers\\\": {\\\"Accept\\\": \\\"text/html\\\"}} \"  ## with binary body # path <- \"tests/testthat/png_eg.rda\" # load(path) # (x <- VcrResponse$new(status, headers, png_eg, \"HTTP/1.1 200 OK\")) # response_summary(x)"},{"path":"https://docs.ropensci.org/vcr/reference/skip_if_vcr_off.html","id":null,"dir":"Reference","previous_headings":"","what":"Skip tests if vcr is off — skip_if_vcr_off","title":"Skip tests if vcr is off — skip_if_vcr_off","text":"Custom testthat skipper skip tests vcr turned via environment variable VCR_TURN_OFF.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/skip_if_vcr_off.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Skip tests if vcr is off — skip_if_vcr_off","text":"","code":"skip_if_vcr_off()"},{"path":"https://docs.ropensci.org/vcr/reference/skip_if_vcr_off.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Skip tests if vcr is off — skip_if_vcr_off","text":"Nothing, skip test.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/skip_if_vcr_off.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Skip tests if vcr is off — skip_if_vcr_off","text":"might useful test fail real requests: cassette e.g. edited (real request produced 200 status code made 502 status code testing behavior code API errors) tests specific (e.g. testing date correctly parsed, making real request produce different date).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/vcr/reference/str_splitter.html","id":null,"dir":"Reference","previous_headings":"","what":"split string every N characters — str_splitter","title":"split string every N characters — str_splitter","text":"split string every N characters","code":""},{"path":"https://docs.ropensci.org/vcr/reference/str_splitter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"split string every N characters — str_splitter","text":"","code":"str_splitter(str, length)"},{"path":"https://docs.ropensci.org/vcr/reference/str_splitter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"split string every N characters — str_splitter","text":"str (character) string length (integer) number characters split ","code":""},{"path":"https://docs.ropensci.org/vcr/reference/str_splitter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"split string every N characters — str_splitter","text":"","code":"if (FALSE) { str = \"XOVEWVJIEWNIGOIWENVOIWEWVWEW\" str_splitter(str, 5) str_splitter(str, 5L) }"},{"path":"https://docs.ropensci.org/vcr/reference/use_cassette.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a cassette to record HTTP requests — use_cassette","title":"Use a cassette to record HTTP requests — use_cassette","text":"Use cassette record HTTP requests","code":""},{"path":"https://docs.ropensci.org/vcr/reference/use_cassette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a cassette to record HTTP requests — use_cassette","text":"","code":"use_cassette(   name,   ...,   record = NULL,   match_requests_on = NULL,   update_content_length_header = FALSE,   allow_playback_repeats = FALSE,   serialize_with = NULL,   persist_with = NULL,   preserve_exact_body_bytes = NULL,   re_record_interval = NULL,   clean_outdated_http_interactions = NULL )"},{"path":"https://docs.ropensci.org/vcr/reference/use_cassette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a cassette to record HTTP requests — use_cassette","text":"name name cassette. vcr check ensure valid file name. allowed: spaces, file extensions, control characters (e.g., \\n), illegal characters ('/', '?', '<', '>', '\\', ':', '*', '|', '\\\"'), dots alone (e.g., '.', '..'), Windows reserved words (e.g., 'com1'), trailing dots (can cause problems Windows), names longer 255 characters. See section \"Cassette names\" ... block code containing one requests (required). Use curly braces encapsulate multi-line code blocks. pass code block use insert_cassette() instead. record record mode (default: \"\"). See recording complete list different recording modes. match_requests_on List request matchers use determine recorded HTTP interaction replay. Defaults [\"method\", \"uri\"]. built-matchers \"method\", \"uri\", \"host\", \"path\", \"headers\", \"body\" \"query\" update_content_length_header (logical) Whether overwrite Content-Length header responses match length response body. Default: FALSE allow_playback_repeats (logical) Whether allow single HTTP interaction played back multiple times. Default: FALSE. serialize_with (character) serializer use. Valid values \"yaml\" (default) \"json\". Note can multiple cassettes name long use different serializers; want one cassette given cassette name, make sure switch serializers, clean files longer need. persist_with (character) cassette persister use. Default: \"file_system\". can also register use custom persister. preserve_exact_body_bytes (logical) Whether base64 encode bytes requests responses cassette serializing . See also preserve_exact_body_bytes vcr_configure(). Default: FALSE re_record_interval (integer) frequently (seconds) cassette re-recorded. default: NULL (re-recorded) clean_outdated_http_interactions (logical) outdated interactions recorded back file? default: FALSE","code":""},{"path":"https://docs.ropensci.org/vcr/reference/use_cassette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use a cassette to record HTTP requests — use_cassette","text":"object class Cassette","code":""},{"path":"https://docs.ropensci.org/vcr/reference/use_cassette.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use a cassette to record HTTP requests — use_cassette","text":"run family top level vcr functions use_cassette Initializes cassette. Returns inserted cassette. insert_cassette Internally used within use_cassette eject_cassette ejects current cassette. cassette longer used. addition, newly recorded HTTP interactions written disk.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/use_cassette.html","id":"cassette-options","dir":"Reference","previous_headings":"","what":"Cassette options","title":"Use a cassette to record HTTP requests — use_cassette","text":"Default values arguments controlling cassette behavior inherited vcr's global configuration. See vcr_configure() complete list options default settings. can override options specific cassette changing argument's value something NULL calling either insert_cassette() use_cassette().","code":""},{"path":"https://docs.ropensci.org/vcr/reference/use_cassette.html","id":"behavior","dir":"Reference","previous_headings":"","what":"Behavior","title":"Use a cassette to record HTTP requests — use_cassette","text":"function handles different scenarios: everything runs smoothly, return Cassette class object can inspect cassette, cassette ejected invalid parameter input cassette creation, fail useful message, return cassette, cassette ejected error calling passed code block, return useful message, since use .exit() cassette still ejected even though error, get object back whenever empty cassette (yml/json file) found, delete returning use_cassette() function call. achieve via use .exit() empty cassette deleted even error code block passed ","code":""},{"path":"https://docs.ropensci.org/vcr/reference/use_cassette.html","id":"cassettes-on-disk","dir":"Reference","previous_headings":"","what":"Cassettes on disk","title":"Use a cassette to record HTTP requests — use_cassette","text":"Note \"eject\" means R session cassette longer use. interactions recorded disk, file disk interactions.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/use_cassette.html","id":"using-with-tests-specifically-testthat-","dir":"Reference","previous_headings":"","what":"Using with tests (specifically testthat)","title":"Use a cassette to record HTTP requests — use_cassette","text":"ways get correct line numbers failed tests one way get correct line numbers: Correct: Either wrap test_that() block inside use_cassette() block, put use_cassette() block inside test_that() block put testthat expectations outside use_cassette() block. Incorrect: wrapping use_cassette() block inside test_that() block testthat expectations inside use_cassette() block, get line number use_cassette() block starts .","code":""},{"path":[]},{"path":"https://docs.ropensci.org/vcr/reference/use_cassette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use a cassette to record HTTP requests — use_cassette","text":"","code":"if (FALSE) { library(vcr) library(crul) vcr_configure(dir = tempdir())  use_cassette(name = \"apple7\", {   cli <- HttpClient$new(url = \"https://hb.opencpu.org\")   resp <- cli$get(\"get\") }) readLines(file.path(tempdir(), \"apple7.yml\"))  # preserve exact body bytes - records in base64 encoding use_cassette(\"things4\", {   cli <- crul::HttpClient$new(url = \"https://hb.opencpu.org\")   bbb <- cli$get(\"get\") }, preserve_exact_body_bytes = TRUE) ## see the body string value in the output here readLines(file.path(tempdir(), \"things4.yml\"))  # cleanup unlink(file.path(tempdir(), c(\"things4.yml\", \"apple7.yml\")))   # with httr library(vcr) library(httr) vcr_configure(dir = tempdir(), log = TRUE, log_opts = list(file = file.path(tempdir(), \"vcr.log\")))  use_cassette(name = \"stuff350\", {   res <- GET(\"https://hb.opencpu.org/get\") }) readLines(file.path(tempdir(), \"stuff350.yml\"))  use_cassette(name = \"catfact456\", {   res <- GET(\"https://catfact.ninja/fact\") })  # record mode: none library(crul) vcr_configure(dir = tempdir())  ## make a connection first conn <- crul::HttpClient$new(\"https://eu.httpbin.org\") ## this errors because 'none' disallows any new requests # use_cassette(\"none_eg\", (res2 <- conn$get(\"get\")), record = \"none\") ## first use record mode 'once' to record to a cassette one <- use_cassette(\"none_eg\", (res <- conn$get(\"get\")), record = \"once\") one; res ## then use record mode 'none' to see it's behavior two <- use_cassette(\"none_eg\", (res2 <- conn$get(\"get\")), record = \"none\") two; res2 }"},{"path":"https://docs.ropensci.org/vcr/reference/use_vcr.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup vcr for a package — use_vcr","title":"Setup vcr for a package — use_vcr","text":"Setup vcr package","code":""},{"path":"https://docs.ropensci.org/vcr/reference/use_vcr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup vcr for a package — use_vcr","text":"","code":"use_vcr(dir = \".\", verbose = TRUE)"},{"path":"https://docs.ropensci.org/vcr/reference/use_vcr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup vcr for a package — use_vcr","text":"dir (character) path package root. default's current directory verbose (logical) print progress messages. default: TRUE","code":""},{"path":"https://docs.ropensci.org/vcr/reference/use_vcr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup vcr for a package — use_vcr","text":"messages progress, returns invisible()","code":""},{"path":"https://docs.ropensci.org/vcr/reference/use_vcr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setup vcr for a package — use_vcr","text":"Sets mimimum vcr version, usually latest (stable) version CRAN. can course easily remove change version requirement running function.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/vcr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"vcr: Record 'HTTP' Calls to Disk — vcr-package","title":"vcr: Record 'HTTP' Calls to Disk — vcr-package","text":"Record test suite 'HTTP' requests replays future runs. port Ruby gem name (https://github.com/vcr/vcr/). Works hooking 'webmockr' R package matching 'HTTP' requests various rules ('HTTP' method, 'URL', query parameters, headers, body, etc.), caching real 'HTTP' responses disk 'cassettes'. Subsequent 'HTTP' requests matching previous requests 'cassette' use cached 'HTTP' response.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/vcr-package.html","id":"backstory","dir":"Reference","previous_headings":"","what":"Backstory","title":"vcr: Record 'HTTP' Calls to Disk — vcr-package","text":"Ruby gem name (VCR, https://github.com/vcr/vcr) created many years ago original. Ports many languages done. Check GitHub repo details canonical version works.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/vcr-package.html","id":"main-functions","dir":"Reference","previous_headings":"","what":"Main functions","title":"vcr: Record 'HTTP' Calls to Disk — vcr-package","text":"use_cassette function likely want use. sets cassette want record , inserts cassette, ejects cassette, recording interactions cassette. Instead, can use insert_cassette, make sure use eject_cassette.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/vcr-package.html","id":"vcr-configuration","dir":"Reference","previous_headings":"","what":"vcr configuration","title":"vcr: Record 'HTTP' Calls to Disk — vcr-package","text":"vcr_configure function use set R session wide settings. See manual file help.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/vcr-package.html","id":"record-modes","dir":"Reference","previous_headings":"","what":"Record modes","title":"vcr: Record 'HTTP' Calls to Disk — vcr-package","text":"See recording help record modes.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/vcr-package.html","id":"request-matching","dir":"Reference","previous_headings":"","what":"Request matching","title":"vcr: Record 'HTTP' Calls to Disk — vcr-package","text":"See request-matching help many request matching options.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/vcr/reference/vcr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vcr: Record 'HTTP' Calls to Disk — vcr-package","text":"Maintainer: Scott Chamberlain sckott@protonmail.com (ORCID) Authors: Aaron Wolen (ORCID) Maëlle Salmon (ORCID) Daniel Possenriede (ORCID) contributors: rOpenSci (https://ropensci.org) [funder]","code":""},{"path":"https://docs.ropensci.org/vcr/reference/vcr_configure.html","id":null,"dir":"Reference","previous_headings":"","what":"Global Configuration Options — vcr_configure","title":"Global Configuration Options — vcr_configure","text":"Configurable options define vcr's default behavior.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/vcr_configure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global Configuration Options — vcr_configure","text":"","code":"vcr_configure(...)  vcr_configure_reset()  vcr_configuration()  vcr_config_defaults()"},{"path":"https://docs.ropensci.org/vcr/reference/vcr_configure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global Configuration Options — vcr_configure","text":"... configuration settings used override defaults. See complete list valid arguments.","code":""},{"path":[]},{"path":[]},{"path":"https://docs.ropensci.org/vcr/reference/vcr_configure.html","id":"file-locations","dir":"Reference","previous_headings":"","what":"File locations","title":"Global Configuration Options — vcr_configure","text":"dir Cassette directory write_disk_path (character) path write files requests write responses disk. default parameter NULL. testing package, probably want path tests/ directory, perhaps next cassettes directory, e.g., cassettes tests/fixtures, files requests write disk tests/files. want ignore files installed package, add .Rinstignore. want files ignored build add .Rbuildignore (though , tests depend files probably work found; likely skip associated tests well).","code":""},{"path":"https://docs.ropensci.org/vcr/reference/vcr_configure.html","id":"contexts","dir":"Reference","previous_headings":"","what":"Contexts","title":"Global Configuration Options — vcr_configure","text":"turned_off (logical) VCR turned default. Default: FALSE allow_unused_http_interactions (logical) Default: TRUE allow_http_connections_when_no_cassette (logical) Determines vcr treats HTTP requests made vcr cassette use. TRUE, requests made vcr cassette use allowed. FALSE (default), UnhandledHTTPRequestError error raised HTTP request made cassette use","code":""},{"path":"https://docs.ropensci.org/vcr/reference/vcr_configure.html","id":"filtering","dir":"Reference","previous_headings":"","what":"Filtering","title":"Global Configuration Options — vcr_configure","text":"ignore_hosts (character) Vector hosts ignore. e.g., localhost, google.com. hosts ignored real HTTP requests allowed go ignore_localhost (logical) Default: FALSE ignore_request List requests ignore. USED RIGHT NOW, sorry filter_sensitive_data named list values replace. Format :   replace instances thing_to_replace thing_to_replace_it_with. Uses gsub() internally, fixed=TRUE; exact matches. recording (writing cassette) replacement reading cassette reverse replacement get back real data. record replacement happens internal function write_interactions(), playback replacement happens internal function YAML$deserialize() filter_sensitive_data_regex named list values replace. Follows filter_sensitive_data format, except uses fixed=FALSE gsub() function call; means value thing_to_replace regex pattern. filter_request_headers (character/list) request headers filter. character vector request headers remove - headers recorded disk. Alternatively, named list similar filter_sensitive_data instructing vcr value replace real value request header. filter_response_headers (named list) response headers filter. character vector response headers remove - headers recorded disk. Alternatively, named list similar filter_sensitive_data instructing vcr value replace real value response header. filter_query_parameters (named list) query parameters filter. character vector query parameters remove - query parameters recorded disk. Alternatively, named list similar filter_sensitive_data instructing vcr value replace real value query parameter.","code":"list(thing_to_replace_it_with = thing_to_replace)"},{"path":"https://docs.ropensci.org/vcr/reference/vcr_configure.html","id":"errors","dir":"Reference","previous_headings":"","what":"Errors","title":"Global Configuration Options — vcr_configure","text":"verbose_errors want verbose errors less verbose errors cassette recording/usage fails? Default FALSE, , less verbose errors. TRUE, error messages include details went wrong suggest possible solutions. testing interactive R session, verbose_errors=FALSE, can run vcr_last_error() get full error. non-interactive mode, users running entire test suite package, can set environment variable (VCR_VERBOSE_ERRORS) toggle setting (e.g., Sys.setenv(VCR_VERBOSE_ERRORS=TRUE); devtools::test())","code":""},{"path":"https://docs.ropensci.org/vcr/reference/vcr_configure.html","id":"internals","dir":"Reference","previous_headings":"","what":"Internals","title":"Global Configuration Options — vcr_configure","text":"cassettes (list) use linked_context (logical) linked context uri_parser uri parser, default: crul::url_parse()","code":""},{"path":"https://docs.ropensci.org/vcr/reference/vcr_configure.html","id":"logging","dir":"Reference","previous_headings":"","what":"Logging","title":"Global Configuration Options — vcr_configure","text":"log (logical) log important vcr things? Default: FALSE log_opts (list) Additional logging options: 'file' either \"console\" file path log 'log_prefix' default: \"Cassette\". insert cassette name prefix, rest message. come...","code":""},{"path":"https://docs.ropensci.org/vcr/reference/vcr_configure.html","id":"cassette-options","dir":"Reference","previous_headings":"","what":"Cassette Options","title":"Global Configuration Options — vcr_configure","text":"settings can configured globally, using vcr_configure(), locally, using either use_cassette() insert_cassette(). Global settings applied cassettes overridden settings defined locally individual cassettes. record (character) One '', 'none', 'new_episodes', ''. See recording match_requests_on vector matchers. Default: (method, uri) See request-matching details. serialize_with: (character) \"yaml\" \"json\". Note can multiple cassettes name long use different serializers; want one cassette given cassette name, make sure switch serializers, clean files longer need. json_pretty: (logical) want JSON newline separated easier read? remove newlines save disk space? default: FALSE persist_with (character) option \"FileSystem\" preserve_exact_body_bytes (logical) preserve exact body bytes re_record_interval (numeric) given, cassette re-recorded given interval, seconds. clean_outdated_http_interactions (logical) outdated interactions recorded back file. Default: FALSE quiet (logical) Suppress messages vcr webmockr. Default: TRUE warn_on_empty_cassette (logical) warning thrown empty cassette detected? Empty cassettes cleaned (deleted) either way. option determines whether warning thrown . Default: FALSE","code":""},{"path":"https://docs.ropensci.org/vcr/reference/vcr_configure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Global Configuration Options — vcr_configure","text":"","code":"vcr_configure(dir = tempdir()) #> <vcr configuration> #>   Cassette Dir: /tmp/RtmpbSjnZa #>   Record: once #>   Serialize with: yaml #>   URI Parser: crul::url_parse #>   Match Requests on: method, uri #>   Preserve Bytes?: FALSE #>   Logging?: FALSE #>   ignored hosts:  #>   ignore localhost?: FALSE #>   Write disk path:  vcr_configure(dir = tempdir(), record = \"all\") #> <vcr configuration> #>   Cassette Dir: /tmp/RtmpbSjnZa #>   Record: all #>   Serialize with: yaml #>   URI Parser: crul::url_parse #>   Match Requests on: method, uri #>   Preserve Bytes?: FALSE #>   Logging?: FALSE #>   ignored hosts:  #>   ignore localhost?: FALSE #>   Write disk path:  vcr_configuration() #> <vcr configuration> #>   Cassette Dir: /tmp/RtmpbSjnZa #>   Record: all #>   Serialize with: yaml #>   URI Parser: crul::url_parse #>   Match Requests on: method, uri #>   Preserve Bytes?: FALSE #>   Logging?: FALSE #>   ignored hosts:  #>   ignore localhost?: FALSE #>   Write disk path:  vcr_config_defaults() #> $warn_on_empty_cassette #> [1] TRUE #>  #> $quiet #> [1] TRUE #>  #> $verbose_errors #> [1] FALSE #>  #> $write_disk_path #> NULL #>  #> $filter_query_parameters #> NULL #>  #> $filter_response_headers #> NULL #>  #> $filter_request_headers #> NULL #>  #> $filter_sensitive_data_regex #> NULL #>  #> $filter_sensitive_data #> NULL #>  #> $log_opts #> $log_opts$file #> [1] \"vcr.log\" #>  #> $log_opts$log_prefix #> [1] \"Cassette\" #>  #> $log_opts$date #> [1] TRUE #>  #>  #> $log #> [1] FALSE #>  #> $linked_context #> NULL #>  #> $cassettes #> list() #>  #> $allow_http_connections_when_no_cassette #> [1] FALSE #>  #> $clean_outdated_http_interactions #> [1] FALSE #>  #> $re_record_interval #> NULL #>  #> $turned_off #> [1] FALSE #>  #> $preserve_exact_body_bytes #> [1] FALSE #>  #> $uri_parser #> [1] \"crul::url_parse\" #>  #> $ignore_request #> NULL #>  #> $ignore_localhost #> [1] FALSE #>  #> $ignore_hosts #> NULL #>  #> $persist_with #> [1] \"FileSystem\" #>  #> $json_pretty #> [1] FALSE #>  #> $serialize_with #> [1] \"yaml\" #>  #> $allow_unused_http_interactions #> [1] TRUE #>  #> $match_requests_on #> [1] \"method\" \"uri\"    #>  #> $record #> [1] \"once\" #>  #> $dir #> [1] \".\" #>  vcr_configure(dir = tempdir(), ignore_hosts = \"google.com\") #> <vcr configuration> #>   Cassette Dir: /tmp/RtmpbSjnZa #>   Record: all #>   Serialize with: yaml #>   URI Parser: crul::url_parse #>   Match Requests on: method, uri #>   Preserve Bytes?: FALSE #>   Logging?: FALSE #>   ignored hosts: google.com #>   ignore localhost?: FALSE #>   Write disk path:  vcr_configure(dir = tempdir(), ignore_localhost = TRUE) #> <vcr configuration> #>   Cassette Dir: /tmp/RtmpbSjnZa #>   Record: all #>   Serialize with: yaml #>   URI Parser: crul::url_parse #>   Match Requests on: method, uri #>   Preserve Bytes?: FALSE #>   Logging?: FALSE #>   ignored hosts: google.com #>   ignore localhost?: TRUE #>   Write disk path:    # logging vcr_configure(dir = tempdir(), log = TRUE,   log_opts = list(file = file.path(tempdir(), \"vcr.log\"))) #> <vcr configuration> #>   Cassette Dir: /tmp/RtmpbSjnZa #>   Record: all #>   Serialize with: yaml #>   URI Parser: crul::url_parse #>   Match Requests on: method, uri #>   Preserve Bytes?: FALSE #>   Logging?: TRUE (/tmp/RtmpbSjnZa/vcr.log) #>   ignored hosts: google.com #>   ignore localhost?: TRUE #>   Write disk path:  vcr_configure(dir = tempdir(), log = TRUE, log_opts = list(file = \"console\")) #> <vcr configuration> #>   Cassette Dir: /tmp/RtmpbSjnZa #>   Record: all #>   Serialize with: yaml #>   URI Parser: crul::url_parse #>   Match Requests on: method, uri #>   Preserve Bytes?: FALSE #>   Logging?: TRUE (console) #>   ignored hosts: google.com #>   ignore localhost?: TRUE #>   Write disk path:  vcr_configure(dir = tempdir(), log = TRUE,  log_opts = list(    file = file.path(tempdir(), \"vcr.log\"),    log_prefix = \"foobar\" )) #> <vcr configuration> #>   Cassette Dir: /tmp/RtmpbSjnZa #>   Record: all #>   Serialize with: yaml #>   URI Parser: crul::url_parse #>   Match Requests on: method, uri #>   Preserve Bytes?: FALSE #>   Logging?: TRUE (/tmp/RtmpbSjnZa/vcr.log) #>   ignored hosts: google.com #>   ignore localhost?: TRUE #>   Write disk path:  vcr_configure(dir = tempdir(), log = FALSE) #> <vcr configuration> #>   Cassette Dir: /tmp/RtmpbSjnZa #>   Record: all #>   Serialize with: yaml #>   URI Parser: crul::url_parse #>   Match Requests on: method, uri #>   Preserve Bytes?: FALSE #>   Logging?: FALSE #>   ignored hosts: google.com #>   ignore localhost?: TRUE #>   Write disk path:   # filter sensitive data vcr_configure(dir = tempdir(),   filter_sensitive_data = list(foo = \"<bar>\") ) #> <vcr configuration> #>   Cassette Dir: /tmp/RtmpbSjnZa #>   Record: all #>   Serialize with: yaml #>   URI Parser: crul::url_parse #>   Match Requests on: method, uri #>   Preserve Bytes?: FALSE #>   Logging?: FALSE #>   ignored hosts: google.com #>   ignore localhost?: TRUE #>   Write disk path:  vcr_configure(dir = tempdir(),   filter_sensitive_data = list(foo = \"<bar>\", hello = \"<world>\") ) #> <vcr configuration> #>   Cassette Dir: /tmp/RtmpbSjnZa #>   Record: all #>   Serialize with: yaml #>   URI Parser: crul::url_parse #>   Match Requests on: method, uri #>   Preserve Bytes?: FALSE #>   Logging?: FALSE #>   ignored hosts: google.com #>   ignore localhost?: TRUE #>   Write disk path:"},{"path":"https://docs.ropensci.org/vcr/reference/vcr_logging.html","id":null,"dir":"Reference","previous_headings":"","what":"vcr log file setup — vcr_logging","title":"vcr log file setup — vcr_logging","text":"vcr log file setup","code":""},{"path":"https://docs.ropensci.org/vcr/reference/vcr_logging.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vcr log file setup — vcr_logging","text":"","code":"vcr_log_file(file, overwrite = TRUE)  vcr_log_info(message, include_date = TRUE)"},{"path":"https://docs.ropensci.org/vcr/reference/vcr_logging.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vcr log file setup — vcr_logging","text":"file (character) file path, required overwrite (logical) whether overwrite file 'file' already exists. Default: TRUE message (character) message log include_date (logical) include date time log entry. Default: FALSE","code":""},{"path":"https://docs.ropensci.org/vcr/reference/vcr_logging.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vcr log file setup — vcr_logging","text":"","code":"# user workflow vcr_configuration() #> <vcr configuration> #>   Cassette Dir: /tmp/RtmpbSjnZa #>   Record: all #>   Serialize with: yaml #>   URI Parser: crul::url_parse #>   Match Requests on: method, uri #>   Preserve Bytes?: FALSE #>   Logging?: FALSE #>   ignored hosts: google.com #>   ignore localhost?: TRUE #>   Write disk path:  logfile <- file.path(tempdir(), \"vcr.log\") vcr_configure(dir = tempdir(), log = TRUE, log_opts = list(file = logfile)) #> <vcr configuration> #>   Cassette Dir: /tmp/RtmpbSjnZa #>   Record: all #>   Serialize with: yaml #>   URI Parser: crul::url_parse #>   Match Requests on: method, uri #>   Preserve Bytes?: FALSE #>   Logging?: TRUE (/tmp/RtmpbSjnZa/vcr.log) #>   ignored hosts: google.com #>   ignore localhost?: TRUE #>   Write disk path:   readLines(logfile) # empty #> character(0)  # log messages vcr_log_info(\"hello world!\") readLines(logfile) #> [1] \"[Cassette: '<none>'] - 2024-03-05 06:55:21.504328 - hello world!\" vcr_log_info(\"foo bar\") readLines(logfile) #> [1] \"[Cassette: '<none>'] - 2024-03-05 06:55:21.504328 - hello world!\" #> [2] \"[Cassette: '<none>'] - 2024-03-05 06:55:21.505929 - foo bar\"      ## many messages vcr_log_info(c(\"brown cow\", \"blue horse\")) readLines(logfile) #> [1] \"[Cassette: '<none>'] - 2024-03-05 06:55:21.504328 - hello world!\" #> [2] \"[Cassette: '<none>'] - 2024-03-05 06:55:21.505929 - foo bar\"      #> [3] \"[Cassette: '<none>'] - 2024-03-05 06:55:21.507416 - brown cow\"    #> [4] \"[Cassette: '<none>'] - 2024-03-05 06:55:21.507416 - blue horse\"   vcr_log_info(c(\"brown cow\", \"blue horse\", \"green goat\")) readLines(logfile) #> [1] \"[Cassette: '<none>'] - 2024-03-05 06:55:21.504328 - hello world!\" #> [2] \"[Cassette: '<none>'] - 2024-03-05 06:55:21.505929 - foo bar\"      #> [3] \"[Cassette: '<none>'] - 2024-03-05 06:55:21.507416 - brown cow\"    #> [4] \"[Cassette: '<none>'] - 2024-03-05 06:55:21.507416 - blue horse\"   #> [5] \"[Cassette: '<none>'] - 2024-03-05 06:55:21.508969 - brown cow\"    #> [6] \"[Cassette: '<none>'] - 2024-03-05 06:55:21.508969 - blue horse\"   #> [7] \"[Cassette: '<none>'] - 2024-03-05 06:55:21.508969 - green goat\"    # standalone workflow # set a file to log to vcr_log_file((f <- tempfile())) #> [1] TRUE readLines(f) # empty #> character(0)  # log messages vcr_log_info(\"hello world!\") readLines(logfile) #> [1] \"[Cassette: '<none>'] - 2024-03-05 06:55:21.504328 - hello world!\" #> [2] \"[Cassette: '<none>'] - 2024-03-05 06:55:21.505929 - foo bar\"      #> [3] \"[Cassette: '<none>'] - 2024-03-05 06:55:21.507416 - brown cow\"    #> [4] \"[Cassette: '<none>'] - 2024-03-05 06:55:21.507416 - blue horse\"   #> [5] \"[Cassette: '<none>'] - 2024-03-05 06:55:21.508969 - brown cow\"    #> [6] \"[Cassette: '<none>'] - 2024-03-05 06:55:21.508969 - blue horse\"   #> [7] \"[Cassette: '<none>'] - 2024-03-05 06:55:21.508969 - green goat\"   vcr_log_info(\"foo bar\") readLines(logfile) #> [1] \"[Cassette: '<none>'] - 2024-03-05 06:55:21.504328 - hello world!\" #> [2] \"[Cassette: '<none>'] - 2024-03-05 06:55:21.505929 - foo bar\"      #> [3] \"[Cassette: '<none>'] - 2024-03-05 06:55:21.507416 - brown cow\"    #> [4] \"[Cassette: '<none>'] - 2024-03-05 06:55:21.507416 - blue horse\"   #> [5] \"[Cassette: '<none>'] - 2024-03-05 06:55:21.508969 - brown cow\"    #> [6] \"[Cassette: '<none>'] - 2024-03-05 06:55:21.508969 - blue horse\"   #> [7] \"[Cassette: '<none>'] - 2024-03-05 06:55:21.508969 - green goat\"    # cleanup unlink(f) unlink(logfile)"},{"path":"https://docs.ropensci.org/vcr/reference/vcr_test_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Locate file in tests directory — vcr_test_path","title":"Locate file in tests directory — vcr_test_path","text":"function, similar testthat::test_path(), designed work interactively tests, locating files tests/ directory.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/vcr_test_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Locate file in tests directory — vcr_test_path","text":"","code":"vcr_test_path(...)"},{"path":"https://docs.ropensci.org/vcr/reference/vcr_test_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Locate file in tests directory — vcr_test_path","text":"... Character vectors giving path component. character string gets added path, e.g., vcr_test_path(\"\", \"b\") becomes tests//b relative root package.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/vcr_test_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Locate file in tests directory — vcr_test_path","text":"character vector giving path","code":""},{"path":"https://docs.ropensci.org/vcr/reference/vcr_test_path.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Locate file in tests directory — vcr_test_path","text":"vcr_test_path() assumes using testthat unit tests.","code":""},{"path":"https://docs.ropensci.org/vcr/reference/vcr_test_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Locate file in tests directory — vcr_test_path","text":"","code":"if (interactive()) { vcr_test_path(\"fixtures\") }"},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"vcr-122","dir":"Changelog","previous_headings":"","what":"vcr 1.2.2","title":"vcr 1.2.2","text":"CRAN release: 2023-06-25 change tests use reliable test servers","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"vcr-120","dir":"Changelog","previous_headings":"","what":"vcr 1.2.0","title":"vcr 1.2.0","text":"CRAN release: 2022-11-17","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"new-features-1-2-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"vcr 1.2.0","text":"Added @dpprdan author; changed ctb aut (#258)","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"minor-improvements-1-2-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"vcr 1.2.0","text":"use_vcr() now creates test helper file called helper-vcr.R instead setup-pkgname.R. reverting change version 0.6.0 now recommend use helper-*.R , vcr setup loaded devtools::load_all(). way vcr-enabled tests also work run interactively (#244) (#256) default git branch changed master main (#253) update example packages README (#257) vcr longer requires compilation replaced single C++ function pure R equivalent","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"bug-fixes-1-2-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"vcr 1.2.0","text":"roll back change previous CRAN version removed use internal function (body_from) (#249) (#252)","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"vcr-110","dir":"Changelog","previous_headings":"","what":"vcr 1.1.0","title":"vcr 1.1.0","text":"CRAN release: 2022-11-04","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"minor-improvements-1-1-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"vcr 1.1.0","text":"request matching sensitive escaping special characters, ’s fixed (#240) (#247) thanks @KevCaz fix broken link given error suggestion (#239) thanks @maelle using preserve_exact_body_bytes = TRUE now writes base64 encoded string field yaml json disk called base64_string. preserve_exact_body_bytes = FALSE (default) response body goes field called string","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"bug-fixes-1-1-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"vcr 1.1.0","text":"vcr_test_path fix find root package path correctly R 4.2 Windows (#242) (#243) thanks @dpprdan","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"vcr-102","dir":"Changelog","previous_headings":"","what":"vcr 1.0.2","title":"vcr 1.0.2","text":"CRAN release: 2021-05-31","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"bug-fixes-1-0-2","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"vcr 1.0.2","text":"fix vcr_test_path() find root package path correctly (#235) (#236)","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"vcr-100","dir":"Changelog","previous_headings":"","what":"vcr 1.0.0","title":"vcr 1.0.0","text":"CRAN release: 2021-05-22","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"new-features-1-0-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"vcr 1.0.0","text":"check_cassette_names() gains allowed_duplicates parameter allow duplicate cassette names; typically advise users use duplicate cassette names, cases may want share cassettes across tests (#227) vcr_configure() gains filter_query_parameters parameter filtering query parameters don’t show recorded request disk (#212) use_vcr(): now sets mimimum vcr version, usually latest (stable) version CRAN. can course easily remove change version requirement running (#214) vcr_configure() gains warn_on_empty_cassette parameter: warning thrown empty cassette detected? Empty cassettes cleaned (deleted) either way (#224) thanks @llrs @dpprdan vcr_configure() gains quiet parameter: suppress messages vcr webmockr (#226) (#25) vcr_configure() gains new option filter_sensitive_data_regex; now filter_sensitive_data fixed string matching, filter_sensitive_data_regex regex based matching (#222) thanks @tomsing1 reporting gains package import rprojroot","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"minor-improvements-1-0-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"vcr 1.0.0","text":"filter_sensitive_data option now strips leading trailing single double quotes strings used CASE user accidentally quotes secret - logic even though secret may single double quote , unlikely leading trailing quote (single double) (#221)","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"documentation-1-0-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"vcr 1.0.0","text":"new vignette explaining design vcr package (also can found HTTP Testing book) (#232) (#233) user facing change - vignettes moved man/rmdhunks can pulled HTTP Testing book easily (#209) (#216) fix configuration vignette clarify filter_request_headers example (#215) thanks @maelle docs update (#33) (#217)","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"bug-fixes-1-0-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"vcr 1.0.0","text":"filter_request_headers unfortunately adding request header request written disk header exist; now fixed (#213) bug internal function is_base64(); strsplit() needed useBytes=TRUE (#219) filter_sensitive_data working strings contained regex characters; fixed, see also new config variable regex specific filtering (#222) thanks @tomsing1 reporting vcr_test_path() now correctly set paths (#225) (#228) (#229) (#230)","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"vcr-060","dir":"Changelog","previous_headings":"","what":"vcr 0.6.0","title":"vcr 0.6.0","text":"CRAN release: 2020-12-12","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"new-features-0-6-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"vcr 0.6.0","text":"new vcr contributor! @maelle (#198) Gains new serializer: JSON. can use serializer setting globally vcr_configure(serialize_with=\"json\") per cassette use_cassette(..., serialize_with=\"json\"). JSON serializer uses jsonlite hood. Note default write JSON disk preserving newlines; JSON one line. can use pretty printing setting json_pretty vcr_configure(). part change, factored new R6 class Serializer JSON YAML serializers inherit (#32) Gains two new configuration options managing secrets: filter_request_headers filter_response_headers. implemented differently filter_sensitive_data. two new filters simple value replacement complete removal request response headers, whereas filter_sensitive_data uses regex replace strings anywhere stored request/response. See “Configure vcr” vignette details (#182) request matching: host path now work (#177) (see also #70) previous versions vcr insert_cassette()/eject_cassette() workflow work webmockr triggers required worked using use_cassette(). fixed now can use use_cassette(), passing code block , run insert_cassette() run code, finished run eject_cassette(). (#24) thanks @Robsteranium nudge, may fixed without improve debugging experience: new vignette “Debugging tests use vcr”, including new function vcr_test_path() - now used use_vcr() correct path tests used running tests interactively non-interactively (#192) (#193) Dependencies: dropped lazyeval Imports; withr added Suggests; minimum webmockr version now v0.7.4 README, point rOpenSci code conduct rather file repo Gains function skip_if_vcr_off() use tests skip test vcr turned (#191) (#195)","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"minor-improvements-0-6-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"vcr 0.6.0","text":"slight factor code YAML serializer use elsewhere (#203) (#204) serializers: drop $deserialize_string() method used - rename $deserialize_path() method just $deserialize() (#189) serializers: new JSON serializer, documentation added ?vcr_configure ?use_cassette stating can different cassettes name long use different serializers (different file extensions). want change serializers want keep old cassette old serializer make sure clean old file (#188) now using GitHub Actions - remove Travis-CI Appveyor (#175) fixes tests idempotent (#174) thanks @alex-gable clean UnhandledHTTPRequestError - remove unused variable cassette $initialize() method (always use current_cassette() get cassette used) (#163) tip @aaronwolen change latest webmockr release (v0.7.4) allowed changes return httr response object closely matches httr returns real HTTP request. major problem , assuming x httr response object, x$request RequestSignature object (webmockr), whereas class real httr response object request (#132) Re-factor Cassette class greatly simplifying webmockr HTTP request stubbing (#98) (#173) big thanks @alex-gable ! HTTPInteractionList improvement: checking request matches disk checking requesets cassette - faster check stop match found. Using new factored function checking stops first match found. Many tests added check behavior (#69) base64 encoded output cassettes using YAML serializer now wrapped approximately 80 character width (triggered preserve_exact_body_bytes=TRUE) - makes cassettes longer however. Implementing brought use cpp11 (first use C++ vcr). makes base64 encoded response body recording consistent vcr’s programming languages (#41) decode_compressed_response option removed Cassette class - wasn’t used won’t used (#30) add additional examples VcrResponse docs showing update_content_length_header() (#29) use_vcr() changes: 1) now creates test helper file called setup-pkgname.R instead helper-pkgname.R; 2) now default sets directory fixtures using dir = vcr_test_path(\"fixtures\") instead dir = \"../fixtures\". See news item vcr_test_path","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"documentation-0-6-0","dir":"Changelog","previous_headings":"","what":"DOCUMENTATION","title":"vcr 0.6.0","text":"better description vcr top README (#198) delete unused docs folder repository (docs built elsewhere) (#210) tell users explicitly loading vcr required test setup (#185) (#186) thanks @KevCaz added explanation webmockr integrated Cassette class - see section “Points webmockr integration” ?Cassette (#176) (see also #173) improved getting started protecting secrets sections introduction vignette (#170) (#172) thanks @DaveParr add introduction vignette section titled “ensure tests work absence real API key” (#137) (#194)","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"vcr-054","dir":"Changelog","previous_headings":"","what":"vcr 0.5.4","title":"vcr 0.5.4","text":"CRAN release: 2020-03-31","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"new-features-0-5-4","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"vcr 0.5.4","text":"Error messages tests using vcr fail now simpler, primarily reduce space error messages take . user can toggle whether get new simplified error messages older format verbose messages using verbose_errors setting vcr_configure() function. addition, vcr_last_error() gives last full error, doesn’t help non-interactive mode; non-interactive mode, users running entire test suite package, can set environment variable (VCR_VERBOSE_ERRORS) toggle setting (e.g., Sys.setenv(VCR_VERBOSE_ERRORS=TRUE); devtools::test()) (#121) (#154)","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"minor-improvements-0-5-4","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"vcr 0.5.4","text":"changed write_disk_path handling internally run normalizePath recording cassette; passing path normalizePath leading full path recorded cassette, means package testing context test uses file disk (likely) work machine cassette first created . relative paths package context, test file written disk now work different testing contexts (locally, various continuous integration platforms) (#135) (#166) added bit documentation large files created using vcr, ignore needed within .Rinstignore /.Rbuildignore (#164)","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"vcr-050","dir":"Changelog","previous_headings":"","what":"vcr 0.5.0","title":"vcr 0.5.0","text":"CRAN release: 2020-03-04","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"new-features-0-5-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"vcr 0.5.0","text":"new function check_cassette_names use helper-pkgname.R file test suite; checks duplicated cassette names . use insert_cassette() (thereby, use use_cassette()) uses revamped version internal fxn checks improved list potential problems cassette names (#116) (#159) use_vcr() adds gitignore cassette diffs via addition gitattributes file (#109) vcr_configure() overhaul: function longer setting parameter; rather, ellipsis (...), internally check parameters passed . documentation (?vcr_configure) lists details available parameter. Importantly, call vcr_configure() now changes vcr settings parameters passed function; reset vcr settings, run vcr_configure_reset() (#136) (#141) insert_cassette() use_cassette() now inherit vcr settings set vcr_configure(); wasn’t happening consistently . default parameter values insert_cassette/use_cassette set NULL, case inherit whatever values set vcr_configure(), can overriden (#151) (#153)","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"minor-improvements-0-5-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"vcr 0.5.0","text":"define serialize, cassette, fixture README (#138) (#139) fix filter_sensitive_data parameter description vcr_configure docs (#129) move higher README brief description package (#140) import utils::getParseData namespace (#142) better cleanup stray test files left disk (#148) use_vcr() longer uses context() example test file (#144) improved documentation functions environment variables turning vcr use - documentation mostly HTTP Testing book https://books.ropensci.org/http-testing/lightswitch.html (#131) fix use_cassette test (#133) Add assertions vcr_configure() parameters set user fail early (#156)","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"bug-fixes-0-5-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"vcr 0.5.0","text":"fix handling http requests request image data write data disk; addition, fix usage preserve_exact_body_bytes image data response body (#128) thanks @Rekyt vcr now handle request bodies correctly POST requests (#143) Request matching failing empty bodies “body” one matchers (#157) (#161) fix sensitive_remove() internal function used user sets filter_sensitive_data vcr_configure(); env var missing filter_sensitive_data list, sensitive_remove() causing C stack errors cases (#160) thanks @zachary-foster fix recording JSON-encoded bodies; vcr wasn’t handling HTTP requests user set body encoded JSON (e.g., encode=\"json\" crul httr) (#130)","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"vcr-040","dir":"Changelog","previous_headings":"","what":"vcr 0.4.0","title":"vcr 0.4.0","text":"CRAN release: 2019-12-07","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"new-features-0-4-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"vcr 0.4.0","text":"vcr now can handle requests crul httr write disk; crul supports disk parameter httr write_disk() function; see section mocking writing disk http testing book https://books.ropensci.org/http-testing/vcr-usage.html#vcr-disk; also see ?mocking-disk-writing within webmockr mocking writing disk without using vcr, section http testing book https://books.ropensci.org/http-testing/webmockr-stubs.html#webmockr-disk (#81) (#125) vcr gains ability completely turn vcr test suite even ’re using vcr::use_cassette/vcr::insert_cassette; helpful want run tests without vcr; workflows supported setting env vars command line well working interactively within R; see ?lightswitch details (#37) ignoring requests now works, caveats: works now crul (httr), works ignoring specifc hosts, localhosts, custom callbacks. See vcr configuration vignette https://docs.ropensci.org/vcr/articles/configuration.html#ignoring--requests discussion examples (#127)","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"minor-improvements-0-4-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"vcr 0.4.0","text":"documentation R6 classes much better now; roxygen2 now officially supports R6 classes (#123) added minimal cassette name checking; spaces allowed file extensions allowed; checks may added later (#106)","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"bug-fixes-0-4-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"vcr 0.4.0","text":"fix handling http response bodies images; converting raw class bodies character, causing images error, can’t converted character; now check body can converted character , leave (#112) (#119) thanks @Rekyt report simple auth package httr wasn’t working (htrr::authenticate()); capturing use authenticate; ’s solved now (#113) properly capturing request bodies package httr requests; ’s fixed (#122) httr adapter failing second run, reading cached response. fixed now (#124) response_summary() fixed; function prints summary http response body; sometimes function fail multibyte string error gsub call change encoding, fail substring call; now set useBytes = TRUE gsub call avoid problem (#126)","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"vcr-030","dir":"Changelog","previous_headings":"","what":"vcr 0.3.0","title":"vcr 0.3.0","text":"CRAN release: 2019-08-20","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"vcr 0.3.0","text":"new internal method up_to_date_interactions cassette_class now allows filtering cassettes user specified date (#96) (#104) re-recording now works - see new use_casette() parameters re_record_interval clean_outdated_http_interactions; can now set re-record interval (seconds) can example always re-record cassettes don’t want cassettes X days old; depends new internal method up_to_date_interactions (#104) (#105)","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"minor-improvements-0-3-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"vcr 0.3.0","text":"fix link HTTP Testing Book: ropensci -> ropenscilabs (#100) add new section HTTP Testing Book “vcr enabled testing” sub-sections check vs. test, package CRAN, package continuous integration sites (#102)","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"vcr 0.3.0","text":"fix request body matching - partly fixes webmockr package (requires v0.4 greater); generally, makes single type request matching (e.g., just HTTP method, just URL) possible, working , now working; added examples single type matching (#70) (#76) (#108) fixed type cassette_class typo lead setting headers correctly webmockr::wi_th() call (#107)","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"vcr-026","dir":"Changelog","previous_headings":"","what":"vcr 0.2.6","title":"vcr 0.2.6","text":"CRAN release: 2019-02-12","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"new-features-0-2-6","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"vcr 0.2.6","text":"gains function use_vcr() setup vcr package. requires 3 pkgs Suggests; required don’t need use use_vcr() (#52) (#95) thanks @maelle feedback! vcr actually supports four recording modes: none, , new_episodes, . ’s used default. See ?recording description recording modes. now test file test-ause_cassette_record_modes.R gives examples expect record mode; future http testing book much information Record modes chapter https://books.ropensci.org/http-testing/record-modes.html (commit)","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"minor-improvements-0-2-6","dir":"Changelog","previous_headings":"NEW FEATURES","what":"MINOR IMPROVEMENTS","title":"vcr 0.2.6","text":"lots tidying better/consistent style fix partial argument call .list(): .names (commit)","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"bug-fixes-0-2-6","dir":"Changelog","previous_headings":"NEW FEATURES","what":"BUG FIXES","title":"vcr 0.2.6","text":"error thrown httr due wrong date format. problem webmockr package. see ropensci/webmockr#58 (#91) thanks @Bisaloo fix use_cassette() using httr: weren’t collecting status_code storing cassette (#92) thanks @Bisaloo fixes use_cassette() httr: working fine single httr request, 2 (#93) (#94) thanks @Rekyt error blocks use_cassette() URL presented request, ’s secret (API key) URL query parameter (place URL) secret shown world (including error block happens CI public web). fixed now; use directives filter_sensitive_data call vcr_configure() mask secrets error messages (#89) (#90)","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"vcr-022","dir":"Changelog","previous_headings":"","what":"vcr 0.2.2","title":"vcr 0.2.2","text":"CRAN release: 2019-01-13","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"minor-improvements-0-2-2","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"vcr 0.2.2","text":"typo fixes (#85) thanks @Rekyt added docs: least one person reported different results using vcr devtools::check vs. devtools::test (#83) changed suggested usage vcr test suites use_cassette block wrapped test_that way around; leads testthat pointing actual test line failed rather pointing start use_cassette block (#86)","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"bug-fixes-0-2-2","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"vcr 0.2.2","text":"Fix %||% internal function. incorrectly logical comparison; headers list passed one tests statement length > 1. Dev R testing (#87)","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"vcr-020","dir":"Changelog","previous_headings":"","what":"vcr 0.2.0","title":"vcr 0.2.0","text":"CRAN release: 2018-10-19","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"vcr 0.2.0","text":"gains support httr package. vcr now supports crul httr. integration httr via webmockr, tooling resides vcr (#73) (#79)","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"bug-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"vcr 0.2.0","text":"fix handling response bodies raw type (#77) (#78)","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"vcr-010","dir":"Changelog","previous_headings":"","what":"vcr 0.1.0","title":"vcr 0.1.0","text":"CRAN release: 2018-05-14","code":""},{"path":"https://docs.ropensci.org/vcr/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"vcr 0.1.0","text":"released CRAN","code":""}]
